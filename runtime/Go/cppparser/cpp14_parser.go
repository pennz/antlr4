// Code generated from CPP14.g4 by ANTLR 4.8. DO NOT EDIT.

package parser // CPP14

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa


var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 152, 2471, 
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13, 
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9, 
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23, 
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4, 
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34, 
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9, 
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44, 
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4, 
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55, 
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9, 
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65, 
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4, 
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76, 
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9, 
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86, 
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4, 
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97, 
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102, 
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106, 
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111, 
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115, 
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120, 
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124, 
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129, 
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133, 
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138, 
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142, 
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147, 
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151, 
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 4, 156, 
	9, 156, 4, 157, 9, 157, 4, 158, 9, 158, 4, 159, 9, 159, 4, 160, 9, 160, 
	4, 161, 9, 161, 4, 162, 9, 162, 4, 163, 9, 163, 4, 164, 9, 164, 4, 165, 
	9, 165, 4, 166, 9, 166, 4, 167, 9, 167, 4, 168, 9, 168, 4, 169, 9, 169, 
	4, 170, 9, 170, 4, 171, 9, 171, 4, 172, 9, 172, 4, 173, 9, 173, 4, 174, 
	9, 174, 4, 175, 9, 175, 4, 176, 9, 176, 4, 177, 9, 177, 4, 178, 9, 178, 
	4, 179, 9, 179, 4, 180, 9, 180, 4, 181, 9, 181, 4, 182, 9, 182, 4, 183, 
	9, 183, 4, 184, 9, 184, 4, 185, 9, 185, 4, 186, 9, 186, 4, 187, 9, 187, 
	4, 188, 9, 188, 4, 189, 9, 189, 4, 190, 9, 190, 4, 191, 9, 191, 4, 192, 
	9, 192, 4, 193, 9, 193, 4, 194, 9, 194, 4, 195, 9, 195, 4, 196, 9, 196, 
	4, 197, 9, 197, 4, 198, 9, 198, 4, 199, 9, 199, 4, 200, 9, 200, 4, 201, 
	9, 201, 3, 2, 5, 2, 404, 10, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 5, 3, 416, 10, 3, 3, 4, 3, 4, 5, 4, 420, 10, 4, 3, 
	5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 431, 10, 5, 3, 
	6, 3, 6, 5, 6, 435, 10, 6, 3, 6, 3, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 
	7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 450, 10, 7, 3, 7, 3, 7, 3, 7, 3, 
	7, 3, 7, 5, 7, 457, 10, 7, 3, 7, 3, 7, 3, 7, 7, 7, 462, 10, 7, 12, 7, 14, 
	7, 465, 11, 7, 3, 8, 3, 8, 5, 8, 469, 10, 8, 3, 8, 3, 8, 3, 9, 3, 9, 5, 
	9, 475, 10, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 5, 
	10, 485, 10, 10, 3, 11, 3, 11, 3, 12, 3, 12, 3, 12, 5, 12, 492, 10, 12, 
	3, 12, 3, 12, 3, 12, 3, 12, 5, 12, 498, 10, 12, 7, 12, 500, 10, 12, 12, 
	12, 14, 12, 503, 11, 12, 3, 13, 3, 13, 5, 13, 507, 10, 13, 3, 14, 3, 14, 
	3, 14, 3, 14, 5, 14, 513, 10, 14, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 
	15, 520, 10, 15, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16, 526, 10, 16, 3, 16, 
	5, 16, 529, 10, 16, 3, 16, 5, 16, 532, 10, 16, 3, 16, 5, 16, 535, 10, 16, 
	3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 542, 10, 17, 3, 17, 3, 17, 3, 
	17, 3, 17, 3, 17, 5, 17, 549, 10, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 
	3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 
	17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 
	3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 
	17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 
	3, 17, 3, 17, 3, 17, 5, 17, 601, 10, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 
	17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 616, 
	10, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 622, 10, 17, 3, 17, 3, 17, 3, 
	17, 3, 17, 5, 17, 628, 10, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 
	3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 7, 17, 641, 10, 17, 12, 17, 14, 17, 
	644, 11, 17, 3, 18, 3, 18, 3, 19, 3, 19, 3, 20, 3, 20, 3, 21, 5, 21, 653, 
	10, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 
	3, 21, 3, 21, 3, 21, 3, 21, 5, 21, 668, 10, 21, 3, 21, 3, 21, 3, 21, 3, 
	21, 5, 21, 674, 10, 21, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 
	3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 
	22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 
	5, 22, 704, 10, 22, 3, 23, 3, 23, 3, 24, 5, 24, 709, 10, 24, 3, 24, 3, 
	24, 5, 24, 713, 10, 24, 3, 24, 3, 24, 5, 24, 717, 10, 24, 3, 24, 5, 24, 
	720, 10, 24, 3, 24, 3, 24, 5, 24, 724, 10, 24, 3, 24, 3, 24, 3, 24, 3, 
	24, 5, 24, 730, 10, 24, 5, 24, 732, 10, 24, 3, 25, 3, 25, 3, 25, 3, 25, 
	3, 26, 3, 26, 5, 26, 740, 10, 26, 3, 27, 3, 27, 5, 27, 744, 10, 27, 3, 
	27, 5, 27, 747, 10, 27, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 5, 28, 754, 
	10, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 5, 28, 761, 10, 28, 7, 28, 763, 
	10, 28, 12, 28, 14, 28, 766, 11, 28, 3, 29, 3, 29, 5, 29, 770, 10, 29, 
	3, 29, 3, 29, 5, 29, 774, 10, 29, 3, 30, 5, 30, 777, 10, 30, 3, 30, 3, 
	30, 3, 30, 5, 30, 782, 10, 30, 3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 788, 
	10, 30, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 32, 3, 32, 3, 32, 3, 32, 
	3, 32, 3, 32, 5, 32, 801, 10, 32, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 
	33, 3, 33, 3, 33, 3, 33, 7, 33, 812, 10, 33, 12, 33, 14, 33, 815, 11, 33, 
	3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 
	34, 3, 34, 7, 34, 829, 10, 34, 12, 34, 14, 34, 832, 11, 34, 3, 35, 3, 35, 
	3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 7, 35, 843, 10, 35, 12, 
	35, 14, 35, 846, 11, 35, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 
	7, 36, 855, 10, 36, 12, 36, 14, 36, 858, 11, 36, 3, 37, 3, 37, 3, 38, 3, 
	38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 
	3, 38, 3, 38, 3, 38, 7, 38, 877, 10, 38, 12, 38, 14, 38, 880, 11, 38, 3, 
	39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 7, 39, 891, 
	10, 39, 12, 39, 14, 39, 894, 11, 39, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 
	3, 40, 7, 40, 902, 10, 40, 12, 40, 14, 40, 905, 11, 40, 3, 41, 3, 41, 3, 
	41, 3, 41, 3, 41, 3, 41, 7, 41, 913, 10, 41, 12, 41, 14, 41, 916, 11, 41, 
	3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 7, 42, 924, 10, 42, 12, 42, 14, 
	42, 927, 11, 42, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 
	3, 43, 7, 43, 938, 10, 43, 12, 43, 14, 43, 941, 11, 43, 3, 44, 3, 44, 3, 
	44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 7, 44, 952, 10, 44, 12, 44, 
	14, 44, 955, 11, 44, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 5, 
	45, 964, 10, 45, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 5, 46, 972, 
	10, 46, 3, 47, 3, 47, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 7, 48, 
	982, 10, 48, 12, 48, 14, 48, 985, 11, 48, 3, 49, 3, 49, 3, 50, 3, 50, 5, 
	50, 991, 10, 50, 3, 50, 3, 50, 5, 50, 995, 10, 50, 3, 50, 3, 50, 5, 50, 
	999, 10, 50, 3, 50, 3, 50, 5, 50, 1003, 10, 50, 3, 50, 3, 50, 5, 50, 1007, 
	10, 50, 3, 50, 3, 50, 3, 50, 5, 50, 1012, 10, 50, 3, 50, 5, 50, 1015, 10, 
	50, 3, 51, 5, 51, 1018, 10, 51, 3, 51, 3, 51, 3, 51, 3, 51, 5, 51, 1024, 
	10, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 5, 51, 1032, 10, 51, 
	3, 51, 3, 51, 3, 51, 5, 51, 1037, 10, 51, 3, 52, 5, 52, 1040, 10, 52, 3, 
	52, 3, 52, 3, 53, 3, 53, 5, 53, 1046, 10, 53, 3, 53, 3, 53, 3, 54, 3, 54, 
	3, 54, 3, 54, 3, 54, 7, 54, 1055, 10, 54, 12, 54, 14, 54, 1058, 11, 54, 
	3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 
	55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 5, 55, 
	1080, 10, 55, 3, 56, 3, 56, 5, 56, 1084, 10, 56, 3, 56, 3, 56, 3, 56, 3, 
	56, 3, 56, 3, 56, 5, 56, 1092, 10, 56, 3, 56, 3, 56, 3, 56, 3, 56, 5, 56, 
	1098, 10, 56, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 
	57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 5, 57, 
	1118, 10, 57, 3, 57, 3, 57, 5, 57, 1122, 10, 57, 3, 57, 3, 57, 3, 57, 3, 
	57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 5, 57, 1135, 10, 57, 
	3, 58, 3, 58, 5, 58, 1139, 10, 58, 3, 59, 5, 59, 1142, 10, 59, 3, 59, 3, 
	59, 3, 59, 3, 60, 3, 60, 5, 60, 1149, 10, 60, 3, 61, 3, 61, 3, 61, 3, 61, 
	3, 61, 3, 61, 5, 61, 1157, 10, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 
	61, 3, 61, 3, 61, 5, 61, 1167, 10, 61, 3, 62, 3, 62, 3, 63, 3, 63, 3, 63, 
	3, 63, 3, 63, 7, 63, 1176, 10, 63, 12, 63, 14, 63, 1179, 11, 63, 3, 64, 
	3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 1190, 10, 
	64, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 5, 65, 1200, 
	10, 65, 3, 66, 3, 66, 3, 66, 5, 66, 1205, 10, 66, 3, 66, 3, 66, 3, 66, 
	3, 66, 3, 67, 5, 67, 1212, 10, 67, 3, 67, 5, 67, 1215, 10, 67, 3, 67, 3, 
	67, 3, 67, 5, 67, 1220, 10, 67, 3, 67, 3, 67, 3, 67, 5, 67, 1225, 10, 67, 
	3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 69, 3, 69, 3, 
	70, 3, 70, 3, 70, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 5, 71, 1246, 
	10, 71, 3, 72, 3, 72, 5, 72, 1250, 10, 72, 3, 72, 3, 72, 3, 72, 5, 72, 
	1255, 10, 72, 3, 73, 3, 73, 3, 74, 3, 74, 3, 75, 3, 75, 3, 76, 3, 76, 3, 
	76, 5, 76, 1266, 10, 76, 3, 77, 3, 77, 3, 77, 3, 77, 5, 77, 1272, 10, 77, 
	3, 78, 3, 78, 5, 78, 1276, 10, 78, 3, 78, 3, 78, 3, 78, 5, 78, 1281, 10, 
	78, 3, 79, 3, 79, 5, 79, 1285, 10, 79, 3, 79, 3, 79, 3, 79, 5, 79, 1290, 
	10, 79, 3, 80, 5, 80, 1293, 10, 80, 3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 
	3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 3, 
	80, 3, 80, 3, 80, 3, 80, 3, 80, 5, 80, 1315, 10, 80, 3, 81, 3, 81, 3, 81, 
	3, 81, 5, 81, 1321, 10, 81, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 
	82, 3, 82, 3, 82, 5, 82, 1332, 10, 82, 3, 83, 3, 83, 5, 83, 1336, 10, 83, 
	3, 83, 5, 83, 1339, 10, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 
	83, 3, 83, 5, 83, 1349, 10, 83, 3, 83, 3, 83, 3, 83, 3, 83, 5, 83, 1355, 
	10, 83, 3, 83, 5, 83, 1358, 10, 83, 3, 84, 3, 84, 3, 85, 3, 85, 3, 85, 
	5, 85, 1365, 10, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 
	85, 5, 85, 1375, 10, 85, 3, 86, 3, 86, 5, 86, 1379, 10, 86, 3, 86, 5, 86, 
	1382, 10, 86, 3, 86, 5, 86, 1385, 10, 86, 3, 86, 3, 86, 5, 86, 1389, 10, 
	86, 3, 86, 3, 86, 3, 86, 5, 86, 1394, 10, 86, 5, 86, 1396, 10, 86, 3, 87, 
	3, 87, 5, 87, 1400, 10, 87, 3, 87, 3, 87, 5, 87, 1404, 10, 87, 3, 87, 3, 
	87, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 5, 88, 1413, 10, 88, 3, 89, 3, 89, 
	3, 89, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 7, 90, 1424, 10, 90, 12, 
	90, 14, 90, 1427, 11, 90, 3, 91, 3, 91, 3, 91, 3, 91, 3, 91, 5, 91, 1434, 
	10, 91, 3, 92, 3, 92, 3, 93, 3, 93, 5, 93, 1440, 10, 93, 3, 94, 3, 94, 
	3, 95, 3, 95, 5, 95, 1446, 10, 95, 3, 96, 3, 96, 5, 96, 1450, 10, 96, 3, 
	97, 5, 97, 1453, 10, 97, 3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 3, 98, 
	5, 98, 1462, 10, 98, 3, 98, 3, 98, 3, 98, 3, 98, 3, 98, 3, 98, 3, 99, 5, 
	99, 1471, 10, 99, 3, 99, 3, 99, 3, 99, 3, 99, 3, 99, 3, 100, 5, 100, 1479, 
	10, 100, 3, 101, 3, 101, 3, 102, 3, 102, 3, 102, 3, 102, 3, 102, 3, 102, 
	3, 103, 5, 103, 1490, 10, 103, 3, 103, 3, 103, 3, 104, 3, 104, 5, 104, 
	1496, 10, 104, 3, 104, 3, 104, 3, 104, 3, 104, 3, 104, 3, 104, 3, 104, 
	3, 104, 3, 104, 5, 104, 1507, 10, 104, 3, 105, 5, 105, 1510, 10, 105, 3, 
	105, 3, 105, 3, 105, 5, 105, 1515, 10, 105, 3, 105, 3, 105, 3, 105, 3, 
	106, 3, 106, 3, 106, 3, 106, 3, 106, 3, 106, 3, 107, 3, 107, 3, 107, 3, 
	107, 5, 107, 1530, 10, 107, 3, 107, 3, 107, 3, 107, 3, 107, 5, 107, 1536, 
	10, 107, 3, 108, 3, 108, 3, 108, 3, 108, 3, 108, 7, 108, 1543, 10, 108, 
	12, 108, 14, 108, 1546, 11, 108, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 
	3, 109, 3, 109, 5, 109, 1555, 10, 109, 3, 110, 3, 110, 3, 110, 3, 110, 
	5, 110, 1561, 10, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 
	5, 110, 1569, 10, 110, 3, 110, 3, 110, 5, 110, 1573, 10, 110, 3, 111, 3, 
	111, 5, 111, 1577, 10, 111, 3, 111, 3, 111, 3, 111, 5, 111, 1582, 10, 111, 
	3, 111, 3, 111, 3, 111, 5, 111, 1587, 10, 111, 3, 111, 3, 111, 3, 111, 
	3, 111, 3, 111, 7, 111, 1594, 10, 111, 12, 111, 14, 111, 1597, 11, 111, 
	3, 112, 3, 112, 5, 112, 1601, 10, 112, 3, 113, 3, 113, 5, 113, 1605, 10, 
	113, 3, 114, 3, 114, 3, 114, 3, 114, 3, 115, 3, 115, 3, 116, 3, 116, 3, 
	116, 3, 116, 3, 117, 3, 117, 5, 117, 1619, 10, 117, 3, 117, 3, 117, 7, 
	117, 1623, 10, 117, 12, 117, 14, 117, 1626, 11, 117, 3, 118, 3, 118, 3, 
	118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 
	118, 3, 118, 6, 118, 1641, 10, 118, 13, 118, 14, 118, 1642, 5, 118, 1645, 
	10, 118, 3, 119, 3, 119, 3, 119, 3, 119, 3, 119, 3, 119, 7, 119, 1653, 
	10, 119, 12, 119, 14, 119, 1656, 11, 119, 3, 120, 3, 120, 5, 120, 1660, 
	10, 120, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 5, 121, 1667, 10, 121, 
	3, 122, 3, 122, 3, 122, 3, 122, 5, 122, 1673, 10, 122, 3, 123, 3, 123, 
	3, 123, 5, 123, 1678, 10, 123, 3, 123, 3, 123, 3, 123, 3, 123, 5, 123, 
	1684, 10, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 5, 123, 1691, 10, 
	123, 3, 123, 3, 123, 5, 123, 1695, 10, 123, 7, 123, 1697, 10, 123, 12, 
	123, 14, 123, 1700, 11, 123, 3, 124, 3, 124, 3, 124, 3, 124, 5, 124, 1706, 
	10, 124, 3, 124, 5, 124, 1709, 10, 124, 3, 124, 5, 124, 1712, 10, 124, 
	3, 124, 5, 124, 1715, 10, 124, 3, 125, 3, 125, 3, 125, 5, 125, 1720, 10, 
	125, 3, 126, 3, 126, 5, 126, 1724, 10, 126, 3, 126, 5, 126, 1727, 10, 126, 
	3, 126, 3, 126, 5, 126, 1731, 10, 126, 3, 126, 3, 126, 5, 126, 1735, 10, 
	126, 3, 126, 3, 126, 3, 126, 5, 126, 1740, 10, 126, 3, 126, 5, 126, 1743, 
	10, 126, 5, 126, 1745, 10, 126, 3, 127, 3, 127, 5, 127, 1749, 10, 127, 
	3, 128, 3, 128, 3, 129, 3, 129, 3, 130, 5, 130, 1756, 10, 130, 3, 130, 
	3, 130, 3, 131, 3, 131, 5, 131, 1762, 10, 131, 3, 132, 3, 132, 5, 132, 
	1766, 10, 132, 3, 132, 3, 132, 3, 132, 3, 132, 5, 132, 1772, 10, 132, 3, 
	133, 3, 133, 3, 133, 5, 133, 1777, 10, 133, 5, 133, 1779, 10, 133, 3, 134, 
	3, 134, 3, 134, 3, 134, 5, 134, 1785, 10, 134, 3, 134, 3, 134, 5, 134, 
	1789, 10, 134, 3, 134, 3, 134, 3, 134, 3, 134, 5, 134, 1795, 10, 134, 3, 
	134, 3, 134, 3, 134, 3, 134, 3, 134, 5, 134, 1802, 10, 134, 3, 134, 3, 
	134, 5, 134, 1806, 10, 134, 7, 134, 1808, 10, 134, 12, 134, 14, 134, 1811, 
	11, 134, 3, 135, 3, 135, 3, 135, 3, 135, 5, 135, 1817, 10, 135, 3, 136, 
	3, 136, 3, 136, 3, 136, 3, 136, 3, 136, 3, 136, 3, 136, 5, 136, 1827, 10, 
	136, 3, 136, 3, 136, 5, 136, 1831, 10, 136, 7, 136, 1833, 10, 136, 12, 
	136, 14, 136, 1836, 11, 136, 3, 137, 5, 137, 1839, 10, 137, 3, 137, 5, 
	137, 1842, 10, 137, 3, 137, 3, 137, 3, 137, 3, 137, 5, 137, 1848, 10, 137, 
	3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 7, 138, 1856, 10, 138, 
	12, 138, 14, 138, 1859, 11, 138, 3, 139, 5, 139, 1862, 10, 139, 3, 139, 
	3, 139, 3, 139, 3, 139, 5, 139, 1868, 10, 139, 3, 139, 3, 139, 3, 139, 
	3, 139, 3, 139, 3, 139, 5, 139, 1876, 10, 139, 3, 139, 3, 139, 5, 139, 
	1880, 10, 139, 3, 139, 5, 139, 1883, 10, 139, 3, 139, 3, 139, 5, 139, 1887, 
	10, 139, 3, 139, 3, 139, 3, 139, 5, 139, 1892, 10, 139, 3, 140, 5, 140, 
	1895, 10, 140, 3, 140, 5, 140, 1898, 10, 140, 3, 140, 3, 140, 5, 140, 1902, 
	10, 140, 3, 140, 3, 140, 3, 141, 5, 141, 1907, 10, 141, 3, 141, 3, 141, 
	3, 141, 3, 141, 3, 141, 3, 141, 3, 141, 3, 141, 5, 141, 1917, 10, 141, 
	3, 142, 3, 142, 3, 142, 3, 142, 3, 142, 5, 142, 1924, 10, 142, 3, 143, 
	3, 143, 3, 143, 5, 143, 1929, 10, 143, 3, 144, 3, 144, 5, 144, 1933, 10, 
	144, 3, 145, 3, 145, 3, 145, 5, 145, 1938, 10, 145, 3, 145, 3, 145, 3, 
	145, 3, 145, 5, 145, 1944, 10, 145, 7, 145, 1946, 10, 145, 12, 145, 14, 
	145, 1949, 11, 145, 3, 146, 3, 146, 3, 146, 5, 146, 1954, 10, 146, 3, 146, 
	3, 146, 3, 146, 3, 146, 5, 146, 1960, 10, 146, 3, 147, 3, 147, 5, 147, 
	1964, 10, 147, 3, 148, 3, 148, 3, 148, 5, 148, 1969, 10, 148, 3, 148, 3, 
	148, 3, 149, 3, 149, 5, 149, 1975, 10, 149, 3, 149, 3, 149, 5, 149, 1979, 
	10, 149, 3, 149, 5, 149, 1982, 10, 149, 3, 149, 3, 149, 5, 149, 1986, 10, 
	149, 3, 149, 5, 149, 1989, 10, 149, 5, 149, 1991, 10, 149, 3, 150, 5, 150, 
	1994, 10, 150, 3, 150, 3, 150, 3, 151, 3, 151, 3, 152, 3, 152, 3, 153, 
	3, 153, 5, 153, 2004, 10, 153, 3, 153, 3, 153, 3, 153, 5, 153, 2009, 10, 
	153, 5, 153, 2011, 10, 153, 3, 154, 5, 154, 2014, 10, 154, 3, 154, 5, 154, 
	2017, 10, 154, 3, 154, 5, 154, 2020, 10, 154, 3, 154, 3, 154, 3, 154, 3, 
	154, 3, 154, 3, 154, 3, 154, 5, 154, 2029, 10, 154, 3, 155, 3, 155, 3, 
	155, 3, 155, 3, 155, 3, 155, 7, 155, 2037, 10, 155, 12, 155, 14, 155, 2040, 
	11, 155, 3, 156, 3, 156, 5, 156, 2044, 10, 156, 3, 156, 5, 156, 2047, 10, 
	156, 3, 156, 3, 156, 5, 156, 2051, 10, 156, 3, 156, 5, 156, 2054, 10, 156, 
	3, 156, 5, 156, 2057, 10, 156, 3, 156, 3, 156, 5, 156, 2061, 10, 156, 3, 
	157, 3, 157, 3, 157, 3, 157, 3, 157, 7, 157, 2068, 10, 157, 12, 157, 14, 
	157, 2071, 11, 157, 3, 158, 3, 158, 3, 159, 3, 159, 3, 159, 3, 159, 3, 
	160, 3, 160, 3, 160, 3, 161, 3, 161, 3, 161, 5, 161, 2085, 10, 161, 3, 
	161, 3, 161, 3, 161, 3, 161, 5, 161, 2091, 10, 161, 7, 161, 2093, 10, 161, 
	12, 161, 14, 161, 2096, 11, 161, 3, 162, 5, 162, 2099, 10, 162, 3, 162, 
	3, 162, 5, 162, 2103, 10, 162, 3, 162, 3, 162, 5, 162, 2107, 10, 162, 3, 
	162, 3, 162, 5, 162, 2111, 10, 162, 3, 162, 3, 162, 5, 162, 2115, 10, 162, 
	3, 162, 3, 162, 5, 162, 2119, 10, 162, 3, 163, 5, 163, 2122, 10, 163, 3, 
	163, 3, 163, 5, 163, 2126, 10, 163, 3, 164, 3, 164, 3, 165, 3, 165, 3, 
	166, 3, 166, 3, 166, 3, 167, 3, 167, 5, 167, 2137, 10, 167, 3, 168, 3, 
	168, 5, 168, 2141, 10, 168, 3, 169, 3, 169, 3, 169, 3, 170, 3, 170, 5, 
	170, 2148, 10, 170, 3, 170, 3, 170, 5, 170, 2152, 10, 170, 3, 170, 3, 170, 
	3, 170, 5, 170, 2157, 10, 170, 3, 171, 3, 171, 3, 171, 5, 171, 2162, 10, 
	171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 5, 171, 2169, 10, 171, 3, 
	172, 3, 172, 5, 172, 2173, 10, 172, 3, 173, 3, 173, 3, 173, 3, 174, 3, 
	174, 3, 174, 3, 174, 3, 174, 5, 174, 2183, 10, 174, 3, 175, 3, 175, 3, 
	175, 3, 175, 3, 175, 3, 175, 3, 176, 3, 176, 3, 176, 3, 176, 3, 176, 3, 
	176, 7, 176, 2197, 10, 176, 12, 176, 14, 176, 2200, 11, 176, 3, 177, 3, 
	177, 5, 177, 2204, 10, 177, 3, 178, 3, 178, 5, 178, 2208, 10, 178, 3, 178, 
	5, 178, 2211, 10, 178, 3, 178, 3, 178, 5, 178, 2215, 10, 178, 3, 178, 3, 
	178, 3, 178, 3, 178, 5, 178, 2221, 10, 178, 3, 178, 5, 178, 2224, 10, 178, 
	3, 178, 3, 178, 5, 178, 2228, 10, 178, 3, 178, 3, 178, 3, 178, 3, 178, 
	3, 178, 3, 178, 3, 178, 3, 178, 5, 178, 2238, 10, 178, 3, 178, 5, 178, 
	2241, 10, 178, 3, 178, 3, 178, 3, 178, 3, 178, 3, 178, 3, 178, 5, 178, 
	2249, 10, 178, 3, 178, 3, 178, 3, 178, 5, 178, 2254, 10, 178, 3, 179, 3, 
	179, 3, 179, 5, 179, 2259, 10, 179, 3, 179, 3, 179, 3, 180, 3, 180, 3, 
	180, 3, 180, 5, 180, 2267, 10, 180, 3, 180, 3, 180, 3, 180, 3, 180, 3, 
	180, 5, 180, 2274, 10, 180, 3, 180, 3, 180, 5, 180, 2278, 10, 180, 3, 181, 
	3, 181, 3, 182, 3, 182, 3, 182, 5, 182, 2285, 10, 182, 3, 182, 3, 182, 
	3, 182, 3, 182, 5, 182, 2291, 10, 182, 7, 182, 2293, 10, 182, 12, 182, 
	14, 182, 2296, 11, 182, 3, 183, 3, 183, 3, 183, 5, 183, 2301, 10, 183, 
	3, 184, 3, 184, 3, 184, 3, 184, 3, 184, 3, 184, 3, 184, 5, 184, 2310, 10, 
	184, 3, 184, 3, 184, 5, 184, 2314, 10, 184, 3, 185, 5, 185, 2317, 10, 185, 
	3, 185, 3, 185, 3, 185, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 187, 
	3, 187, 3, 187, 3, 187, 3, 188, 3, 188, 5, 188, 2333, 10, 188, 3, 188, 
	3, 188, 3, 188, 3, 189, 3, 189, 5, 189, 2340, 10, 189, 3, 190, 3, 190, 
	3, 190, 3, 190, 3, 190, 3, 190, 3, 191, 5, 191, 2349, 10, 191, 3, 191, 
	3, 191, 3, 191, 3, 191, 5, 191, 2355, 10, 191, 3, 191, 3, 191, 5, 191, 
	2359, 10, 191, 3, 191, 5, 191, 2362, 10, 191, 3, 192, 3, 192, 5, 192, 2366, 
	10, 192, 3, 193, 3, 193, 5, 193, 2370, 10, 193, 3, 194, 3, 194, 3, 194, 
	5, 194, 2375, 10, 194, 3, 194, 3, 194, 3, 195, 3, 195, 3, 195, 5, 195, 
	2382, 10, 195, 3, 195, 3, 195, 3, 195, 3, 195, 5, 195, 2388, 10, 195, 7, 
	195, 2390, 10, 195, 12, 195, 14, 195, 2393, 11, 195, 3, 196, 3, 196, 3, 
	196, 3, 196, 3, 196, 3, 196, 5, 196, 2401, 10, 196, 3, 197, 3, 197, 3, 
	197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 
	197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 
	197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 
	197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 
	197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 
	197, 3, 197, 3, 197, 3, 197, 5, 197, 2454, 10, 197, 3, 198, 3, 198, 3, 
	198, 3, 198, 3, 198, 3, 198, 3, 198, 5, 198, 2463, 10, 198, 3, 199, 3, 
	199, 3, 200, 3, 200, 3, 201, 3, 201, 3, 201, 2, 36, 12, 22, 32, 54, 64, 
	66, 68, 70, 74, 76, 78, 80, 82, 84, 86, 94, 106, 124, 178, 214, 220, 232, 
	236, 244, 266, 270, 274, 288, 308, 312, 320, 350, 362, 388, 202, 2, 4, 
	6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 
	44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 
	80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 
	114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 
	144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 
	174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 
	204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 
	234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 
	264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 
	294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 
	324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 
	354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 
	384, 386, 388, 390, 392, 394, 396, 398, 400, 2, 16, 4, 2, 98, 98, 102, 
	102, 5, 2, 3, 4, 92, 94, 98, 100, 3, 2, 113, 114, 5, 2, 102, 102, 105, 
	112, 115, 116, 7, 2, 37, 37, 48, 48, 58, 58, 64, 64, 71, 71, 5, 2, 35, 
	35, 45, 45, 81, 81, 3, 2, 86, 91, 4, 2, 23, 23, 83, 83, 4, 2, 5, 5, 98, 
	98, 5, 2, 22, 22, 67, 67, 78, 78, 4, 2, 39, 39, 54, 54, 3, 2, 55, 57, 4, 
	2, 38, 38, 73, 73, 3, 2, 145, 148, 2, 2755, 2, 403, 3, 2, 2, 2, 4, 415, 
	3, 2, 2, 2, 6, 419, 3, 2, 2, 2, 8, 430, 3, 2, 2, 2, 10, 432, 3, 2, 2, 2, 
	12, 449, 3, 2, 2, 2, 14, 466, 3, 2, 2, 2, 16, 472, 3, 2, 2, 2, 18, 484, 
	3, 2, 2, 2, 20, 486, 3, 2, 2, 2, 22, 488, 3, 2, 2, 2, 24, 506, 3, 2, 2, 
	2, 26, 512, 3, 2, 2, 2, 28, 519, 3, 2, 2, 2, 30, 521, 3, 2, 2, 2, 32, 600, 
	3, 2, 2, 2, 34, 645, 3, 2, 2, 2, 36, 647, 3, 2, 2, 2, 38, 649, 3, 2, 2, 
	2, 40, 673, 3, 2, 2, 2, 42, 703, 3, 2, 2, 2, 44, 705, 3, 2, 2, 2, 46, 731, 
	3, 2, 2, 2, 48, 733, 3, 2, 2, 2, 50, 737, 3, 2, 2, 2, 52, 746, 3, 2, 2, 
	2, 54, 748, 3, 2, 2, 2, 56, 773, 3, 2, 2, 2, 58, 787, 3, 2, 2, 2, 60, 789, 
	3, 2, 2, 2, 62, 800, 3, 2, 2, 2, 64, 802, 3, 2, 2, 2, 66, 816, 3, 2, 2, 
	2, 68, 833, 3, 2, 2, 2, 70, 847, 3, 2, 2, 2, 72, 859, 3, 2, 2, 2, 74, 861, 
	3, 2, 2, 2, 76, 881, 3, 2, 2, 2, 78, 895, 3, 2, 2, 2, 80, 906, 3, 2, 2, 
	2, 82, 917, 3, 2, 2, 2, 84, 928, 3, 2, 2, 2, 86, 942, 3, 2, 2, 2, 88, 963, 
	3, 2, 2, 2, 90, 971, 3, 2, 2, 2, 92, 973, 3, 2, 2, 2, 94, 975, 3, 2, 2, 
	2, 96, 986, 3, 2, 2, 2, 98, 1014, 3, 2, 2, 2, 100, 1036, 3, 2, 2, 2, 102, 
	1039, 3, 2, 2, 2, 104, 1043, 3, 2, 2, 2, 106, 1049, 3, 2, 2, 2, 108, 1079, 
	3, 2, 2, 2, 110, 1097, 3, 2, 2, 2, 112, 1134, 3, 2, 2, 2, 114, 1138, 3, 
	2, 2, 2, 116, 1141, 3, 2, 2, 2, 118, 1148, 3, 2, 2, 2, 120, 1166, 3, 2, 
	2, 2, 122, 1168, 3, 2, 2, 2, 124, 1170, 3, 2, 2, 2, 126, 1189, 3, 2, 2, 
	2, 128, 1199, 3, 2, 2, 2, 130, 1201, 3, 2, 2, 2, 132, 1224, 3, 2, 2, 2, 
	134, 1226, 3, 2, 2, 2, 136, 1234, 3, 2, 2, 2, 138, 1236, 3, 2, 2, 2, 140, 
	1245, 3, 2, 2, 2, 142, 1254, 3, 2, 2, 2, 144, 1256, 3, 2, 2, 2, 146, 1258, 
	3, 2, 2, 2, 148, 1260, 3, 2, 2, 2, 150, 1265, 3, 2, 2, 2, 152, 1271, 3, 
	2, 2, 2, 154, 1280, 3, 2, 2, 2, 156, 1289, 3, 2, 2, 2, 158, 1314, 3, 2, 
	2, 2, 160, 1320, 3, 2, 2, 2, 162, 1331, 3, 2, 2, 2, 164, 1357, 3, 2, 2, 
	2, 166, 1359, 3, 2, 2, 2, 168, 1374, 3, 2, 2, 2, 170, 1395, 3, 2, 2, 2, 
	172, 1397, 3, 2, 2, 2, 174, 1412, 3, 2, 2, 2, 176, 1414, 3, 2, 2, 2, 178, 
	1417, 3, 2, 2, 2, 180, 1433, 3, 2, 2, 2, 182, 1435, 3, 2, 2, 2, 184, 1439, 
	3, 2, 2, 2, 186, 1441, 3, 2, 2, 2, 188, 1445, 3, 2, 2, 2, 190, 1449, 3, 
	2, 2, 2, 192, 1452, 3, 2, 2, 2, 194, 1461, 3, 2, 2, 2, 196, 1470, 3, 2, 
	2, 2, 198, 1478, 3, 2, 2, 2, 200, 1480, 3, 2, 2, 2, 202, 1482, 3, 2, 2, 
	2, 204, 1489, 3, 2, 2, 2, 206, 1506, 3, 2, 2, 2, 208, 1509, 3, 2, 2, 2, 
	210, 1519, 3, 2, 2, 2, 212, 1535, 3, 2, 2, 2, 214, 1537, 3, 2, 2, 2, 216, 
	1554, 3, 2, 2, 2, 218, 1572, 3, 2, 2, 2, 220, 1581, 3, 2, 2, 2, 222, 1598, 
	3, 2, 2, 2, 224, 1604, 3, 2, 2, 2, 226, 1606, 3, 2, 2, 2, 228, 1610, 3, 
	2, 2, 2, 230, 1612, 3, 2, 2, 2, 232, 1616, 3, 2, 2, 2, 234, 1644, 3, 2, 
	2, 2, 236, 1646, 3, 2, 2, 2, 238, 1657, 3, 2, 2, 2, 240, 1666, 3, 2, 2, 
	2, 242, 1672, 3, 2, 2, 2, 244, 1683, 3, 2, 2, 2, 246, 1701, 3, 2, 2, 2, 
	248, 1716, 3, 2, 2, 2, 250, 1744, 3, 2, 2, 2, 252, 1746, 3, 2, 2, 2, 254, 
	1750, 3, 2, 2, 2, 256, 1752, 3, 2, 2, 2, 258, 1755, 3, 2, 2, 2, 260, 1759, 
	3, 2, 2, 2, 262, 1771, 3, 2, 2, 2, 264, 1778, 3, 2, 2, 2, 266, 1794, 3, 
	2, 2, 2, 268, 1816, 3, 2, 2, 2, 270, 1818, 3, 2, 2, 2, 272, 1847, 3, 2, 
	2, 2, 274, 1849, 3, 2, 2, 2, 276, 1891, 3, 2, 2, 2, 278, 1894, 3, 2, 2, 
	2, 280, 1916, 3, 2, 2, 2, 282, 1923, 3, 2, 2, 2, 284, 1928, 3, 2, 2, 2, 
	286, 1932, 3, 2, 2, 2, 288, 1934, 3, 2, 2, 2, 290, 1959, 3, 2, 2, 2, 292, 
	1963, 3, 2, 2, 2, 294, 1965, 3, 2, 2, 2, 296, 1990, 3, 2, 2, 2, 298, 1993, 
	3, 2, 2, 2, 300, 1997, 3, 2, 2, 2, 302, 1999, 3, 2, 2, 2, 304, 2010, 3, 
	2, 2, 2, 306, 2028, 3, 2, 2, 2, 308, 2030, 3, 2, 2, 2, 310, 2060, 3, 2, 
	2, 2, 312, 2062, 3, 2, 2, 2, 314, 2072, 3, 2, 2, 2, 316, 2074, 3, 2, 2, 
	2, 318, 2078, 3, 2, 2, 2, 320, 2081, 3, 2, 2, 2, 322, 2118, 3, 2, 2, 2, 
	324, 2125, 3, 2, 2, 2, 326, 2127, 3, 2, 2, 2, 328, 2129, 3, 2, 2, 2, 330, 
	2131, 3, 2, 2, 2, 332, 2134, 3, 2, 2, 2, 334, 2138, 3, 2, 2, 2, 336, 2142, 
	3, 2, 2, 2, 338, 2156, 3, 2, 2, 2, 340, 2168, 3, 2, 2, 2, 342, 2172, 3, 
	2, 2, 2, 344, 2174, 3, 2, 2, 2, 346, 2182, 3, 2, 2, 2, 348, 2184, 3, 2, 
	2, 2, 350, 2190, 3, 2, 2, 2, 352, 2203, 3, 2, 2, 2, 354, 2253, 3, 2, 2, 
	2, 356, 2255, 3, 2, 2, 2, 358, 2277, 3, 2, 2, 2, 360, 2279, 3, 2, 2, 2, 
	362, 2281, 3, 2, 2, 2, 364, 2300, 3, 2, 2, 2, 366, 2313, 3, 2, 2, 2, 368, 
	2316, 3, 2, 2, 2, 370, 2321, 3, 2, 2, 2, 372, 2326, 3, 2, 2, 2, 374, 2330, 
	3, 2, 2, 2, 376, 2337, 3, 2, 2, 2, 378, 2341, 3, 2, 2, 2, 380, 2361, 3, 
	2, 2, 2, 382, 2363, 3, 2, 2, 2, 384, 2369, 3, 2, 2, 2, 386, 2371, 3, 2, 
	2, 2, 388, 2378, 3, 2, 2, 2, 390, 2400, 3, 2, 2, 2, 392, 2453, 3, 2, 2, 
	2, 394, 2462, 3, 2, 2, 2, 396, 2464, 3, 2, 2, 2, 398, 2466, 3, 2, 2, 2, 
	400, 2468, 3, 2, 2, 2, 402, 404, 5, 124, 63, 2, 403, 402, 3, 2, 2, 2, 403, 
	404, 3, 2, 2, 2, 404, 405, 3, 2, 2, 2, 405, 406, 7, 2, 2, 3, 406, 3, 3, 
	2, 2, 2, 407, 416, 5, 394, 198, 2, 408, 416, 7, 70, 2, 2, 409, 410, 7, 
	86, 2, 2, 410, 411, 5, 94, 48, 2, 411, 412, 7, 87, 2, 2, 412, 416, 3, 2, 
	2, 2, 413, 416, 5, 6, 4, 2, 414, 416, 5, 14, 8, 2, 415, 407, 3, 2, 2, 2, 
	415, 408, 3, 2, 2, 2, 415, 409, 3, 2, 2, 2, 415, 413, 3, 2, 2, 2, 415, 
	414, 3, 2, 2, 2, 416, 5, 3, 2, 2, 2, 417, 420, 5, 8, 5, 2, 418, 420, 5, 
	10, 6, 2, 419, 417, 3, 2, 2, 2, 419, 418, 3, 2, 2, 2, 420, 7, 3, 2, 2, 
	2, 421, 431, 7, 135, 2, 2, 422, 431, 5, 344, 173, 2, 423, 431, 5, 330, 
	166, 2, 424, 431, 5, 346, 174, 2, 425, 426, 7, 100, 2, 2, 426, 431, 5, 
	292, 147, 2, 427, 428, 7, 100, 2, 2, 428, 431, 5, 162, 82, 2, 429, 431, 
	5, 358, 180, 2, 430, 421, 3, 2, 2, 2, 430, 422, 3, 2, 2, 2, 430, 423, 3, 
	2, 2, 2, 430, 424, 3, 2, 2, 2, 430, 425, 3, 2, 2, 2, 430, 427, 3, 2, 2, 
	2, 430, 429, 3, 2, 2, 2, 431, 9, 3, 2, 2, 2, 432, 434, 5, 12, 7, 2, 433, 
	435, 7, 69, 2, 2, 434, 433, 3, 2, 2, 2, 434, 435, 3, 2, 2, 2, 435, 436, 
	3, 2, 2, 2, 436, 437, 5, 8, 5, 2, 437, 11, 3, 2, 2, 2, 438, 439, 8, 7, 
	1, 2, 439, 450, 7, 130, 2, 2, 440, 441, 5, 160, 81, 2, 441, 442, 7, 130, 
	2, 2, 442, 450, 3, 2, 2, 2, 443, 444, 5, 184, 93, 2, 444, 445, 7, 130, 
	2, 2, 445, 450, 3, 2, 2, 2, 446, 447, 5, 162, 82, 2, 447, 448, 7, 130, 
	2, 2, 448, 450, 3, 2, 2, 2, 449, 438, 3, 2, 2, 2, 449, 440, 3, 2, 2, 2, 
	449, 443, 3, 2, 2, 2, 449, 446, 3, 2, 2, 2, 450, 463, 3, 2, 2, 2, 451, 
	452, 12, 4, 2, 2, 452, 453, 7, 135, 2, 2, 453, 462, 7, 130, 2, 2, 454, 
	456, 12, 3, 2, 2, 455, 457, 7, 69, 2, 2, 456, 455, 3, 2, 2, 2, 456, 457, 
	3, 2, 2, 2, 457, 458, 3, 2, 2, 2, 458, 459, 5, 356, 179, 2, 459, 460, 7, 
	130, 2, 2, 460, 462, 3, 2, 2, 2, 461, 451, 3, 2, 2, 2, 461, 454, 3, 2, 
	2, 2, 462, 465, 3, 2, 2, 2, 463, 461, 3, 2, 2, 2, 463, 464, 3, 2, 2, 2, 
	464, 13, 3, 2, 2, 2, 465, 463, 3, 2, 2, 2, 466, 468, 5, 16, 9, 2, 467, 
	469, 5, 30, 16, 2, 468, 467, 3, 2, 2, 2, 468, 469, 3, 2, 2, 2, 469, 470, 
	3, 2, 2, 2, 470, 471, 5, 104, 53, 2, 471, 15, 3, 2, 2, 2, 472, 474, 7, 
	88, 2, 2, 473, 475, 5, 18, 10, 2, 474, 473, 3, 2, 2, 2, 474, 475, 3, 2, 
	2, 2, 475, 476, 3, 2, 2, 2, 476, 477, 7, 89, 2, 2, 477, 17, 3, 2, 2, 2, 
	478, 485, 5, 20, 11, 2, 479, 485, 5, 22, 12, 2, 480, 481, 5, 20, 11, 2, 
	481, 482, 7, 125, 2, 2, 482, 483, 5, 22, 12, 2, 483, 485, 3, 2, 2, 2, 484, 
	478, 3, 2, 2, 2, 484, 479, 3, 2, 2, 2, 484, 480, 3, 2, 2, 2, 485, 19, 3, 
	2, 2, 2, 486, 487, 9, 2, 2, 2, 487, 21, 3, 2, 2, 2, 488, 489, 8, 12, 1, 
	2, 489, 491, 5, 24, 13, 2, 490, 492, 7, 134, 2, 2, 491, 490, 3, 2, 2, 2, 
	491, 492, 3, 2, 2, 2, 492, 501, 3, 2, 2, 2, 493, 494, 12, 3, 2, 2, 494, 
	495, 7, 125, 2, 2, 495, 497, 5, 24, 13, 2, 496, 498, 7, 134, 2, 2, 497, 
	496, 3, 2, 2, 2, 497, 498, 3, 2, 2, 2, 498, 500, 3, 2, 2, 2, 499, 493, 
	3, 2, 2, 2, 500, 503, 3, 2, 2, 2, 501, 499, 3, 2, 2, 2, 501, 502, 3, 2, 
	2, 2, 502, 23, 3, 2, 2, 2, 503, 501, 3, 2, 2, 2, 504, 507, 5, 26, 14, 2, 
	505, 507, 5, 28, 15, 2, 506, 504, 3, 2, 2, 2, 506, 505, 3, 2, 2, 2, 507, 
	25, 3, 2, 2, 2, 508, 513, 7, 135, 2, 2, 509, 510, 7, 98, 2, 2, 510, 513, 
	7, 135, 2, 2, 511, 513, 7, 70, 2, 2, 512, 508, 3, 2, 2, 2, 512, 509, 3, 
	2, 2, 2, 512, 511, 3, 2, 2, 2, 513, 27, 3, 2, 2, 2, 514, 515, 7, 135, 2, 
	2, 515, 520, 5, 282, 142, 2, 516, 517, 7, 98, 2, 2, 517, 518, 7, 135, 2, 
	2, 518, 520, 5, 282, 142, 2, 519, 514, 3, 2, 2, 2, 519, 516, 3, 2, 2, 2, 
	520, 29, 3, 2, 2, 2, 521, 522, 7, 86, 2, 2, 522, 523, 5, 272, 137, 2, 523, 
	525, 7, 87, 2, 2, 524, 526, 7, 48, 2, 2, 525, 524, 3, 2, 2, 2, 525, 526, 
	3, 2, 2, 2, 526, 528, 3, 2, 2, 2, 527, 529, 5, 384, 193, 2, 528, 527, 3, 
	2, 2, 2, 528, 529, 3, 2, 2, 2, 529, 531, 3, 2, 2, 2, 530, 532, 5, 214, 
	108, 2, 531, 530, 3, 2, 2, 2, 531, 532, 3, 2, 2, 2, 532, 534, 3, 2, 2, 
	2, 533, 535, 5, 248, 125, 2, 534, 533, 3, 2, 2, 2, 534, 535, 3, 2, 2, 2, 
	535, 31, 3, 2, 2, 2, 536, 537, 8, 17, 1, 2, 537, 601, 5, 4, 3, 2, 538, 
	539, 5, 158, 80, 2, 539, 541, 7, 86, 2, 2, 540, 542, 5, 38, 20, 2, 541, 
	540, 3, 2, 2, 2, 541, 542, 3, 2, 2, 2, 542, 543, 3, 2, 2, 2, 543, 544, 
	7, 87, 2, 2, 544, 601, 3, 2, 2, 2, 545, 546, 5, 366, 184, 2, 546, 548, 
	7, 86, 2, 2, 547, 549, 5, 38, 20, 2, 548, 547, 3, 2, 2, 2, 548, 549, 3, 
	2, 2, 2, 549, 550, 3, 2, 2, 2, 550, 551, 7, 87, 2, 2, 551, 601, 3, 2, 2, 
	2, 552, 553, 5, 158, 80, 2, 553, 554, 5, 290, 146, 2, 554, 601, 3, 2, 2, 
	2, 555, 556, 5, 366, 184, 2, 556, 557, 5, 290, 146, 2, 557, 601, 3, 2, 
	2, 2, 558, 559, 7, 32, 2, 2, 559, 560, 7, 103, 2, 2, 560, 561, 5, 260, 
	131, 2, 561, 562, 7, 104, 2, 2, 562, 563, 7, 86, 2, 2, 563, 564, 5, 94, 
	48, 2, 564, 565, 7, 87, 2, 2, 565, 601, 3, 2, 2, 2, 566, 567, 7, 66, 2, 
	2, 567, 568, 7, 103, 2, 2, 568, 569, 5, 260, 131, 2, 569, 570, 7, 104, 
	2, 2, 570, 571, 7, 86, 2, 2, 571, 572, 5, 94, 48, 2, 572, 573, 7, 87, 2, 
	2, 573, 601, 3, 2, 2, 2, 574, 575, 7, 59, 2, 2, 575, 576, 7, 103, 2, 2, 
	576, 577, 5, 260, 131, 2, 577, 578, 7, 104, 2, 2, 578, 579, 7, 86, 2, 2, 
	579, 580, 5, 94, 48, 2, 580, 581, 7, 87, 2, 2, 581, 601, 3, 2, 2, 2, 582, 
	583, 7, 25, 2, 2, 583, 584, 7, 103, 2, 2, 584, 585, 5, 260, 131, 2, 585, 
	586, 7, 104, 2, 2, 586, 587, 7, 86, 2, 2, 587, 588, 5, 94, 48, 2, 588, 
	589, 7, 87, 2, 2, 589, 601, 3, 2, 2, 2, 590, 591, 5, 36, 19, 2, 591, 592, 
	7, 86, 2, 2, 592, 593, 5, 94, 48, 2, 593, 594, 7, 87, 2, 2, 594, 601, 3, 
	2, 2, 2, 595, 596, 5, 36, 19, 2, 596, 597, 7, 86, 2, 2, 597, 598, 5, 260, 
	131, 2, 598, 599, 7, 87, 2, 2, 599, 601, 3, 2, 2, 2, 600, 536, 3, 2, 2, 
	2, 600, 538, 3, 2, 2, 2, 600, 545, 3, 2, 2, 2, 600, 552, 3, 2, 2, 2, 600, 
	555, 3, 2, 2, 2, 600, 558, 3, 2, 2, 2, 600, 566, 3, 2, 2, 2, 600, 574, 
	3, 2, 2, 2, 600, 582, 3, 2, 2, 2, 600, 590, 3, 2, 2, 2, 600, 595, 3, 2, 
	2, 2, 601, 642, 3, 2, 2, 2, 602, 603, 12, 21, 2, 2, 603, 604, 7, 88, 2, 
	2, 604, 605, 5, 94, 48, 2, 605, 606, 7, 89, 2, 2, 606, 641, 3, 2, 2, 2, 
	607, 608, 12, 20, 2, 2, 608, 609, 7, 88, 2, 2, 609, 610, 5, 290, 146, 2, 
	610, 611, 7, 89, 2, 2, 611, 641, 3, 2, 2, 2, 612, 613, 12, 19, 2, 2, 613, 
	615, 7, 86, 2, 2, 614, 616, 5, 38, 20, 2, 615, 614, 3, 2, 2, 2, 615, 616, 
	3, 2, 2, 2, 616, 617, 3, 2, 2, 2, 617, 641, 7, 87, 2, 2, 618, 619, 12, 
	14, 2, 2, 619, 621, 7, 132, 2, 2, 620, 622, 7, 69, 2, 2, 621, 620, 3, 2, 
	2, 2, 621, 622, 3, 2, 2, 2, 622, 623, 3, 2, 2, 2, 623, 641, 5, 6, 4, 2, 
	624, 625, 12, 13, 2, 2, 625, 627, 7, 127, 2, 2, 626, 628, 7, 69, 2, 2, 
	627, 626, 3, 2, 2, 2, 627, 628, 3, 2, 2, 2, 628, 629, 3, 2, 2, 2, 629, 
	641, 5, 6, 4, 2, 630, 631, 12, 12, 2, 2, 631, 632, 7, 132, 2, 2, 632, 641, 
	5, 40, 21, 2, 633, 634, 12, 11, 2, 2, 634, 635, 7, 127, 2, 2, 635, 641, 
	5, 40, 21, 2, 636, 637, 12, 10, 2, 2, 637, 641, 7, 123, 2, 2, 638, 639, 
	12, 9, 2, 2, 639, 641, 7, 124, 2, 2, 640, 602, 3, 2, 2, 2, 640, 607, 3, 
	2, 2, 2, 640, 612, 3, 2, 2, 2, 640, 618, 3, 2, 2, 2, 640, 624, 3, 2, 2, 
	2, 640, 630, 3, 2, 2, 2, 640, 633, 3, 2, 2, 2, 640, 636, 3, 2, 2, 2, 640, 
	638, 3, 2, 2, 2, 641, 644, 3, 2, 2, 2, 642, 640, 3, 2, 2, 2, 642, 643, 
	3, 2, 2, 2, 643, 33, 3, 2, 2, 2, 644, 642, 3, 2, 2, 2, 645, 646, 7, 76, 
	2, 2, 646, 35, 3, 2, 2, 2, 647, 648, 7, 76, 2, 2, 648, 37, 3, 2, 2, 2, 
	649, 650, 5, 288, 145, 2, 650, 39, 3, 2, 2, 2, 651, 653, 5, 12, 7, 2, 652, 
	651, 3, 2, 2, 2, 652, 653, 3, 2, 2, 2, 653, 654, 3, 2, 2, 2, 654, 655, 
	5, 160, 81, 2, 655, 656, 7, 130, 2, 2, 656, 657, 7, 100, 2, 2, 657, 658, 
	5, 160, 81, 2, 658, 674, 3, 2, 2, 2, 659, 660, 5, 12, 7, 2, 660, 661, 7, 
	69, 2, 2, 661, 662, 5, 356, 179, 2, 662, 663, 7, 130, 2, 2, 663, 664, 7, 
	100, 2, 2, 664, 665, 5, 160, 81, 2, 665, 674, 3, 2, 2, 2, 666, 668, 5, 
	12, 7, 2, 667, 666, 3, 2, 2, 2, 667, 668, 3, 2, 2, 2, 668, 669, 3, 2, 2, 
	2, 669, 670, 7, 100, 2, 2, 670, 674, 5, 160, 81, 2, 671, 672, 7, 100, 2, 
	2, 672, 674, 5, 162, 82, 2, 673, 652, 3, 2, 2, 2, 673, 659, 3, 2, 2, 2, 
	673, 667, 3, 2, 2, 2, 673, 671, 3, 2, 2, 2, 674, 41, 3, 2, 2, 2, 675, 704, 
	5, 32, 17, 2, 676, 677, 7, 123, 2, 2, 677, 704, 5, 62, 32, 2, 678, 679, 
	7, 124, 2, 2, 679, 704, 5, 62, 32, 2, 680, 681, 5, 44, 23, 2, 681, 682, 
	5, 62, 32, 2, 682, 704, 3, 2, 2, 2, 683, 684, 7, 63, 2, 2, 684, 704, 5, 
	42, 22, 2, 685, 686, 7, 63, 2, 2, 686, 687, 7, 86, 2, 2, 687, 688, 5, 260, 
	131, 2, 688, 689, 7, 87, 2, 2, 689, 704, 3, 2, 2, 2, 690, 691, 7, 63, 2, 
	2, 691, 692, 7, 134, 2, 2, 692, 693, 7, 86, 2, 2, 693, 694, 7, 135, 2, 
	2, 694, 704, 7, 87, 2, 2, 695, 696, 7, 12, 2, 2, 696, 697, 7, 86, 2, 2, 
	697, 698, 5, 260, 131, 2, 698, 699, 7, 87, 2, 2, 699, 704, 3, 2, 2, 2, 
	700, 704, 5, 60, 31, 2, 701, 704, 5, 46, 24, 2, 702, 704, 5, 58, 30, 2, 
	703, 675, 3, 2, 2, 2, 703, 676, 3, 2, 2, 2, 703, 678, 3, 2, 2, 2, 703, 
	680, 3, 2, 2, 2, 703, 683, 3, 2, 2, 2, 703, 685, 3, 2, 2, 2, 703, 690, 
	3, 2, 2, 2, 703, 695, 3, 2, 2, 2, 703, 700, 3, 2, 2, 2, 703, 701, 3, 2, 
	2, 2, 703, 702, 3, 2, 2, 2, 704, 43, 3, 2, 2, 2, 705, 706, 9, 3, 2, 2, 
	706, 45, 3, 2, 2, 2, 707, 709, 7, 130, 2, 2, 708, 707, 3, 2, 2, 2, 708, 
	709, 3, 2, 2, 2, 709, 710, 3, 2, 2, 2, 710, 712, 7, 50, 2, 2, 711, 713, 
	5, 48, 25, 2, 712, 711, 3, 2, 2, 2, 712, 713, 3, 2, 2, 2, 713, 714, 3, 
	2, 2, 2, 714, 716, 5, 50, 26, 2, 715, 717, 5, 56, 29, 2, 716, 715, 3, 2, 
	2, 2, 716, 717, 3, 2, 2, 2, 717, 732, 3, 2, 2, 2, 718, 720, 7, 130, 2, 
	2, 719, 718, 3, 2, 2, 2, 719, 720, 3, 2, 2, 2, 720, 721, 3, 2, 2, 2, 721, 
	723, 7, 50, 2, 2, 722, 724, 5, 48, 25, 2, 723, 722, 3, 2, 2, 2, 723, 724, 
	3, 2, 2, 2, 724, 725, 3, 2, 2, 2, 725, 726, 7, 86, 2, 2, 726, 727, 5, 260, 
	131, 2, 727, 729, 7, 87, 2, 2, 728, 730, 5, 56, 29, 2, 729, 728, 3, 2, 
	2, 2, 729, 730, 3, 2, 2, 2, 730, 732, 3, 2, 2, 2, 731, 708, 3, 2, 2, 2, 
	731, 719, 3, 2, 2, 2, 732, 47, 3, 2, 2, 2, 733, 734, 7, 86, 2, 2, 734, 
	735, 5, 38, 20, 2, 735, 736, 7, 87, 2, 2, 736, 49, 3, 2, 2, 2, 737, 739, 
	5, 154, 78, 2, 738, 740, 5, 52, 27, 2, 739, 738, 3, 2, 2, 2, 739, 740, 
	3, 2, 2, 2, 740, 51, 3, 2, 2, 2, 741, 743, 5, 250, 126, 2, 742, 744, 5, 
	52, 27, 2, 743, 742, 3, 2, 2, 2, 743, 744, 3, 2, 2, 2, 744, 747, 3, 2, 
	2, 2, 745, 747, 5, 54, 28, 2, 746, 741, 3, 2, 2, 2, 746, 745, 3, 2, 2, 
	2, 747, 53, 3, 2, 2, 2, 748, 749, 8, 28, 1, 2, 749, 750, 7, 88, 2, 2, 750, 
	751, 5, 94, 48, 2, 751, 753, 7, 89, 2, 2, 752, 754, 5, 214, 108, 2, 753, 
	752, 3, 2, 2, 2, 753, 754, 3, 2, 2, 2, 754, 764, 3, 2, 2, 2, 755, 756, 
	12, 3, 2, 2, 756, 757, 7, 88, 2, 2, 757, 758, 5, 96, 49, 2, 758, 760, 7, 
	89, 2, 2, 759, 761, 5, 214, 108, 2, 760, 759, 3, 2, 2, 2, 760, 761, 3, 
	2, 2, 2, 761, 763, 3, 2, 2, 2, 762, 755, 3, 2, 2, 2, 763, 766, 3, 2, 2, 
	2, 764, 762, 3, 2, 2, 2, 764, 765, 3, 2, 2, 2, 765, 55, 3, 2, 2, 2, 766, 
	764, 3, 2, 2, 2, 767, 769, 7, 86, 2, 2, 768, 770, 5, 38, 20, 2, 769, 768, 
	3, 2, 2, 2, 769, 770, 3, 2, 2, 2, 770, 771, 3, 2, 2, 2, 771, 774, 7, 87, 
	2, 2, 772, 774, 5, 290, 146, 2, 773, 767, 3, 2, 2, 2, 773, 772, 3, 2, 2, 
	2, 774, 57, 3, 2, 2, 2, 775, 777, 7, 130, 2, 2, 776, 775, 3, 2, 2, 2, 776, 
	777, 3, 2, 2, 2, 777, 778, 3, 2, 2, 2, 778, 779, 7, 29, 2, 2, 779, 788, 
	5, 62, 32, 2, 780, 782, 7, 130, 2, 2, 781, 780, 3, 2, 2, 2, 781, 782, 3, 
	2, 2, 2, 782, 783, 3, 2, 2, 2, 783, 784, 7, 29, 2, 2, 784, 785, 7, 88, 
	2, 2, 785, 786, 7, 89, 2, 2, 786, 788, 5, 62, 32, 2, 787, 776, 3, 2, 2, 
	2, 787, 781, 3, 2, 2, 2, 788, 59, 3, 2, 2, 2, 789, 790, 7, 51, 2, 2, 790, 
	791, 7, 86, 2, 2, 791, 792, 5, 94, 48, 2, 792, 793, 7, 87, 2, 2, 793, 61, 
	3, 2, 2, 2, 794, 801, 5, 42, 22, 2, 795, 796, 7, 86, 2, 2, 796, 797, 5, 
	260, 131, 2, 797, 798, 7, 87, 2, 2, 798, 799, 5, 62, 32, 2, 799, 801, 3, 
	2, 2, 2, 800, 794, 3, 2, 2, 2, 800, 795, 3, 2, 2, 2, 801, 63, 3, 2, 2, 
	2, 802, 803, 8, 33, 1, 2, 803, 804, 5, 62, 32, 2, 804, 813, 3, 2, 2, 2, 
	805, 806, 12, 4, 2, 2, 806, 807, 7, 133, 2, 2, 807, 812, 5, 62, 32, 2, 
	808, 809, 12, 3, 2, 2, 809, 810, 7, 126, 2, 2, 810, 812, 5, 62, 32, 2, 
	811, 805, 3, 2, 2, 2, 811, 808, 3, 2, 2, 2, 812, 815, 3, 2, 2, 2, 813, 
	811, 3, 2, 2, 2, 813, 814, 3, 2, 2, 2, 814, 65, 3, 2, 2, 2, 815, 813, 3, 
	2, 2, 2, 816, 817, 8, 34, 1, 2, 817, 818, 5, 64, 33, 2, 818, 830, 3, 2, 
	2, 2, 819, 820, 12, 5, 2, 2, 820, 821, 7, 94, 2, 2, 821, 829, 5, 64, 33, 
	2, 822, 823, 12, 4, 2, 2, 823, 824, 7, 95, 2, 2, 824, 829, 5, 64, 33, 2, 
	825, 826, 12, 3, 2, 2, 826, 827, 7, 96, 2, 2, 827, 829, 5, 64, 33, 2, 828, 
	819, 3, 2, 2, 2, 828, 822, 3, 2, 2, 2, 828, 825, 3, 2, 2, 2, 829, 832, 
	3, 2, 2, 2, 830, 828, 3, 2, 2, 2, 830, 831, 3, 2, 2, 2, 831, 67, 3, 2, 
	2, 2, 832, 830, 3, 2, 2, 2, 833, 834, 8, 35, 1, 2, 834, 835, 5, 66, 34, 
	2, 835, 844, 3, 2, 2, 2, 836, 837, 12, 4, 2, 2, 837, 838, 7, 92, 2, 2, 
	838, 843, 5, 66, 34, 2, 839, 840, 12, 3, 2, 2, 840, 841, 7, 93, 2, 2, 841, 
	843, 5, 66, 34, 2, 842, 836, 3, 2, 2, 2, 842, 839, 3, 2, 2, 2, 843, 846, 
	3, 2, 2, 2, 844, 842, 3, 2, 2, 2, 844, 845, 3, 2, 2, 2, 845, 69, 3, 2, 
	2, 2, 846, 844, 3, 2, 2, 2, 847, 848, 8, 36, 1, 2, 848, 849, 5, 68, 35, 
	2, 849, 856, 3, 2, 2, 2, 850, 851, 12, 3, 2, 2, 851, 852, 5, 72, 37, 2, 
	852, 853, 5, 68, 35, 2, 853, 855, 3, 2, 2, 2, 854, 850, 3, 2, 2, 2, 855, 
	858, 3, 2, 2, 2, 856, 854, 3, 2, 2, 2, 856, 857, 3, 2, 2, 2, 857, 71, 3, 
	2, 2, 2, 858, 856, 3, 2, 2, 2, 859, 860, 9, 4, 2, 2, 860, 73, 3, 2, 2, 
	2, 861, 862, 8, 38, 1, 2, 862, 863, 5, 70, 36, 2, 863, 878, 3, 2, 2, 2, 
	864, 865, 12, 6, 2, 2, 865, 866, 7, 103, 2, 2, 866, 877, 5, 70, 36, 2, 
	867, 868, 12, 5, 2, 2, 868, 869, 7, 104, 2, 2, 869, 877, 5, 70, 36, 2, 
	870, 871, 12, 4, 2, 2, 871, 872, 7, 119, 2, 2, 872, 877, 5, 70, 36, 2, 
	873, 874, 12, 3, 2, 2, 874, 875, 7, 120, 2, 2, 875, 877, 5, 70, 36, 2, 
	876, 864, 3, 2, 2, 2, 876, 867, 3, 2, 2, 2, 876, 870, 3, 2, 2, 2, 876, 
	873, 3, 2, 2, 2, 877, 880, 3, 2, 2, 2, 878, 876, 3, 2, 2, 2, 878, 879, 
	3, 2, 2, 2, 879, 75, 3, 2, 2, 2, 880, 878, 3, 2, 2, 2, 881, 882, 8, 39, 
	1, 2, 882, 883, 5, 74, 38, 2, 883, 892, 3, 2, 2, 2, 884, 885, 12, 4, 2, 
	2, 885, 886, 7, 117, 2, 2, 886, 891, 5, 74, 38, 2, 887, 888, 12, 3, 2, 
	2, 888, 889, 7, 118, 2, 2, 889, 891, 5, 74, 38, 2, 890, 884, 3, 2, 2, 2, 
	890, 887, 3, 2, 2, 2, 891, 894, 3, 2, 2, 2, 892, 890, 3, 2, 2, 2, 892, 
	893, 3, 2, 2, 2, 893, 77, 3, 2, 2, 2, 894, 892, 3, 2, 2, 2, 895, 896, 8, 
	40, 1, 2, 896, 897, 5, 76, 39, 2, 897, 903, 3, 2, 2, 2, 898, 899, 12, 3, 
	2, 2, 899, 900, 7, 98, 2, 2, 900, 902, 5, 76, 39, 2, 901, 898, 3, 2, 2, 
	2, 902, 905, 3, 2, 2, 2, 903, 901, 3, 2, 2, 2, 903, 904, 3, 2, 2, 2, 904, 
	79, 3, 2, 2, 2, 905, 903, 3, 2, 2, 2, 906, 907, 8, 41, 1, 2, 907, 908, 
	5, 78, 40, 2, 908, 914, 3, 2, 2, 2, 909, 910, 12, 3, 2, 2, 910, 911, 7, 
	97, 2, 2, 911, 913, 5, 78, 40, 2, 912, 909, 3, 2, 2, 2, 913, 916, 3, 2, 
	2, 2, 914, 912, 3, 2, 2, 2, 914, 915, 3, 2, 2, 2, 915, 81, 3, 2, 2, 2, 
	916, 914, 3, 2, 2, 2, 917, 918, 8, 42, 1, 2, 918, 919, 5, 80, 41, 2, 919, 
	925, 3, 2, 2, 2, 920, 921, 12, 3, 2, 2, 921, 922, 7, 99, 2, 2, 922, 924, 
	5, 80, 41, 2, 923, 920, 3, 2, 2, 2, 924, 927, 3, 2, 2, 2, 925, 923, 3, 
	2, 2, 2, 925, 926, 3, 2, 2, 2, 926, 83, 3, 2, 2, 2, 927, 925, 3, 2, 2, 
	2, 928, 929, 8, 43, 1, 2, 929, 930, 5, 82, 42, 2, 930, 939, 3, 2, 2, 2, 
	931, 932, 12, 4, 2, 2, 932, 933, 7, 5, 2, 2, 933, 938, 5, 82, 42, 2, 934, 
	935, 12, 3, 2, 2, 935, 936, 7, 6, 2, 2, 936, 938, 5, 82, 42, 2, 937, 931, 
	3, 2, 2, 2, 937, 934, 3, 2, 2, 2, 938, 941, 3, 2, 2, 2, 939, 937, 3, 2, 
	2, 2, 939, 940, 3, 2, 2, 2, 940, 85, 3, 2, 2, 2, 941, 939, 3, 2, 2, 2, 
	942, 943, 8, 44, 1, 2, 943, 944, 5, 84, 43, 2, 944, 953, 3, 2, 2, 2, 945, 
	946, 12, 4, 2, 2, 946, 947, 7, 7, 2, 2, 947, 952, 5, 84, 43, 2, 948, 949, 
	12, 3, 2, 2, 949, 950, 7, 8, 2, 2, 950, 952, 5, 84, 43, 2, 951, 945, 3, 
	2, 2, 2, 951, 948, 3, 2, 2, 2, 952, 955, 3, 2, 2, 2, 953, 951, 3, 2, 2, 
	2, 953, 954, 3, 2, 2, 2, 954, 87, 3, 2, 2, 2, 955, 953, 3, 2, 2, 2, 956, 
	964, 5, 86, 44, 2, 957, 958, 5, 86, 44, 2, 958, 959, 7, 128, 2, 2, 959, 
	960, 5, 94, 48, 2, 960, 961, 7, 129, 2, 2, 961, 962, 5, 90, 46, 2, 962, 
	964, 3, 2, 2, 2, 963, 956, 3, 2, 2, 2, 963, 957, 3, 2, 2, 2, 964, 89, 3, 
	2, 2, 2, 965, 972, 5, 88, 45, 2, 966, 967, 5, 86, 44, 2, 967, 968, 5, 92, 
	47, 2, 968, 969, 5, 286, 144, 2, 969, 972, 3, 2, 2, 2, 970, 972, 5, 382, 
	192, 2, 971, 965, 3, 2, 2, 2, 971, 966, 3, 2, 2, 2, 971, 970, 3, 2, 2, 
	2, 972, 91, 3, 2, 2, 2, 973, 974, 9, 5, 2, 2, 974, 93, 3, 2, 2, 2, 975, 
	976, 8, 48, 1, 2, 976, 977, 5, 90, 46, 2, 977, 983, 3, 2, 2, 2, 978, 979, 
	12, 3, 2, 2, 979, 980, 7, 125, 2, 2, 980, 982, 5, 90, 46, 2, 981, 978, 
	3, 2, 2, 2, 982, 985, 3, 2, 2, 2, 983, 981, 3, 2, 2, 2, 983, 984, 3, 2, 
	2, 2, 984, 95, 3, 2, 2, 2, 985, 983, 3, 2, 2, 2, 986, 987, 5, 88, 45, 2, 
	987, 97, 3, 2, 2, 2, 988, 1015, 5, 100, 51, 2, 989, 991, 5, 214, 108, 2, 
	990, 989, 3, 2, 2, 2, 990, 991, 3, 2, 2, 2, 991, 992, 3, 2, 2, 2, 992, 
	1015, 5, 102, 52, 2, 993, 995, 5, 214, 108, 2, 994, 993, 3, 2, 2, 2, 994, 
	995, 3, 2, 2, 2, 995, 996, 3, 2, 2, 2, 996, 1015, 5, 104, 53, 2, 997, 999, 
	5, 214, 108, 2, 998, 997, 3, 2, 2, 2, 998, 999, 3, 2, 2, 2, 999, 1000, 
	3, 2, 2, 2, 1000, 1015, 5, 108, 55, 2, 1001, 1003, 5, 214, 108, 2, 1002, 
	1001, 3, 2, 2, 2, 1002, 1003, 3, 2, 2, 2, 1003, 1004, 3, 2, 2, 2, 1004, 
	1015, 5, 112, 57, 2, 1005, 1007, 5, 214, 108, 2, 1006, 1005, 3, 2, 2, 2, 
	1006, 1007, 3, 2, 2, 2, 1007, 1008, 3, 2, 2, 2, 1008, 1015, 5, 120, 61, 
	2, 1009, 1015, 5, 122, 62, 2, 1010, 1012, 5, 214, 108, 2, 1011, 1010, 3, 
	2, 2, 2, 1011, 1012, 3, 2, 2, 2, 1012, 1013, 3, 2, 2, 2, 1013, 1015, 5, 
	372, 187, 2, 1014, 988, 3, 2, 2, 2, 1014, 990, 3, 2, 2, 2, 1014, 994, 3, 
	2, 2, 2, 1014, 998, 3, 2, 2, 2, 1014, 1002, 3, 2, 2, 2, 1014, 1006, 3, 
	2, 2, 2, 1014, 1009, 3, 2, 2, 2, 1014, 1011, 3, 2, 2, 2, 1015, 99, 3, 2, 
	2, 2, 1016, 1018, 5, 214, 108, 2, 1017, 1016, 3, 2, 2, 2, 1017, 1018, 3, 
	2, 2, 2, 1018, 1019, 3, 2, 2, 2, 1019, 1020, 7, 135, 2, 2, 1020, 1021, 
	7, 129, 2, 2, 1021, 1037, 5, 98, 50, 2, 1022, 1024, 5, 214, 108, 2, 1023, 
	1022, 3, 2, 2, 2, 1023, 1024, 3, 2, 2, 2, 1024, 1025, 3, 2, 2, 2, 1025, 
	1026, 7, 17, 2, 2, 1026, 1027, 5, 96, 49, 2, 1027, 1028, 7, 129, 2, 2, 
	1028, 1029, 5, 98, 50, 2, 1029, 1037, 3, 2, 2, 2, 1030, 1032, 5, 214, 108, 
	2, 1031, 1030, 3, 2, 2, 2, 1031, 1032, 3, 2, 2, 2, 1032, 1033, 3, 2, 2, 
	2, 1033, 1034, 7, 28, 2, 2, 1034, 1035, 7, 129, 2, 2, 1035, 1037, 5, 98, 
	50, 2, 1036, 1017, 3, 2, 2, 2, 1036, 1023, 3, 2, 2, 2, 1036, 1031, 3, 2, 
	2, 2, 1037, 101, 3, 2, 2, 2, 1038, 1040, 5, 94, 48, 2, 1039, 1038, 3, 2, 
	2, 2, 1039, 1040, 3, 2, 2, 2, 1040, 1041, 3, 2, 2, 2, 1041, 1042, 7, 131, 
	2, 2, 1042, 103, 3, 2, 2, 2, 1043, 1045, 7, 90, 2, 2, 1044, 1046, 5, 106, 
	54, 2, 1045, 1044, 3, 2, 2, 2, 1045, 1046, 3, 2, 2, 2, 1046, 1047, 3, 2, 
	2, 2, 1047, 1048, 7, 91, 2, 2, 1048, 105, 3, 2, 2, 2, 1049, 1050, 8, 54, 
	1, 2, 1050, 1051, 5, 98, 50, 2, 1051, 1056, 3, 2, 2, 2, 1052, 1053, 12, 
	3, 2, 2, 1053, 1055, 5, 98, 50, 2, 1054, 1052, 3, 2, 2, 2, 1055, 1058, 
	3, 2, 2, 2, 1056, 1054, 3, 2, 2, 2, 1056, 1057, 3, 2, 2, 2, 1057, 107, 
	3, 2, 2, 2, 1058, 1056, 3, 2, 2, 2, 1059, 1060, 7, 44, 2, 2, 1060, 1061, 
	7, 86, 2, 2, 1061, 1062, 5, 110, 56, 2, 1062, 1063, 7, 87, 2, 2, 1063, 
	1064, 5, 98, 50, 2, 1064, 1080, 3, 2, 2, 2, 1065, 1066, 7, 44, 2, 2, 1066, 
	1067, 7, 86, 2, 2, 1067, 1068, 5, 110, 56, 2, 1068, 1069, 7, 87, 2, 2, 
	1069, 1070, 5, 98, 50, 2, 1070, 1071, 7, 33, 2, 2, 1071, 1072, 5, 98, 50, 
	2, 1072, 1080, 3, 2, 2, 2, 1073, 1074, 7, 68, 2, 2, 1074, 1075, 7, 86, 
	2, 2, 1075, 1076, 5, 110, 56, 2, 1076, 1077, 7, 87, 2, 2, 1077, 1078, 5, 
	98, 50, 2, 1078, 1080, 3, 2, 2, 2, 1079, 1059, 3, 2, 2, 2, 1079, 1065, 
	3, 2, 2, 2, 1079, 1073, 3, 2, 2, 2, 1080, 109, 3, 2, 2, 2, 1081, 1098, 
	5, 94, 48, 2, 1082, 1084, 5, 214, 108, 2, 1083, 1082, 3, 2, 2, 2, 1083, 
	1084, 3, 2, 2, 2, 1084, 1085, 3, 2, 2, 2, 1085, 1086, 5, 142, 72, 2, 1086, 
	1087, 5, 240, 121, 2, 1087, 1088, 7, 102, 2, 2, 1088, 1089, 5, 286, 144, 
	2, 1089, 1098, 3, 2, 2, 2, 1090, 1092, 5, 214, 108, 2, 1091, 1090, 3, 2, 
	2, 2, 1091, 1092, 3, 2, 2, 2, 1092, 1093, 3, 2, 2, 2, 1093, 1094, 5, 142, 
	72, 2, 1094, 1095, 5, 240, 121, 2, 1095, 1096, 5, 290, 146, 2, 1096, 1098, 
	3, 2, 2, 2, 1097, 1081, 3, 2, 2, 2, 1097, 1083, 3, 2, 2, 2, 1097, 1091, 
	3, 2, 2, 2, 1098, 111, 3, 2, 2, 2, 1099, 1100, 7, 85, 2, 2, 1100, 1101, 
	7, 86, 2, 2, 1101, 1102, 5, 110, 56, 2, 1102, 1103, 7, 87, 2, 2, 1103, 
	1104, 5, 98, 50, 2, 1104, 1135, 3, 2, 2, 2, 1105, 1106, 7, 30, 2, 2, 1106, 
	1107, 5, 98, 50, 2, 1107, 1108, 7, 85, 2, 2, 1108, 1109, 7, 86, 2, 2, 1109, 
	1110, 5, 94, 48, 2, 1110, 1111, 7, 87, 2, 2, 1111, 1112, 7, 131, 2, 2, 
	1112, 1135, 3, 2, 2, 2, 1113, 1114, 7, 41, 2, 2, 1114, 1115, 7, 86, 2, 
	2, 1115, 1117, 5, 114, 58, 2, 1116, 1118, 5, 110, 56, 2, 1117, 1116, 3, 
	2, 2, 2, 1117, 1118, 3, 2, 2, 2, 1118, 1119, 3, 2, 2, 2, 1119, 1121, 7, 
	131, 2, 2, 1120, 1122, 5, 94, 48, 2, 1121, 1120, 3, 2, 2, 2, 1121, 1122, 
	3, 2, 2, 2, 1122, 1123, 3, 2, 2, 2, 1123, 1124, 7, 87, 2, 2, 1124, 1125, 
	5, 98, 50, 2, 1125, 1135, 3, 2, 2, 2, 1126, 1127, 7, 41, 2, 2, 1127, 1128, 
	7, 86, 2, 2, 1128, 1129, 5, 116, 59, 2, 1129, 1130, 7, 129, 2, 2, 1130, 
	1131, 5, 118, 60, 2, 1131, 1132, 7, 87, 2, 2, 1132, 1133, 5, 98, 50, 2, 
	1133, 1135, 3, 2, 2, 2, 1134, 1099, 3, 2, 2, 2, 1134, 1105, 3, 2, 2, 2, 
	1134, 1113, 3, 2, 2, 2, 1134, 1126, 3, 2, 2, 2, 1135, 113, 3, 2, 2, 2, 
	1136, 1139, 5, 102, 52, 2, 1137, 1139, 5, 132, 67, 2, 1138, 1136, 3, 2, 
	2, 2, 1138, 1137, 3, 2, 2, 2, 1139, 115, 3, 2, 2, 2, 1140, 1142, 5, 214, 
	108, 2, 1141, 1140, 3, 2, 2, 2, 1141, 1142, 3, 2, 2, 2, 1142, 1143, 3, 
	2, 2, 2, 1143, 1144, 5, 142, 72, 2, 1144, 1145, 5, 240, 121, 2, 1145, 117, 
	3, 2, 2, 2, 1146, 1149, 5, 94, 48, 2, 1147, 1149, 5, 290, 146, 2, 1148, 
	1146, 3, 2, 2, 2, 1148, 1147, 3, 2, 2, 2, 1149, 119, 3, 2, 2, 2, 1150, 
	1151, 7, 16, 2, 2, 1151, 1167, 7, 131, 2, 2, 1152, 1153, 7, 26, 2, 2, 1153, 
	1167, 7, 131, 2, 2, 1154, 1156, 7, 60, 2, 2, 1155, 1157, 5, 94, 48, 2, 
	1156, 1155, 3, 2, 2, 2, 1156, 1157, 3, 2, 2, 2, 1157, 1158, 3, 2, 2, 2, 
	1158, 1167, 7, 131, 2, 2, 1159, 1160, 7, 60, 2, 2, 1160, 1161, 5, 290, 
	146, 2, 1161, 1162, 7, 131, 2, 2, 1162, 1167, 3, 2, 2, 2, 1163, 1164, 7, 
	43, 2, 2, 1164, 1165, 7, 135, 2, 2, 1165, 1167, 7, 131, 2, 2, 1166, 1150, 
	3, 2, 2, 2, 1166, 1152, 3, 2, 2, 2, 1166, 1154, 3, 2, 2, 2, 1166, 1159, 
	3, 2, 2, 2, 1166, 1163, 3, 2, 2, 2, 1167, 121, 3, 2, 2, 2, 1168, 1169, 
	5, 128, 65, 2, 1169, 123, 3, 2, 2, 2, 1170, 1171, 8, 63, 1, 2, 1171, 1172, 
	5, 126, 64, 2, 1172, 1177, 3, 2, 2, 2, 1173, 1174, 12, 3, 2, 2, 1174, 1176, 
	5, 126, 64, 2, 1175, 1173, 3, 2, 2, 2, 1176, 1179, 3, 2, 2, 2, 1177, 1175, 
	3, 2, 2, 2, 1177, 1178, 3, 2, 2, 2, 1178, 125, 3, 2, 2, 2, 1179, 1177, 
	3, 2, 2, 2, 1180, 1190, 5, 128, 65, 2, 1181, 1190, 5, 278, 140, 2, 1182, 
	1190, 5, 348, 175, 2, 1183, 1190, 5, 368, 185, 2, 1184, 1190, 5, 370, 186, 
	2, 1185, 1190, 5, 212, 107, 2, 1186, 1190, 5, 188, 95, 2, 1187, 1190, 5, 
	136, 69, 2, 1188, 1190, 5, 138, 70, 2, 1189, 1180, 3, 2, 2, 2, 1189, 1181, 
	3, 2, 2, 2, 1189, 1182, 3, 2, 2, 2, 1189, 1183, 3, 2, 2, 2, 1189, 1184, 
	3, 2, 2, 2, 1189, 1185, 3, 2, 2, 2, 1189, 1186, 3, 2, 2, 2, 1189, 1187, 
	3, 2, 2, 2, 1189, 1188, 3, 2, 2, 2, 1190, 127, 3, 2, 2, 2, 1191, 1200, 
	5, 132, 67, 2, 1192, 1200, 5, 210, 106, 2, 1193, 1200, 5, 202, 102, 2, 
	1194, 1200, 5, 206, 104, 2, 1195, 1200, 5, 208, 105, 2, 1196, 1200, 5, 
	134, 68, 2, 1197, 1200, 5, 130, 66, 2, 1198, 1200, 5, 172, 87, 2, 1199, 
	1191, 3, 2, 2, 2, 1199, 1192, 3, 2, 2, 2, 1199, 1193, 3, 2, 2, 2, 1199, 
	1194, 3, 2, 2, 2, 1199, 1195, 3, 2, 2, 2, 1199, 1196, 3, 2, 2, 2, 1199, 
	1197, 3, 2, 2, 2, 1199, 1198, 3, 2, 2, 2, 1200, 129, 3, 2, 2, 2, 1201, 
	1202, 7, 80, 2, 2, 1202, 1204, 7, 135, 2, 2, 1203, 1205, 5, 214, 108, 2, 
	1204, 1203, 3, 2, 2, 2, 1204, 1205, 3, 2, 2, 2, 1205, 1206, 3, 2, 2, 2, 
	1206, 1207, 7, 102, 2, 2, 1207, 1208, 5, 260, 131, 2, 1208, 1209, 7, 131, 
	2, 2, 1209, 131, 3, 2, 2, 2, 1210, 1212, 5, 142, 72, 2, 1211, 1210, 3, 
	2, 2, 2, 1211, 1212, 3, 2, 2, 2, 1212, 1214, 3, 2, 2, 2, 1213, 1215, 5, 
	236, 119, 2, 1214, 1213, 3, 2, 2, 2, 1214, 1215, 3, 2, 2, 2, 1215, 1216, 
	3, 2, 2, 2, 1216, 1225, 7, 131, 2, 2, 1217, 1219, 5, 214, 108, 2, 1218, 
	1220, 5, 142, 72, 2, 1219, 1218, 3, 2, 2, 2, 1219, 1220, 3, 2, 2, 2, 1220, 
	1221, 3, 2, 2, 2, 1221, 1222, 5, 236, 119, 2, 1222, 1223, 7, 131, 2, 2, 
	1223, 1225, 3, 2, 2, 2, 1224, 1211, 3, 2, 2, 2, 1224, 1217, 3, 2, 2, 2, 
	1225, 133, 3, 2, 2, 2, 1226, 1227, 7, 65, 2, 2, 1227, 1228, 7, 86, 2, 2, 
	1228, 1229, 5, 96, 49, 2, 1229, 1230, 7, 125, 2, 2, 1230, 1231, 7, 144, 
	2, 2, 1231, 1232, 7, 87, 2, 2, 1232, 1233, 7, 131, 2, 2, 1233, 135, 3, 
	2, 2, 2, 1234, 1235, 7, 131, 2, 2, 1235, 137, 3, 2, 2, 2, 1236, 1237, 5, 
	214, 108, 2, 1237, 1238, 7, 131, 2, 2, 1238, 139, 3, 2, 2, 2, 1239, 1246, 
	5, 144, 73, 2, 1240, 1246, 5, 150, 76, 2, 1241, 1246, 5, 146, 74, 2, 1242, 
	1246, 7, 42, 2, 2, 1243, 1246, 7, 75, 2, 2, 1244, 1246, 7, 24, 2, 2, 1245, 
	1239, 3, 2, 2, 2, 1245, 1240, 3, 2, 2, 2, 1245, 1241, 3, 2, 2, 2, 1245, 
	1242, 3, 2, 2, 2, 1245, 1243, 3, 2, 2, 2, 1245, 1244, 3, 2, 2, 2, 1246, 
	141, 3, 2, 2, 2, 1247, 1249, 5, 140, 71, 2, 1248, 1250, 5, 214, 108, 2, 
	1249, 1248, 3, 2, 2, 2, 1249, 1250, 3, 2, 2, 2, 1250, 1255, 3, 2, 2, 2, 
	1251, 1252, 5, 140, 71, 2, 1252, 1253, 5, 142, 72, 2, 1253, 1255, 3, 2, 
	2, 2, 1254, 1247, 3, 2, 2, 2, 1254, 1251, 3, 2, 2, 2, 1255, 143, 3, 2, 
	2, 2, 1256, 1257, 9, 6, 2, 2, 1257, 145, 3, 2, 2, 2, 1258, 1259, 9, 7, 
	2, 2, 1259, 147, 3, 2, 2, 2, 1260, 1261, 7, 135, 2, 2, 1261, 149, 3, 2, 
	2, 2, 1262, 1266, 5, 152, 77, 2, 1263, 1266, 5, 294, 148, 2, 1264, 1266, 
	5, 168, 85, 2, 1265, 1262, 3, 2, 2, 2, 1265, 1263, 3, 2, 2, 2, 1265, 1264, 
	3, 2, 2, 2, 1266, 151, 3, 2, 2, 2, 1267, 1272, 5, 158, 80, 2, 1268, 1272, 
	5, 164, 83, 2, 1269, 1272, 5, 366, 184, 2, 1270, 1272, 5, 254, 128, 2, 
	1271, 1267, 3, 2, 2, 2, 1271, 1268, 3, 2, 2, 2, 1271, 1269, 3, 2, 2, 2, 
	1271, 1270, 3, 2, 2, 2, 1272, 153, 3, 2, 2, 2, 1273, 1275, 5, 150, 76, 
	2, 1274, 1276, 5, 214, 108, 2, 1275, 1274, 3, 2, 2, 2, 1275, 1276, 3, 2, 
	2, 2, 1276, 1281, 3, 2, 2, 2, 1277, 1278, 5, 150, 76, 2, 1278, 1279, 5, 
	154, 78, 2, 1279, 1281, 3, 2, 2, 2, 1280, 1273, 3, 2, 2, 2, 1280, 1277, 
	3, 2, 2, 2, 1281, 155, 3, 2, 2, 2, 1282, 1284, 5, 152, 77, 2, 1283, 1285, 
	5, 214, 108, 2, 1284, 1283, 3, 2, 2, 2, 1284, 1285, 3, 2, 2, 2, 1285, 1290, 
	3, 2, 2, 2, 1286, 1287, 5, 152, 77, 2, 1287, 1288, 5, 156, 79, 2, 1288, 
	1290, 3, 2, 2, 2, 1289, 1282, 3, 2, 2, 2, 1289, 1286, 3, 2, 2, 2, 1290, 
	157, 3, 2, 2, 2, 1291, 1293, 5, 12, 7, 2, 1292, 1291, 3, 2, 2, 2, 1292, 
	1293, 3, 2, 2, 2, 1293, 1294, 3, 2, 2, 2, 1294, 1315, 5, 160, 81, 2, 1295, 
	1296, 5, 12, 7, 2, 1296, 1297, 7, 69, 2, 2, 1297, 1298, 5, 356, 179, 2, 
	1298, 1315, 3, 2, 2, 2, 1299, 1315, 7, 19, 2, 2, 1300, 1315, 7, 20, 2, 
	2, 1301, 1315, 7, 21, 2, 2, 1302, 1315, 7, 84, 2, 2, 1303, 1315, 7, 15, 
	2, 2, 1304, 1315, 7, 61, 2, 2, 1305, 1315, 7, 46, 2, 2, 1306, 1315, 7, 
	47, 2, 2, 1307, 1315, 7, 62, 2, 2, 1308, 1315, 7, 79, 2, 2, 1309, 1315, 
	7, 40, 2, 2, 1310, 1315, 7, 31, 2, 2, 1311, 1315, 7, 82, 2, 2, 1312, 1315, 
	7, 14, 2, 2, 1313, 1315, 5, 162, 82, 2, 1314, 1292, 3, 2, 2, 2, 1314, 1295, 
	3, 2, 2, 2, 1314, 1299, 3, 2, 2, 2, 1314, 1300, 3, 2, 2, 2, 1314, 1301, 
	3, 2, 2, 2, 1314, 1302, 3, 2, 2, 2, 1314, 1303, 3, 2, 2, 2, 1314, 1304, 
	3, 2, 2, 2, 1314, 1305, 3, 2, 2, 2, 1314, 1306, 3, 2, 2, 2, 1314, 1307, 
	3, 2, 2, 2, 1314, 1308, 3, 2, 2, 2, 1314, 1309, 3, 2, 2, 2, 1314, 1310, 
	3, 2, 2, 2, 1314, 1311, 3, 2, 2, 2, 1314, 1312, 3, 2, 2, 2, 1314, 1313, 
	3, 2, 2, 2, 1315, 159, 3, 2, 2, 2, 1316, 1321, 5, 292, 147, 2, 1317, 1321, 
	5, 166, 84, 2, 1318, 1321, 5, 148, 75, 2, 1319, 1321, 5, 356, 179, 2, 1320, 
	1316, 3, 2, 2, 2, 1320, 1317, 3, 2, 2, 2, 1320, 1318, 3, 2, 2, 2, 1320, 
	1319, 3, 2, 2, 2, 1321, 161, 3, 2, 2, 2, 1322, 1323, 7, 27, 2, 2, 1323, 
	1324, 7, 86, 2, 2, 1324, 1325, 5, 94, 48, 2, 1325, 1326, 7, 87, 2, 2, 1326, 
	1332, 3, 2, 2, 2, 1327, 1328, 7, 27, 2, 2, 1328, 1329, 7, 86, 2, 2, 1329, 
	1330, 7, 14, 2, 2, 1330, 1332, 7, 87, 2, 2, 1331, 1322, 3, 2, 2, 2, 1331, 
	1327, 3, 2, 2, 2, 1332, 163, 3, 2, 2, 2, 1333, 1335, 5, 302, 152, 2, 1334, 
	1336, 5, 214, 108, 2, 1335, 1334, 3, 2, 2, 2, 1335, 1336, 3, 2, 2, 2, 1336, 
	1338, 3, 2, 2, 2, 1337, 1339, 5, 12, 7, 2, 1338, 1337, 3, 2, 2, 2, 1338, 
	1339, 3, 2, 2, 2, 1339, 1340, 3, 2, 2, 2, 1340, 1341, 7, 135, 2, 2, 1341, 
	1358, 3, 2, 2, 2, 1342, 1343, 5, 302, 152, 2, 1343, 1344, 5, 356, 179, 
	2, 1344, 1358, 3, 2, 2, 2, 1345, 1346, 5, 302, 152, 2, 1346, 1348, 5, 12, 
	7, 2, 1347, 1349, 7, 69, 2, 2, 1348, 1347, 3, 2, 2, 2, 1348, 1349, 3, 2, 
	2, 2, 1349, 1350, 3, 2, 2, 2, 1350, 1351, 5, 356, 179, 2, 1351, 1358, 3, 
	2, 2, 2, 1352, 1354, 7, 34, 2, 2, 1353, 1355, 5, 12, 7, 2, 1354, 1353, 
	3, 2, 2, 2, 1354, 1355, 3, 2, 2, 2, 1355, 1356, 3, 2, 2, 2, 1356, 1358, 
	7, 135, 2, 2, 1357, 1333, 3, 2, 2, 2, 1357, 1342, 3, 2, 2, 2, 1357, 1345, 
	3, 2, 2, 2, 1357, 1352, 3, 2, 2, 2, 1358, 165, 3, 2, 2, 2, 1359, 1360, 
	7, 135, 2, 2, 1360, 167, 3, 2, 2, 2, 1361, 1362, 5, 170, 86, 2, 1362, 1364, 
	7, 90, 2, 2, 1363, 1365, 5, 178, 90, 2, 1364, 1363, 3, 2, 2, 2, 1364, 1365, 
	3, 2, 2, 2, 1365, 1366, 3, 2, 2, 2, 1366, 1367, 7, 91, 2, 2, 1367, 1375, 
	3, 2, 2, 2, 1368, 1369, 5, 170, 86, 2, 1369, 1370, 7, 90, 2, 2, 1370, 1371, 
	5, 178, 90, 2, 1371, 1372, 7, 125, 2, 2, 1372, 1373, 7, 91, 2, 2, 1373, 
	1375, 3, 2, 2, 2, 1374, 1361, 3, 2, 2, 2, 1374, 1368, 3, 2, 2, 2, 1375, 
	169, 3, 2, 2, 2, 1376, 1378, 5, 174, 88, 2, 1377, 1379, 5, 214, 108, 2, 
	1378, 1377, 3, 2, 2, 2, 1378, 1379, 3, 2, 2, 2, 1379, 1381, 3, 2, 2, 2, 
	1380, 1382, 7, 135, 2, 2, 1381, 1380, 3, 2, 2, 2, 1381, 1382, 3, 2, 2, 
	2, 1382, 1384, 3, 2, 2, 2, 1383, 1385, 5, 176, 89, 2, 1384, 1383, 3, 2, 
	2, 2, 1384, 1385, 3, 2, 2, 2, 1385, 1396, 3, 2, 2, 2, 1386, 1388, 5, 174, 
	88, 2, 1387, 1389, 5, 214, 108, 2, 1388, 1387, 3, 2, 2, 2, 1388, 1389, 
	3, 2, 2, 2, 1389, 1390, 3, 2, 2, 2, 1390, 1391, 5, 12, 7, 2, 1391, 1393, 
	7, 135, 2, 2, 1392, 1394, 5, 176, 89, 2, 1393, 1392, 3, 2, 2, 2, 1393, 
	1394, 3, 2, 2, 2, 1394, 1396, 3, 2, 2, 2, 1395, 1376, 3, 2, 2, 2, 1395, 
	1386, 3, 2, 2, 2, 1396, 171, 3, 2, 2, 2, 1397, 1399, 5, 174, 88, 2, 1398, 
	1400, 5, 214, 108, 2, 1399, 1398, 3, 2, 2, 2, 1399, 1400, 3, 2, 2, 2, 1400, 
	1401, 3, 2, 2, 2, 1401, 1403, 7, 135, 2, 2, 1402, 1404, 5, 176, 89, 2, 
	1403, 1402, 3, 2, 2, 2, 1403, 1404, 3, 2, 2, 2, 1404, 1405, 3, 2, 2, 2, 
	1405, 1406, 7, 131, 2, 2, 1406, 173, 3, 2, 2, 2, 1407, 1413, 7, 34, 2, 
	2, 1408, 1409, 7, 34, 2, 2, 1409, 1413, 7, 22, 2, 2, 1410, 1411, 7, 34, 
	2, 2, 1411, 1413, 7, 67, 2, 2, 1412, 1407, 3, 2, 2, 2, 1412, 1408, 3, 2, 
	2, 2, 1412, 1410, 3, 2, 2, 2, 1413, 175, 3, 2, 2, 2, 1414, 1415, 7, 129, 
	2, 2, 1415, 1416, 5, 154, 78, 2, 1416, 177, 3, 2, 2, 2, 1417, 1418, 8, 
	90, 1, 2, 1418, 1419, 5, 180, 91, 2, 1419, 1425, 3, 2, 2, 2, 1420, 1421, 
	12, 3, 2, 2, 1421, 1422, 7, 125, 2, 2, 1422, 1424, 5, 180, 91, 2, 1423, 
	1420, 3, 2, 2, 2, 1424, 1427, 3, 2, 2, 2, 1425, 1423, 3, 2, 2, 2, 1425, 
	1426, 3, 2, 2, 2, 1426, 179, 3, 2, 2, 2, 1427, 1425, 3, 2, 2, 2, 1428, 
	1434, 5, 182, 92, 2, 1429, 1430, 5, 182, 92, 2, 1430, 1431, 7, 102, 2, 
	2, 1431, 1432, 5, 96, 49, 2, 1432, 1434, 3, 2, 2, 2, 1433, 1428, 3, 2, 
	2, 2, 1433, 1429, 3, 2, 2, 2, 1434, 181, 3, 2, 2, 2, 1435, 1436, 7, 135, 
	2, 2, 1436, 183, 3, 2, 2, 2, 1437, 1440, 5, 186, 94, 2, 1438, 1440, 5, 
	200, 101, 2, 1439, 1437, 3, 2, 2, 2, 1439, 1438, 3, 2, 2, 2, 1440, 185, 
	3, 2, 2, 2, 1441, 1442, 7, 135, 2, 2, 1442, 187, 3, 2, 2, 2, 1443, 1446, 
	5, 190, 96, 2, 1444, 1446, 5, 196, 99, 2, 1445, 1443, 3, 2, 2, 2, 1445, 
	1444, 3, 2, 2, 2, 1446, 189, 3, 2, 2, 2, 1447, 1450, 5, 192, 97, 2, 1448, 
	1450, 5, 194, 98, 2, 1449, 1447, 3, 2, 2, 2, 1449, 1448, 3, 2, 2, 2, 1450, 
	191, 3, 2, 2, 2, 1451, 1453, 7, 45, 2, 2, 1452, 1451, 3, 2, 2, 2, 1452, 
	1453, 3, 2, 2, 2, 1453, 1454, 3, 2, 2, 2, 1454, 1455, 7, 49, 2, 2, 1455, 
	1456, 7, 135, 2, 2, 1456, 1457, 7, 90, 2, 2, 1457, 1458, 5, 198, 100, 2, 
	1458, 1459, 7, 91, 2, 2, 1459, 193, 3, 2, 2, 2, 1460, 1462, 7, 45, 2, 2, 
	1461, 1460, 3, 2, 2, 2, 1461, 1462, 3, 2, 2, 2, 1462, 1463, 3, 2, 2, 2, 
	1463, 1464, 7, 49, 2, 2, 1464, 1465, 5, 186, 94, 2, 1465, 1466, 7, 90, 
	2, 2, 1466, 1467, 5, 198, 100, 2, 1467, 1468, 7, 91, 2, 2, 1468, 195, 3, 
	2, 2, 2, 1469, 1471, 7, 45, 2, 2, 1470, 1469, 3, 2, 2, 2, 1470, 1471, 3, 
	2, 2, 2, 1471, 1472, 3, 2, 2, 2, 1472, 1473, 7, 49, 2, 2, 1473, 1474, 7, 
	90, 2, 2, 1474, 1475, 5, 198, 100, 2, 1475, 1476, 7, 91, 2, 2, 1476, 197, 
	3, 2, 2, 2, 1477, 1479, 5, 124, 63, 2, 1478, 1477, 3, 2, 2, 2, 1478, 1479, 
	3, 2, 2, 2, 1479, 199, 3, 2, 2, 2, 1480, 1481, 7, 135, 2, 2, 1481, 201, 
	3, 2, 2, 2, 1482, 1483, 7, 49, 2, 2, 1483, 1484, 7, 135, 2, 2, 1484, 1485, 
	7, 102, 2, 2, 1485, 1486, 5, 204, 103, 2, 1486, 1487, 7, 131, 2, 2, 1487, 
	203, 3, 2, 2, 2, 1488, 1490, 5, 12, 7, 2, 1489, 1488, 3, 2, 2, 2, 1489, 
	1490, 3, 2, 2, 2, 1490, 1491, 3, 2, 2, 2, 1491, 1492, 5, 184, 93, 2, 1492, 
	205, 3, 2, 2, 2, 1493, 1495, 7, 80, 2, 2, 1494, 1496, 7, 77, 2, 2, 1495, 
	1494, 3, 2, 2, 2, 1495, 1496, 3, 2, 2, 2, 1496, 1497, 3, 2, 2, 2, 1497, 
	1498, 5, 12, 7, 2, 1498, 1499, 5, 8, 5, 2, 1499, 1500, 7, 131, 2, 2, 1500, 
	1507, 3, 2, 2, 2, 1501, 1502, 7, 80, 2, 2, 1502, 1503, 7, 130, 2, 2, 1503, 
	1504, 5, 8, 5, 2, 1504, 1505, 7, 131, 2, 2, 1505, 1507, 3, 2, 2, 2, 1506, 
	1493, 3, 2, 2, 2, 1506, 1501, 3, 2, 2, 2, 1507, 207, 3, 2, 2, 2, 1508, 
	1510, 5, 214, 108, 2, 1509, 1508, 3, 2, 2, 2, 1509, 1510, 3, 2, 2, 2, 1510, 
	1511, 3, 2, 2, 2, 1511, 1512, 7, 80, 2, 2, 1512, 1514, 7, 49, 2, 2, 1513, 
	1515, 5, 12, 7, 2, 1514, 1513, 3, 2, 2, 2, 1514, 1515, 3, 2, 2, 2, 1515, 
	1516, 3, 2, 2, 2, 1516, 1517, 5, 184, 93, 2, 1517, 1518, 7, 131, 2, 2, 
	1518, 209, 3, 2, 2, 2, 1519, 1520, 7, 13, 2, 2, 1520, 1521, 7, 86, 2, 2, 
	1521, 1522, 7, 144, 2, 2, 1522, 1523, 7, 87, 2, 2, 1523, 1524, 7, 131, 
	2, 2, 1524, 211, 3, 2, 2, 2, 1525, 1526, 7, 37, 2, 2, 1526, 1527, 7, 144, 
	2, 2, 1527, 1529, 7, 90, 2, 2, 1528, 1530, 5, 124, 63, 2, 1529, 1528, 3, 
	2, 2, 2, 1529, 1530, 3, 2, 2, 2, 1530, 1531, 3, 2, 2, 2, 1531, 1536, 7, 
	91, 2, 2, 1532, 1533, 7, 37, 2, 2, 1533, 1534, 7, 144, 2, 2, 1534, 1536, 
	5, 126, 64, 2, 1535, 1525, 3, 2, 2, 2, 1535, 1532, 3, 2, 2, 2, 1536, 213, 
	3, 2, 2, 2, 1537, 1538, 8, 108, 1, 2, 1538, 1539, 5, 216, 109, 2, 1539, 
	1544, 3, 2, 2, 2, 1540, 1541, 12, 3, 2, 2, 1541, 1543, 5, 216, 109, 2, 
	1542, 1540, 3, 2, 2, 2, 1543, 1546, 3, 2, 2, 2, 1544, 1542, 3, 2, 2, 2, 
	1544, 1545, 3, 2, 2, 2, 1545, 215, 3, 2, 2, 2, 1546, 1544, 3, 2, 2, 2, 
	1547, 1548, 7, 88, 2, 2, 1548, 1549, 7, 88, 2, 2, 1549, 1550, 5, 220, 111, 
	2, 1550, 1551, 7, 89, 2, 2, 1551, 1552, 7, 89, 2, 2, 1552, 1555, 3, 2, 
	2, 2, 1553, 1555, 5, 218, 110, 2, 1554, 1547, 3, 2, 2, 2, 1554, 1553, 3, 
	2, 2, 2, 1555, 217, 3, 2, 2, 2, 1556, 1557, 7, 11, 2, 2, 1557, 1558, 7, 
	86, 2, 2, 1558, 1560, 5, 260, 131, 2, 1559, 1561, 7, 134, 2, 2, 1560, 1559, 
	3, 2, 2, 2, 1560, 1561, 3, 2, 2, 2, 1561, 1562, 3, 2, 2, 2, 1562, 1563, 
	7, 87, 2, 2, 1563, 1573, 3, 2, 2, 2, 1564, 1565, 7, 11, 2, 2, 1565, 1566, 
	7, 86, 2, 2, 1566, 1568, 5, 96, 49, 2, 1567, 1569, 7, 134, 2, 2, 1568, 
	1567, 3, 2, 2, 2, 1568, 1569, 3, 2, 2, 2, 1569, 1570, 3, 2, 2, 2, 1570, 
	1571, 7, 87, 2, 2, 1571, 1573, 3, 2, 2, 2, 1572, 1556, 3, 2, 2, 2, 1572, 
	1564, 3, 2, 2, 2, 1573, 219, 3, 2, 2, 2, 1574, 1576, 8, 111, 1, 2, 1575, 
	1577, 5, 222, 112, 2, 1576, 1575, 3, 2, 2, 2, 1576, 1577, 3, 2, 2, 2, 1577, 
	1582, 3, 2, 2, 2, 1578, 1579, 5, 222, 112, 2, 1579, 1580, 7, 134, 2, 2, 
	1580, 1582, 3, 2, 2, 2, 1581, 1574, 3, 2, 2, 2, 1581, 1578, 3, 2, 2, 2, 
	1582, 1595, 3, 2, 2, 2, 1583, 1584, 12, 5, 2, 2, 1584, 1586, 7, 125, 2, 
	2, 1585, 1587, 5, 222, 112, 2, 1586, 1585, 3, 2, 2, 2, 1586, 1587, 3, 2, 
	2, 2, 1587, 1594, 3, 2, 2, 2, 1588, 1589, 12, 3, 2, 2, 1589, 1590, 7, 125, 
	2, 2, 1590, 1591, 5, 222, 112, 2, 1591, 1592, 7, 134, 2, 2, 1592, 1594, 
	3, 2, 2, 2, 1593, 1583, 3, 2, 2, 2, 1593, 1588, 3, 2, 2, 2, 1594, 1597, 
	3, 2, 2, 2, 1595, 1593, 3, 2, 2, 2, 1595, 1596, 3, 2, 2, 2, 1596, 221, 
	3, 2, 2, 2, 1597, 1595, 3, 2, 2, 2, 1598, 1600, 5, 224, 113, 2, 1599, 1601, 
	5, 230, 116, 2, 1600, 1599, 3, 2, 2, 2, 1600, 1601, 3, 2, 2, 2, 1601, 223, 
	3, 2, 2, 2, 1602, 1605, 7, 135, 2, 2, 1603, 1605, 5, 226, 114, 2, 1604, 
	1602, 3, 2, 2, 2, 1604, 1603, 3, 2, 2, 2, 1605, 225, 3, 2, 2, 2, 1606, 
	1607, 5, 228, 115, 2, 1607, 1608, 7, 130, 2, 2, 1608, 1609, 7, 135, 2, 
	2, 1609, 227, 3, 2, 2, 2, 1610, 1611, 7, 135, 2, 2, 1611, 229, 3, 2, 2, 
	2, 1612, 1613, 7, 86, 2, 2, 1613, 1614, 5, 232, 117, 2, 1614, 1615, 7, 
	87, 2, 2, 1615, 231, 3, 2, 2, 2, 1616, 1618, 8, 117, 1, 2, 1617, 1619, 
	5, 234, 118, 2, 1618, 1617, 3, 2, 2, 2, 1618, 1619, 3, 2, 2, 2, 1619, 1624, 
	3, 2, 2, 2, 1620, 1621, 12, 3, 2, 2, 1621, 1623, 5, 234, 118, 2, 1622, 
	1620, 3, 2, 2, 2, 1623, 1626, 3, 2, 2, 2, 1624, 1622, 3, 2, 2, 2, 1624, 
	1625, 3, 2, 2, 2, 1625, 233, 3, 2, 2, 2, 1626, 1624, 3, 2, 2, 2, 1627, 
	1628, 7, 86, 2, 2, 1628, 1629, 5, 232, 117, 2, 1629, 1630, 7, 87, 2, 2, 
	1630, 1645, 3, 2, 2, 2, 1631, 1632, 7, 88, 2, 2, 1632, 1633, 5, 232, 117, 
	2, 1633, 1634, 7, 89, 2, 2, 1634, 1645, 3, 2, 2, 2, 1635, 1636, 7, 90, 
	2, 2, 1636, 1637, 5, 232, 117, 2, 1637, 1638, 7, 91, 2, 2, 1638, 1645, 
	3, 2, 2, 2, 1639, 1641, 10, 8, 2, 2, 1640, 1639, 3, 2, 2, 2, 1641, 1642, 
	3, 2, 2, 2, 1642, 1640, 3, 2, 2, 2, 1642, 1643, 3, 2, 2, 2, 1643, 1645, 
	3, 2, 2, 2, 1644, 1627, 3, 2, 2, 2, 1644, 1631, 3, 2, 2, 2, 1644, 1635, 
	3, 2, 2, 2, 1644, 1640, 3, 2, 2, 2, 1645, 235, 3, 2, 2, 2, 1646, 1647, 
	8, 119, 1, 2, 1647, 1648, 5, 238, 120, 2, 1648, 1654, 3, 2, 2, 2, 1649, 
	1650, 12, 3, 2, 2, 1650, 1651, 7, 125, 2, 2, 1651, 1653, 5, 238, 120, 2, 
	1652, 1649, 3, 2, 2, 2, 1653, 1656, 3, 2, 2, 2, 1654, 1652, 3, 2, 2, 2, 
	1654, 1655, 3, 2, 2, 2, 1655, 237, 3, 2, 2, 2, 1656, 1654, 3, 2, 2, 2, 
	1657, 1659, 5, 240, 121, 2, 1658, 1660, 5, 282, 142, 2, 1659, 1658, 3, 
	2, 2, 2, 1659, 1660, 3, 2, 2, 2, 1660, 239, 3, 2, 2, 2, 1661, 1667, 5, 
	242, 122, 2, 1662, 1663, 5, 244, 123, 2, 1663, 1664, 5, 246, 124, 2, 1664, 
	1665, 5, 248, 125, 2, 1665, 1667, 3, 2, 2, 2, 1666, 1661, 3, 2, 2, 2, 1666, 
	1662, 3, 2, 2, 2, 1667, 241, 3, 2, 2, 2, 1668, 1673, 5, 244, 123, 2, 1669, 
	1670, 5, 250, 126, 2, 1670, 1671, 5, 242, 122, 2, 1671, 1673, 3, 2, 2, 
	2, 1672, 1668, 3, 2, 2, 2, 1672, 1669, 3, 2, 2, 2, 1673, 243, 3, 2, 2, 
	2, 1674, 1675, 8, 123, 1, 2, 1675, 1677, 5, 258, 130, 2, 1676, 1678, 5, 
	214, 108, 2, 1677, 1676, 3, 2, 2, 2, 1677, 1678, 3, 2, 2, 2, 1678, 1684, 
	3, 2, 2, 2, 1679, 1680, 7, 86, 2, 2, 1680, 1681, 5, 242, 122, 2, 1681, 
	1682, 7, 87, 2, 2, 1682, 1684, 3, 2, 2, 2, 1683, 1674, 3, 2, 2, 2, 1683, 
	1679, 3, 2, 2, 2, 1684, 1698, 3, 2, 2, 2, 1685, 1686, 12, 5, 2, 2, 1686, 
	1697, 5, 246, 124, 2, 1687, 1688, 12, 4, 2, 2, 1688, 1690, 7, 88, 2, 2, 
	1689, 1691, 5, 96, 49, 2, 1690, 1689, 3, 2, 2, 2, 1690, 1691, 3, 2, 2, 
	2, 1691, 1692, 3, 2, 2, 2, 1692, 1694, 7, 89, 2, 2, 1693, 1695, 5, 214, 
	108, 2, 1694, 1693, 3, 2, 2, 2, 1694, 1695, 3, 2, 2, 2, 1695, 1697, 3, 
	2, 2, 2, 1696, 1685, 3, 2, 2, 2, 1696, 1687, 3, 2, 2, 2, 1697, 1700, 3, 
	2, 2, 2, 1698, 1696, 3, 2, 2, 2, 1698, 1699, 3, 2, 2, 2, 1699, 245, 3, 
	2, 2, 2, 1700, 1698, 3, 2, 2, 2, 1701, 1702, 7, 86, 2, 2, 1702, 1703, 5, 
	272, 137, 2, 1703, 1705, 7, 87, 2, 2, 1704, 1706, 5, 252, 127, 2, 1705, 
	1704, 3, 2, 2, 2, 1705, 1706, 3, 2, 2, 2, 1706, 1708, 3, 2, 2, 2, 1707, 
	1709, 5, 256, 129, 2, 1708, 1707, 3, 2, 2, 2, 1708, 1709, 3, 2, 2, 2, 1709, 
	1711, 3, 2, 2, 2, 1710, 1712, 5, 384, 193, 2, 1711, 1710, 3, 2, 2, 2, 1711, 
	1712, 3, 2, 2, 2, 1712, 1714, 3, 2, 2, 2, 1713, 1715, 5, 214, 108, 2, 1714, 
	1713, 3, 2, 2, 2, 1714, 1715, 3, 2, 2, 2, 1715, 247, 3, 2, 2, 2, 1716, 
	1717, 7, 127, 2, 2, 1717, 1719, 5, 156, 79, 2, 1718, 1720, 5, 262, 132, 
	2, 1719, 1718, 3, 2, 2, 2, 1719, 1720, 3, 2, 2, 2, 1720, 249, 3, 2, 2, 
	2, 1721, 1723, 7, 94, 2, 2, 1722, 1724, 5, 214, 108, 2, 1723, 1722, 3, 
	2, 2, 2, 1723, 1724, 3, 2, 2, 2, 1724, 1726, 3, 2, 2, 2, 1725, 1727, 5, 
	252, 127, 2, 1726, 1725, 3, 2, 2, 2, 1726, 1727, 3, 2, 2, 2, 1727, 1745, 
	3, 2, 2, 2, 1728, 1730, 7, 98, 2, 2, 1729, 1731, 5, 214, 108, 2, 1730, 
	1729, 3, 2, 2, 2, 1730, 1731, 3, 2, 2, 2, 1731, 1745, 3, 2, 2, 2, 1732, 
	1734, 7, 5, 2, 2, 1733, 1735, 5, 214, 108, 2, 1734, 1733, 3, 2, 2, 2, 1734, 
	1735, 3, 2, 2, 2, 1735, 1745, 3, 2, 2, 2, 1736, 1737, 5, 12, 7, 2, 1737, 
	1739, 7, 94, 2, 2, 1738, 1740, 5, 214, 108, 2, 1739, 1738, 3, 2, 2, 2, 
	1739, 1740, 3, 2, 2, 2, 1740, 1742, 3, 2, 2, 2, 1741, 1743, 5, 252, 127, 
	2, 1742, 1741, 3, 2, 2, 2, 1742, 1743, 3, 2, 2, 2, 1743, 1745, 3, 2, 2, 
	2, 1744, 1721, 3, 2, 2, 2, 1744, 1728, 3, 2, 2, 2, 1744, 1732, 3, 2, 2, 
	2, 1744, 1736, 3, 2, 2, 2, 1745, 251, 3, 2, 2, 2, 1746, 1748, 5, 254, 128, 
	2, 1747, 1749, 5, 252, 127, 2, 1748, 1747, 3, 2, 2, 2, 1748, 1749, 3, 2, 
	2, 2, 1749, 253, 3, 2, 2, 2, 1750, 1751, 9, 9, 2, 2, 1751, 255, 3, 2, 2, 
	2, 1752, 1753, 9, 10, 2, 2, 1753, 257, 3, 2, 2, 2, 1754, 1756, 7, 134, 
	2, 2, 1755, 1754, 3, 2, 2, 2, 1755, 1756, 3, 2, 2, 2, 1756, 1757, 3, 2, 
	2, 2, 1757, 1758, 5, 6, 4, 2, 1758, 259, 3, 2, 2, 2, 1759, 1761, 5, 154, 
	78, 2, 1760, 1762, 5, 262, 132, 2, 1761, 1760, 3, 2, 2, 2, 1761, 1762, 
	3, 2, 2, 2, 1762, 261, 3, 2, 2, 2, 1763, 1772, 5, 264, 133, 2, 1764, 1766, 
	5, 266, 134, 2, 1765, 1764, 3, 2, 2, 2, 1765, 1766, 3, 2, 2, 2, 1766, 1767, 
	3, 2, 2, 2, 1767, 1768, 5, 246, 124, 2, 1768, 1769, 5, 248, 125, 2, 1769, 
	1772, 3, 2, 2, 2, 1770, 1772, 5, 268, 135, 2, 1771, 1763, 3, 2, 2, 2, 1771, 
	1765, 3, 2, 2, 2, 1771, 1770, 3, 2, 2, 2, 1772, 263, 3, 2, 2, 2, 1773, 
	1779, 5, 266, 134, 2, 1774, 1776, 5, 250, 126, 2, 1775, 1777, 5, 264, 133, 
	2, 1776, 1775, 3, 2, 2, 2, 1776, 1777, 3, 2, 2, 2, 1777, 1779, 3, 2, 2, 
	2, 1778, 1773, 3, 2, 2, 2, 1778, 1774, 3, 2, 2, 2, 1779, 265, 3, 2, 2, 
	2, 1780, 1781, 8, 134, 1, 2, 1781, 1795, 5, 246, 124, 2, 1782, 1784, 7, 
	88, 2, 2, 1783, 1785, 5, 96, 49, 2, 1784, 1783, 3, 2, 2, 2, 1784, 1785, 
	3, 2, 2, 2, 1785, 1786, 3, 2, 2, 2, 1786, 1788, 7, 89, 2, 2, 1787, 1789, 
	5, 214, 108, 2, 1788, 1787, 3, 2, 2, 2, 1788, 1789, 3, 2, 2, 2, 1789, 1795, 
	3, 2, 2, 2, 1790, 1791, 7, 86, 2, 2, 1791, 1792, 5, 264, 133, 2, 1792, 
	1793, 7, 87, 2, 2, 1793, 1795, 3, 2, 2, 2, 1794, 1780, 3, 2, 2, 2, 1794, 
	1782, 3, 2, 2, 2, 1794, 1790, 3, 2, 2, 2, 1795, 1809, 3, 2, 2, 2, 1796, 
	1797, 12, 7, 2, 2, 1797, 1808, 5, 246, 124, 2, 1798, 1799, 12, 5, 2, 2, 
	1799, 1801, 7, 88, 2, 2, 1800, 1802, 5, 96, 49, 2, 1801, 1800, 3, 2, 2, 
	2, 1801, 1802, 3, 2, 2, 2, 1802, 1803, 3, 2, 2, 2, 1803, 1805, 7, 89, 2, 
	2, 1804, 1806, 5, 214, 108, 2, 1805, 1804, 3, 2, 2, 2, 1805, 1806, 3, 2, 
	2, 2, 1806, 1808, 3, 2, 2, 2, 1807, 1796, 3, 2, 2, 2, 1807, 1798, 3, 2, 
	2, 2, 1808, 1811, 3, 2, 2, 2, 1809, 1807, 3, 2, 2, 2, 1809, 1810, 3, 2, 
	2, 2, 1810, 267, 3, 2, 2, 2, 1811, 1809, 3, 2, 2, 2, 1812, 1817, 5, 270, 
	136, 2, 1813, 1814, 5, 250, 126, 2, 1814, 1815, 5, 268, 135, 2, 1815, 1817, 
	3, 2, 2, 2, 1816, 1812, 3, 2, 2, 2, 1816, 1813, 3, 2, 2, 2, 1817, 269, 
	3, 2, 2, 2, 1818, 1819, 8, 136, 1, 2, 1819, 1820, 7, 134, 2, 2, 1820, 1834, 
	3, 2, 2, 2, 1821, 1822, 12, 5, 2, 2, 1822, 1833, 5, 246, 124, 2, 1823, 
	1824, 12, 4, 2, 2, 1824, 1826, 7, 88, 2, 2, 1825, 1827, 5, 96, 49, 2, 1826, 
	1825, 3, 2, 2, 2, 1826, 1827, 3, 2, 2, 2, 1827, 1828, 3, 2, 2, 2, 1828, 
	1830, 7, 89, 2, 2, 1829, 1831, 5, 214, 108, 2, 1830, 1829, 3, 2, 2, 2, 
	1830, 1831, 3, 2, 2, 2, 1831, 1833, 3, 2, 2, 2, 1832, 1821, 3, 2, 2, 2, 
	1832, 1823, 3, 2, 2, 2, 1833, 1836, 3, 2, 2, 2, 1834, 1832, 3, 2, 2, 2, 
	1834, 1835, 3, 2, 2, 2, 1835, 271, 3, 2, 2, 2, 1836, 1834, 3, 2, 2, 2, 
	1837, 1839, 5, 274, 138, 2, 1838, 1837, 3, 2, 2, 2, 1838, 1839, 3, 2, 2, 
	2, 1839, 1841, 3, 2, 2, 2, 1840, 1842, 7, 134, 2, 2, 1841, 1840, 3, 2, 
	2, 2, 1841, 1842, 3, 2, 2, 2, 1842, 1848, 3, 2, 2, 2, 1843, 1844, 5, 274, 
	138, 2, 1844, 1845, 7, 125, 2, 2, 1845, 1846, 7, 134, 2, 2, 1846, 1848, 
	3, 2, 2, 2, 1847, 1838, 3, 2, 2, 2, 1847, 1843, 3, 2, 2, 2, 1848, 273, 
	3, 2, 2, 2, 1849, 1850, 8, 138, 1, 2, 1850, 1851, 5, 276, 139, 2, 1851, 
	1857, 3, 2, 2, 2, 1852, 1853, 12, 3, 2, 2, 1853, 1854, 7, 125, 2, 2, 1854, 
	1856, 5, 276, 139, 2, 1855, 1852, 3, 2, 2, 2, 1856, 1859, 3, 2, 2, 2, 1857, 
	1855, 3, 2, 2, 2, 1857, 1858, 3, 2, 2, 2, 1858, 275, 3, 2, 2, 2, 1859, 
	1857, 3, 2, 2, 2, 1860, 1862, 5, 214, 108, 2, 1861, 1860, 3, 2, 2, 2, 1861, 
	1862, 3, 2, 2, 2, 1862, 1863, 3, 2, 2, 2, 1863, 1864, 5, 142, 72, 2, 1864, 
	1865, 5, 240, 121, 2, 1865, 1892, 3, 2, 2, 2, 1866, 1868, 5, 214, 108, 
	2, 1867, 1866, 3, 2, 2, 2, 1867, 1868, 3, 2, 2, 2, 1868, 1869, 3, 2, 2, 
	2, 1869, 1870, 5, 142, 72, 2, 1870, 1871, 5, 240, 121, 2, 1871, 1872, 7, 
	102, 2, 2, 1872, 1873, 5, 286, 144, 2, 1873, 1892, 3, 2, 2, 2, 1874, 1876, 
	5, 214, 108, 2, 1875, 1874, 3, 2, 2, 2, 1875, 1876, 3, 2, 2, 2, 1876, 1877, 
	3, 2, 2, 2, 1877, 1879, 5, 142, 72, 2, 1878, 1880, 5, 262, 132, 2, 1879, 
	1878, 3, 2, 2, 2, 1879, 1880, 3, 2, 2, 2, 1880, 1892, 3, 2, 2, 2, 1881, 
	1883, 5, 214, 108, 2, 1882, 1881, 3, 2, 2, 2, 1882, 1883, 3, 2, 2, 2, 1883, 
	1884, 3, 2, 2, 2, 1884, 1886, 5, 142, 72, 2, 1885, 1887, 5, 262, 132, 2, 
	1886, 1885, 3, 2, 2, 2, 1886, 1887, 3, 2, 2, 2, 1887, 1888, 3, 2, 2, 2, 
	1888, 1889, 7, 102, 2, 2, 1889, 1890, 5, 286, 144, 2, 1890, 1892, 3, 2, 
	2, 2, 1891, 1861, 3, 2, 2, 2, 1891, 1867, 3, 2, 2, 2, 1891, 1875, 3, 2, 
	2, 2, 1891, 1882, 3, 2, 2, 2, 1892, 277, 3, 2, 2, 2, 1893, 1895, 5, 214, 
	108, 2, 1894, 1893, 3, 2, 2, 2, 1894, 1895, 3, 2, 2, 2, 1895, 1897, 3, 
	2, 2, 2, 1896, 1898, 5, 142, 72, 2, 1897, 1896, 3, 2, 2, 2, 1897, 1898, 
	3, 2, 2, 2, 1898, 1899, 3, 2, 2, 2, 1899, 1901, 5, 240, 121, 2, 1900, 1902, 
	5, 312, 157, 2, 1901, 1900, 3, 2, 2, 2, 1901, 1902, 3, 2, 2, 2, 1902, 1903, 
	3, 2, 2, 2, 1903, 1904, 5, 280, 141, 2, 1904, 279, 3, 2, 2, 2, 1905, 1907, 
	5, 336, 169, 2, 1906, 1905, 3, 2, 2, 2, 1906, 1907, 3, 2, 2, 2, 1907, 1908, 
	3, 2, 2, 2, 1908, 1917, 5, 104, 53, 2, 1909, 1917, 5, 374, 188, 2, 1910, 
	1911, 7, 102, 2, 2, 1911, 1912, 7, 28, 2, 2, 1912, 1917, 7, 131, 2, 2, 
	1913, 1914, 7, 102, 2, 2, 1914, 1915, 7, 29, 2, 2, 1915, 1917, 7, 131, 
	2, 2, 1916, 1906, 3, 2, 2, 2, 1916, 1909, 3, 2, 2, 2, 1916, 1910, 3, 2, 
	2, 2, 1916, 1913, 3, 2, 2, 2, 1917, 281, 3, 2, 2, 2, 1918, 1924, 5, 284, 
	143, 2, 1919, 1920, 7, 86, 2, 2, 1920, 1921, 5, 38, 20, 2, 1921, 1922, 
	7, 87, 2, 2, 1922, 1924, 3, 2, 2, 2, 1923, 1918, 3, 2, 2, 2, 1923, 1919, 
	3, 2, 2, 2, 1924, 283, 3, 2, 2, 2, 1925, 1926, 7, 102, 2, 2, 1926, 1929, 
	5, 286, 144, 2, 1927, 1929, 5, 290, 146, 2, 1928, 1925, 3, 2, 2, 2, 1928, 
	1927, 3, 2, 2, 2, 1929, 285, 3, 2, 2, 2, 1930, 1933, 5, 90, 46, 2, 1931, 
	1933, 5, 290, 146, 2, 1932, 1930, 3, 2, 2, 2, 1932, 1931, 3, 2, 2, 2, 1933, 
	287, 3, 2, 2, 2, 1934, 1935, 8, 145, 1, 2, 1935, 1937, 5, 286, 144, 2, 
	1936, 1938, 7, 134, 2, 2, 1937, 1936, 3, 2, 2, 2, 1937, 1938, 3, 2, 2, 
	2, 1938, 1947, 3, 2, 2, 2, 1939, 1940, 12, 3, 2, 2, 1940, 1941, 7, 125, 
	2, 2, 1941, 1943, 5, 286, 144, 2, 1942, 1944, 7, 134, 2, 2, 1943, 1942, 
	3, 2, 2, 2, 1943, 1944, 3, 2, 2, 2, 1944, 1946, 3, 2, 2, 2, 1945, 1939, 
	3, 2, 2, 2, 1946, 1949, 3, 2, 2, 2, 1947, 1945, 3, 2, 2, 2, 1947, 1948, 
	3, 2, 2, 2, 1948, 289, 3, 2, 2, 2, 1949, 1947, 3, 2, 2, 2, 1950, 1951, 
	7, 90, 2, 2, 1951, 1953, 5, 288, 145, 2, 1952, 1954, 7, 125, 2, 2, 1953, 
	1952, 3, 2, 2, 2, 1953, 1954, 3, 2, 2, 2, 1954, 1955, 3, 2, 2, 2, 1955, 
	1956, 7, 91, 2, 2, 1956, 1960, 3, 2, 2, 2, 1957, 1958, 7, 90, 2, 2, 1958, 
	1960, 7, 91, 2, 2, 1959, 1950, 3, 2, 2, 2, 1959, 1957, 3, 2, 2, 2, 1960, 
	291, 3, 2, 2, 2, 1961, 1964, 7, 135, 2, 2, 1962, 1964, 5, 356, 179, 2, 
	1963, 1961, 3, 2, 2, 2, 1963, 1962, 3, 2, 2, 2, 1964, 293, 3, 2, 2, 2, 
	1965, 1966, 5, 296, 149, 2, 1966, 1968, 7, 90, 2, 2, 1967, 1969, 5, 304, 
	153, 2, 1968, 1967, 3, 2, 2, 2, 1968, 1969, 3, 2, 2, 2, 1969, 1970, 3, 
	2, 2, 2, 1970, 1971, 7, 91, 2, 2, 1971, 295, 3, 2, 2, 2, 1972, 1974, 5, 
	302, 152, 2, 1973, 1975, 5, 214, 108, 2, 1974, 1973, 3, 2, 2, 2, 1974, 
	1975, 3, 2, 2, 2, 1975, 1976, 3, 2, 2, 2, 1976, 1978, 5, 298, 150, 2, 1977, 
	1979, 5, 300, 151, 2, 1978, 1977, 3, 2, 2, 2, 1978, 1979, 3, 2, 2, 2, 1979, 
	1981, 3, 2, 2, 2, 1980, 1982, 5, 318, 160, 2, 1981, 1980, 3, 2, 2, 2, 1981, 
	1982, 3, 2, 2, 2, 1982, 1991, 3, 2, 2, 2, 1983, 1985, 5, 302, 152, 2, 1984, 
	1986, 5, 214, 108, 2, 1985, 1984, 3, 2, 2, 2, 1985, 1986, 3, 2, 2, 2, 1986, 
	1988, 3, 2, 2, 2, 1987, 1989, 5, 318, 160, 2, 1988, 1987, 3, 2, 2, 2, 1988, 
	1989, 3, 2, 2, 2, 1989, 1991, 3, 2, 2, 2, 1990, 1972, 3, 2, 2, 2, 1990, 
	1983, 3, 2, 2, 2, 1991, 297, 3, 2, 2, 2, 1992, 1994, 5, 12, 7, 2, 1993, 
	1992, 3, 2, 2, 2, 1993, 1994, 3, 2, 2, 2, 1994, 1995, 3, 2, 2, 2, 1995, 
	1996, 5, 292, 147, 2, 1996, 299, 3, 2, 2, 2, 1997, 1998, 7, 39, 2, 2, 1998, 
	301, 3, 2, 2, 2, 1999, 2000, 9, 11, 2, 2, 2000, 303, 3, 2, 2, 2, 2001, 
	2003, 5, 306, 154, 2, 2002, 2004, 5, 304, 153, 2, 2003, 2002, 3, 2, 2, 
	2, 2003, 2004, 3, 2, 2, 2, 2004, 2011, 3, 2, 2, 2, 2005, 2006, 5, 328, 
	165, 2, 2006, 2008, 7, 129, 2, 2, 2007, 2009, 5, 304, 153, 2, 2008, 2007, 
	3, 2, 2, 2, 2008, 2009, 3, 2, 2, 2, 2009, 2011, 3, 2, 2, 2, 2010, 2001, 
	3, 2, 2, 2, 2010, 2005, 3, 2, 2, 2, 2011, 305, 3, 2, 2, 2, 2012, 2014, 
	5, 214, 108, 2, 2013, 2012, 3, 2, 2, 2, 2013, 2014, 3, 2, 2, 2, 2014, 2016, 
	3, 2, 2, 2, 2015, 2017, 5, 142, 72, 2, 2016, 2015, 3, 2, 2, 2, 2016, 2017, 
	3, 2, 2, 2, 2017, 2019, 3, 2, 2, 2, 2018, 2020, 5, 308, 155, 2, 2019, 2018, 
	3, 2, 2, 2, 2019, 2020, 3, 2, 2, 2, 2020, 2021, 3, 2, 2, 2, 2021, 2029, 
	7, 131, 2, 2, 2022, 2029, 5, 278, 140, 2, 2023, 2029, 5, 206, 104, 2, 2024, 
	2029, 5, 134, 68, 2, 2025, 2029, 5, 348, 175, 2, 2026, 2029, 5, 130, 66, 
	2, 2027, 2029, 5, 136, 69, 2, 2028, 2013, 3, 2, 2, 2, 2028, 2022, 3, 2, 
	2, 2, 2028, 2023, 3, 2, 2, 2, 2028, 2024, 3, 2, 2, 2, 2028, 2025, 3, 2, 
	2, 2, 2028, 2026, 3, 2, 2, 2, 2028, 2027, 3, 2, 2, 2, 2029, 307, 3, 2, 
	2, 2, 2030, 2031, 8, 155, 1, 2, 2031, 2032, 5, 310, 156, 2, 2032, 2038, 
	3, 2, 2, 2, 2033, 2034, 12, 3, 2, 2, 2034, 2035, 7, 125, 2, 2, 2035, 2037, 
	5, 310, 156, 2, 2036, 2033, 3, 2, 2, 2, 2037, 2040, 3, 2, 2, 2, 2038, 2036, 
	3, 2, 2, 2, 2038, 2039, 3, 2, 2, 2, 2039, 309, 3, 2, 2, 2, 2040, 2038, 
	3, 2, 2, 2, 2041, 2043, 5, 240, 121, 2, 2042, 2044, 5, 312, 157, 2, 2043, 
	2042, 3, 2, 2, 2, 2043, 2044, 3, 2, 2, 2, 2044, 2046, 3, 2, 2, 2, 2045, 
	2047, 5, 316, 159, 2, 2046, 2045, 3, 2, 2, 2, 2046, 2047, 3, 2, 2, 2, 2047, 
	2061, 3, 2, 2, 2, 2048, 2050, 5, 240, 121, 2, 2049, 2051, 5, 284, 143, 
	2, 2050, 2049, 3, 2, 2, 2, 2050, 2051, 3, 2, 2, 2, 2051, 2061, 3, 2, 2, 
	2, 2052, 2054, 7, 135, 2, 2, 2053, 2052, 3, 2, 2, 2, 2053, 2054, 3, 2, 
	2, 2, 2054, 2056, 3, 2, 2, 2, 2055, 2057, 5, 214, 108, 2, 2056, 2055, 3, 
	2, 2, 2, 2056, 2057, 3, 2, 2, 2, 2057, 2058, 3, 2, 2, 2, 2058, 2059, 7, 
	129, 2, 2, 2059, 2061, 5, 96, 49, 2, 2060, 2041, 3, 2, 2, 2, 2060, 2048, 
	3, 2, 2, 2, 2060, 2053, 3, 2, 2, 2, 2061, 311, 3, 2, 2, 2, 2062, 2063, 
	8, 157, 1, 2, 2063, 2064, 5, 314, 158, 2, 2064, 2069, 3, 2, 2, 2, 2065, 
	2066, 12, 3, 2, 2, 2066, 2068, 5, 314, 158, 2, 2067, 2065, 3, 2, 2, 2, 
	2068, 2071, 3, 2, 2, 2, 2069, 2067, 3, 2, 2, 2, 2069, 2070, 3, 2, 2, 2, 
	2070, 313, 3, 2, 2, 2, 2071, 2069, 3, 2, 2, 2, 2072, 2073, 9, 12, 2, 2, 
	2073, 315, 3, 2, 2, 2, 2074, 2075, 7, 102, 2, 2, 2075, 2076, 7, 138, 2, 
	2, 2076, 2077, 8, 159, 1, 2, 2077, 317, 3, 2, 2, 2, 2078, 2079, 7, 129, 
	2, 2, 2079, 2080, 5, 320, 161, 2, 2080, 319, 3, 2, 2, 2, 2081, 2082, 8, 
	161, 1, 2, 2082, 2084, 5, 322, 162, 2, 2083, 2085, 7, 134, 2, 2, 2084, 
	2083, 3, 2, 2, 2, 2084, 2085, 3, 2, 2, 2, 2085, 2094, 3, 2, 2, 2, 2086, 
	2087, 12, 3, 2, 2, 2087, 2088, 7, 125, 2, 2, 2088, 2090, 5, 322, 162, 2, 
	2089, 2091, 7, 134, 2, 2, 2090, 2089, 3, 2, 2, 2, 2090, 2091, 3, 2, 2, 
	2, 2091, 2093, 3, 2, 2, 2, 2092, 2086, 3, 2, 2, 2, 2093, 2096, 3, 2, 2, 
	2, 2094, 2092, 3, 2, 2, 2, 2094, 2095, 3, 2, 2, 2, 2095, 321, 3, 2, 2, 
	2, 2096, 2094, 3, 2, 2, 2, 2097, 2099, 5, 214, 108, 2, 2098, 2097, 3, 2, 
	2, 2, 2098, 2099, 3, 2, 2, 2, 2099, 2100, 3, 2, 2, 2, 2100, 2119, 5, 326, 
	164, 2, 2101, 2103, 5, 214, 108, 2, 2102, 2101, 3, 2, 2, 2, 2102, 2103, 
	3, 2, 2, 2, 2103, 2104, 3, 2, 2, 2, 2104, 2106, 7, 81, 2, 2, 2105, 2107, 
	5, 328, 165, 2, 2106, 2105, 3, 2, 2, 2, 2106, 2107, 3, 2, 2, 2, 2107, 2108, 
	3, 2, 2, 2, 2108, 2119, 5, 326, 164, 2, 2109, 2111, 5, 214, 108, 2, 2110, 
	2109, 3, 2, 2, 2, 2110, 2111, 3, 2, 2, 2, 2111, 2112, 3, 2, 2, 2, 2112, 
	2114, 5, 328, 165, 2, 2113, 2115, 7, 81, 2, 2, 2114, 2113, 3, 2, 2, 2, 
	2114, 2115, 3, 2, 2, 2, 2115, 2116, 3, 2, 2, 2, 2116, 2117, 5, 326, 164, 
	2, 2117, 2119, 3, 2, 2, 2, 2118, 2098, 3, 2, 2, 2, 2118, 2102, 3, 2, 2, 
	2, 2118, 2110, 3, 2, 2, 2, 2119, 323, 3, 2, 2, 2, 2120, 2122, 5, 12, 7, 
	2, 2121, 2120, 3, 2, 2, 2, 2121, 2122, 3, 2, 2, 2, 2122, 2123, 3, 2, 2, 
	2, 2123, 2126, 5, 292, 147, 2, 2124, 2126, 5, 162, 82, 2, 2125, 2121, 3, 
	2, 2, 2, 2125, 2124, 3, 2, 2, 2, 2126, 325, 3, 2, 2, 2, 2127, 2128, 5, 
	324, 163, 2, 2128, 327, 3, 2, 2, 2, 2129, 2130, 9, 13, 2, 2, 2130, 329, 
	3, 2, 2, 2, 2131, 2132, 7, 53, 2, 2, 2132, 2133, 5, 332, 167, 2, 2133, 
	331, 3, 2, 2, 2, 2134, 2136, 5, 154, 78, 2, 2135, 2137, 5, 334, 168, 2, 
	2136, 2135, 3, 2, 2, 2, 2136, 2137, 3, 2, 2, 2, 2137, 333, 3, 2, 2, 2, 
	2138, 2140, 5, 250, 126, 2, 2139, 2141, 5, 334, 168, 2, 2140, 2139, 3, 
	2, 2, 2, 2140, 2141, 3, 2, 2, 2, 2141, 335, 3, 2, 2, 2, 2142, 2143, 7, 
	129, 2, 2, 2143, 2144, 5, 338, 170, 2, 2144, 337, 3, 2, 2, 2, 2145, 2147, 
	5, 340, 171, 2, 2146, 2148, 7, 134, 2, 2, 2147, 2146, 3, 2, 2, 2, 2147, 
	2148, 3, 2, 2, 2, 2148, 2157, 3, 2, 2, 2, 2149, 2151, 5, 340, 171, 2, 2150, 
	2152, 7, 134, 2, 2, 2151, 2150, 3, 2, 2, 2, 2151, 2152, 3, 2, 2, 2, 2152, 
	2153, 3, 2, 2, 2, 2153, 2154, 7, 125, 2, 2, 2154, 2155, 5, 338, 170, 2, 
	2155, 2157, 3, 2, 2, 2, 2156, 2145, 3, 2, 2, 2, 2156, 2149, 3, 2, 2, 2, 
	2157, 339, 3, 2, 2, 2, 2158, 2159, 5, 342, 172, 2, 2159, 2161, 7, 86, 2, 
	2, 2160, 2162, 5, 38, 20, 2, 2161, 2160, 3, 2, 2, 2, 2161, 2162, 3, 2, 
	2, 2, 2162, 2163, 3, 2, 2, 2, 2163, 2164, 7, 87, 2, 2, 2164, 2169, 3, 2, 
	2, 2, 2165, 2166, 5, 342, 172, 2, 2166, 2167, 5, 290, 146, 2, 2167, 2169, 
	3, 2, 2, 2, 2168, 2158, 3, 2, 2, 2, 2168, 2165, 3, 2, 2, 2, 2169, 341, 
	3, 2, 2, 2, 2170, 2173, 5, 324, 163, 2, 2171, 2173, 7, 135, 2, 2, 2172, 
	2170, 3, 2, 2, 2, 2172, 2171, 3, 2, 2, 2, 2173, 343, 3, 2, 2, 2, 2174, 
	2175, 7, 53, 2, 2, 2175, 2176, 5, 392, 197, 2, 2176, 345, 3, 2, 2, 2, 2177, 
	2178, 7, 53, 2, 2, 2178, 2179, 7, 144, 2, 2, 2179, 2183, 7, 135, 2, 2, 
	2180, 2181, 7, 53, 2, 2, 2181, 2183, 7, 147, 2, 2, 2182, 2177, 3, 2, 2, 
	2, 2182, 2180, 3, 2, 2, 2, 2183, 347, 3, 2, 2, 2, 2184, 2185, 7, 69, 2, 
	2, 2185, 2186, 7, 103, 2, 2, 2186, 2187, 5, 350, 176, 2, 2187, 2188, 7, 
	104, 2, 2, 2188, 2189, 5, 126, 64, 2, 2189, 349, 3, 2, 2, 2, 2190, 2191, 
	8, 176, 1, 2, 2191, 2192, 5, 352, 177, 2, 2192, 2198, 3, 2, 2, 2, 2193, 
	2194, 12, 3, 2, 2, 2194, 2195, 7, 125, 2, 2, 2195, 2197, 5, 352, 177, 2, 
	2196, 2193, 3, 2, 2, 2, 2197, 2200, 3, 2, 2, 2, 2198, 2196, 3, 2, 2, 2, 
	2198, 2199, 3, 2, 2, 2, 2199, 351, 3, 2, 2, 2, 2200, 2198, 3, 2, 2, 2, 
	2201, 2204, 5, 354, 178, 2, 2202, 2204, 5, 276, 139, 2, 2203, 2201, 3, 
	2, 2, 2, 2203, 2202, 3, 2, 2, 2, 2204, 353, 3, 2, 2, 2, 2205, 2207, 7, 
	22, 2, 2, 2206, 2208, 7, 134, 2, 2, 2207, 2206, 3, 2, 2, 2, 2207, 2208, 
	3, 2, 2, 2, 2208, 2210, 3, 2, 2, 2, 2209, 2211, 7, 135, 2, 2, 2210, 2209, 
	3, 2, 2, 2, 2210, 2211, 3, 2, 2, 2, 2211, 2254, 3, 2, 2, 2, 2212, 2214, 
	7, 22, 2, 2, 2213, 2215, 7, 135, 2, 2, 2214, 2213, 3, 2, 2, 2, 2214, 2215, 
	3, 2, 2, 2, 2215, 2216, 3, 2, 2, 2, 2216, 2217, 7, 102, 2, 2, 2217, 2254, 
	5, 260, 131, 2, 2218, 2220, 7, 77, 2, 2, 2219, 2221, 7, 134, 2, 2, 2220, 
	2219, 3, 2, 2, 2, 2220, 2221, 3, 2, 2, 2, 2221, 2223, 3, 2, 2, 2, 2222, 
	2224, 7, 135, 2, 2, 2223, 2222, 3, 2, 2, 2, 2223, 2224, 3, 2, 2, 2, 2224, 
	2254, 3, 2, 2, 2, 2225, 2227, 7, 77, 2, 2, 2226, 2228, 7, 135, 2, 2, 2227, 
	2226, 3, 2, 2, 2, 2227, 2228, 3, 2, 2, 2, 2228, 2229, 3, 2, 2, 2, 2229, 
	2230, 7, 102, 2, 2, 2230, 2254, 5, 260, 131, 2, 2231, 2232, 7, 69, 2, 2, 
	2232, 2233, 7, 103, 2, 2, 2233, 2234, 5, 350, 176, 2, 2234, 2235, 7, 104, 
	2, 2, 2235, 2237, 7, 22, 2, 2, 2236, 2238, 7, 134, 2, 2, 2237, 2236, 3, 
	2, 2, 2, 2237, 2238, 3, 2, 2, 2, 2238, 2240, 3, 2, 2, 2, 2239, 2241, 7, 
	135, 2, 2, 2240, 2239, 3, 2, 2, 2, 2240, 2241, 3, 2, 2, 2, 2241, 2254, 
	3, 2, 2, 2, 2242, 2243, 7, 69, 2, 2, 2243, 2244, 7, 103, 2, 2, 2244, 2245, 
	5, 350, 176, 2, 2245, 2246, 7, 104, 2, 2, 2246, 2248, 7, 22, 2, 2, 2247, 
	2249, 7, 135, 2, 2, 2248, 2247, 3, 2, 2, 2, 2248, 2249, 3, 2, 2, 2, 2249, 
	2250, 3, 2, 2, 2, 2250, 2251, 7, 102, 2, 2, 2251, 2252, 5, 6, 4, 2, 2252, 
	2254, 3, 2, 2, 2, 2253, 2205, 3, 2, 2, 2, 2253, 2212, 3, 2, 2, 2, 2253, 
	2218, 3, 2, 2, 2, 2253, 2225, 3, 2, 2, 2, 2253, 2231, 3, 2, 2, 2, 2253, 
	2242, 3, 2, 2, 2, 2254, 355, 3, 2, 2, 2, 2255, 2256, 5, 360, 181, 2, 2256, 
	2258, 7, 103, 2, 2, 2257, 2259, 5, 362, 182, 2, 2258, 2257, 3, 2, 2, 2, 
	2258, 2259, 3, 2, 2, 2, 2259, 2260, 3, 2, 2, 2, 2260, 2261, 7, 104, 2, 
	2, 2261, 357, 3, 2, 2, 2, 2262, 2278, 5, 356, 179, 2, 2263, 2264, 5, 344, 
	173, 2, 2264, 2266, 7, 103, 2, 2, 2265, 2267, 5, 362, 182, 2, 2266, 2265, 
	3, 2, 2, 2, 2266, 2267, 3, 2, 2, 2, 2267, 2268, 3, 2, 2, 2, 2268, 2269, 
	7, 104, 2, 2, 2269, 2278, 3, 2, 2, 2, 2270, 2271, 5, 346, 174, 2, 2271, 
	2273, 7, 103, 2, 2, 2272, 2274, 5, 362, 182, 2, 2273, 2272, 3, 2, 2, 2, 
	2273, 2274, 3, 2, 2, 2, 2274, 2275, 3, 2, 2, 2, 2275, 2276, 7, 104, 2, 
	2, 2276, 2278, 3, 2, 2, 2, 2277, 2262, 3, 2, 2, 2, 2277, 2263, 3, 2, 2, 
	2, 2277, 2270, 3, 2, 2, 2, 2278, 359, 3, 2, 2, 2, 2279, 2280, 7, 135, 2, 
	2, 2280, 361, 3, 2, 2, 2, 2281, 2282, 8, 182, 1, 2, 2282, 2284, 5, 364, 
	183, 2, 2283, 2285, 7, 134, 2, 2, 2284, 2283, 3, 2, 2, 2, 2284, 2285, 3, 
	2, 2, 2, 2285, 2294, 3, 2, 2, 2, 2286, 2287, 12, 3, 2, 2, 2287, 2288, 7, 
	125, 2, 2, 2288, 2290, 5, 364, 183, 2, 2289, 2291, 7, 134, 2, 2, 2290, 
	2289, 3, 2, 2, 2, 2290, 2291, 3, 2, 2, 2, 2291, 2293, 3, 2, 2, 2, 2292, 
	2286, 3, 2, 2, 2, 2293, 2296, 3, 2, 2, 2, 2294, 2292, 3, 2, 2, 2, 2294, 
	2295, 3, 2, 2, 2, 2295, 363, 3, 2, 2, 2, 2296, 2294, 3, 2, 2, 2, 2297, 
	2301, 5, 260, 131, 2, 2298, 2301, 5, 96, 49, 2, 2299, 2301, 5, 6, 4, 2, 
	2300, 2297, 3, 2, 2, 2, 2300, 2298, 3, 2, 2, 2, 2300, 2299, 3, 2, 2, 2, 
	2301, 365, 3, 2, 2, 2, 2302, 2303, 7, 77, 2, 2, 2303, 2304, 5, 12, 7, 2, 
	2304, 2305, 7, 135, 2, 2, 2305, 2314, 3, 2, 2, 2, 2306, 2307, 7, 77, 2, 
	2, 2307, 2309, 5, 12, 7, 2, 2308, 2310, 7, 69, 2, 2, 2309, 2308, 3, 2, 
	2, 2, 2309, 2310, 3, 2, 2, 2, 2310, 2311, 3, 2, 2, 2, 2311, 2312, 5, 356, 
	179, 2, 2312, 2314, 3, 2, 2, 2, 2313, 2302, 3, 2, 2, 2, 2313, 2306, 3, 
	2, 2, 2, 2314, 367, 3, 2, 2, 2, 2315, 2317, 7, 37, 2, 2, 2316, 2315, 3, 
	2, 2, 2, 2316, 2317, 3, 2, 2, 2, 2317, 2318, 3, 2, 2, 2, 2318, 2319, 7, 
	69, 2, 2, 2319, 2320, 5, 126, 64, 2, 2320, 369, 3, 2, 2, 2, 2321, 2322, 
	7, 69, 2, 2, 2322, 2323, 7, 103, 2, 2, 2323, 2324, 7, 104, 2, 2, 2324, 
	2325, 5, 126, 64, 2, 2325, 371, 3, 2, 2, 2, 2326, 2327, 7, 74, 2, 2, 2327, 
	2328, 5, 104, 53, 2, 2328, 2329, 5, 376, 189, 2, 2329, 373, 3, 2, 2, 2, 
	2330, 2332, 7, 74, 2, 2, 2331, 2333, 5, 336, 169, 2, 2332, 2331, 3, 2, 
	2, 2, 2332, 2333, 3, 2, 2, 2, 2333, 2334, 3, 2, 2, 2, 2334, 2335, 5, 104, 
	53, 2, 2335, 2336, 5, 376, 189, 2, 2336, 375, 3, 2, 2, 2, 2337, 2339, 5, 
	378, 190, 2, 2338, 2340, 5, 376, 189, 2, 2339, 2338, 3, 2, 2, 2, 2339, 
	2340, 3, 2, 2, 2, 2340, 377, 3, 2, 2, 2, 2341, 2342, 7, 18, 2, 2, 2342, 
	2343, 7, 86, 2, 2, 2343, 2344, 5, 380, 191, 2, 2344, 2345, 7, 87, 2, 2, 
	2345, 2346, 5, 104, 53, 2, 2346, 379, 3, 2, 2, 2, 2347, 2349, 5, 214, 108, 
	2, 2348, 2347, 3, 2, 2, 2, 2348, 2349, 3, 2, 2, 2, 2349, 2350, 3, 2, 2, 
	2, 2350, 2351, 5, 154, 78, 2, 2351, 2352, 5, 240, 121, 2, 2352, 2362, 3, 
	2, 2, 2, 2353, 2355, 5, 214, 108, 2, 2354, 2353, 3, 2, 2, 2, 2354, 2355, 
	3, 2, 2, 2, 2355, 2356, 3, 2, 2, 2, 2356, 2358, 5, 154, 78, 2, 2357, 2359, 
	5, 262, 132, 2, 2358, 2357, 3, 2, 2, 2, 2358, 2359, 3, 2, 2, 2, 2359, 2362, 
	3, 2, 2, 2, 2360, 2362, 7, 134, 2, 2, 2361, 2348, 3, 2, 2, 2, 2361, 2354, 
	3, 2, 2, 2, 2361, 2360, 3, 2, 2, 2, 2362, 381, 3, 2, 2, 2, 2363, 2365, 
	7, 72, 2, 2, 2364, 2366, 5, 90, 46, 2, 2365, 2364, 3, 2, 2, 2, 2365, 2366, 
	3, 2, 2, 2, 2366, 383, 3, 2, 2, 2, 2367, 2370, 5, 386, 194, 2, 2368, 2370, 
	5, 390, 196, 2, 2369, 2367, 3, 2, 2, 2, 2369, 2368, 3, 2, 2, 2, 2370, 385, 
	3, 2, 2, 2, 2371, 2372, 7, 72, 2, 2, 2372, 2374, 7, 86, 2, 2, 2373, 2375, 
	5, 388, 195, 2, 2374, 2373, 3, 2, 2, 2, 2374, 2375, 3, 2, 2, 2, 2375, 2376, 
	3, 2, 2, 2, 2376, 2377, 7, 87, 2, 2, 2377, 387, 3, 2, 2, 2, 2378, 2379, 
	8, 195, 1, 2, 2379, 2381, 5, 260, 131, 2, 2380, 2382, 7, 134, 2, 2, 2381, 
	2380, 3, 2, 2, 2, 2381, 2382, 3, 2, 2, 2, 2382, 2391, 3, 2, 2, 2, 2383, 
	2384, 12, 3, 2, 2, 2384, 2385, 7, 125, 2, 2, 2385, 2387, 5, 260, 131, 2, 
	2386, 2388, 7, 134, 2, 2, 2387, 2386, 3, 2, 2, 2, 2387, 2388, 3, 2, 2, 
	2, 2388, 2390, 3, 2, 2, 2, 2389, 2383, 3, 2, 2, 2, 2390, 2393, 3, 2, 2, 
	2, 2391, 2389, 3, 2, 2, 2, 2391, 2392, 3, 2, 2, 2, 2392, 389, 3, 2, 2, 
	2, 2393, 2391, 3, 2, 2, 2, 2394, 2395, 7, 51, 2, 2, 2395, 2396, 7, 86, 
	2, 2, 2396, 2397, 5, 96, 49, 2, 2397, 2398, 7, 87, 2, 2, 2398, 2401, 3, 
	2, 2, 2, 2399, 2401, 7, 51, 2, 2, 2400, 2394, 3, 2, 2, 2, 2400, 2399, 3, 
	2, 2, 2, 2401, 391, 3, 2, 2, 2, 2402, 2454, 7, 50, 2, 2, 2403, 2454, 7, 
	29, 2, 2, 2404, 2405, 7, 50, 2, 2, 2405, 2406, 7, 88, 2, 2, 2406, 2454, 
	7, 89, 2, 2, 2407, 2408, 7, 29, 2, 2, 2408, 2409, 7, 88, 2, 2, 2409, 2454, 
	7, 89, 2, 2, 2410, 2454, 7, 92, 2, 2, 2411, 2454, 7, 93, 2, 2, 2412, 2454, 
	7, 94, 2, 2, 2413, 2454, 7, 95, 2, 2, 2414, 2454, 7, 96, 2, 2, 2415, 2454, 
	7, 97, 2, 2, 2416, 2454, 7, 98, 2, 2, 2417, 2454, 7, 99, 2, 2, 2418, 2454, 
	7, 100, 2, 2, 2419, 2454, 7, 3, 2, 2, 2420, 2454, 7, 4, 2, 2, 2421, 2454, 
	7, 102, 2, 2, 2422, 2454, 7, 103, 2, 2, 2423, 2454, 7, 104, 2, 2, 2424, 
	2454, 7, 105, 2, 2, 2425, 2454, 7, 106, 2, 2, 2426, 2454, 7, 107, 2, 2, 
	2427, 2454, 7, 108, 2, 2, 2428, 2454, 7, 109, 2, 2, 2429, 2454, 7, 110, 
	2, 2, 2430, 2454, 7, 111, 2, 2, 2431, 2454, 7, 112, 2, 2, 2432, 2454, 7, 
	113, 2, 2, 2433, 2454, 7, 114, 2, 2, 2434, 2454, 7, 116, 2, 2, 2435, 2454, 
	7, 115, 2, 2, 2436, 2454, 7, 117, 2, 2, 2437, 2454, 7, 118, 2, 2, 2438, 
	2454, 7, 119, 2, 2, 2439, 2454, 7, 120, 2, 2, 2440, 2454, 7, 5, 2, 2, 2441, 
	2454, 7, 6, 2, 2, 2442, 2454, 7, 7, 2, 2, 2443, 2454, 7, 8, 2, 2, 2444, 
	2454, 7, 123, 2, 2, 2445, 2454, 7, 124, 2, 2, 2446, 2454, 7, 125, 2, 2, 
	2447, 2454, 7, 126, 2, 2, 2448, 2454, 7, 127, 2, 2, 2449, 2450, 7, 86, 
	2, 2, 2450, 2454, 7, 87, 2, 2, 2451, 2452, 7, 88, 2, 2, 2452, 2454, 7, 
	89, 2, 2, 2453, 2402, 3, 2, 2, 2, 2453, 2403, 3, 2, 2, 2, 2453, 2404, 3, 
	2, 2, 2, 2453, 2407, 3, 2, 2, 2, 2453, 2410, 3, 2, 2, 2, 2453, 2411, 3, 
	2, 2, 2, 2453, 2412, 3, 2, 2, 2, 2453, 2413, 3, 2, 2, 2, 2453, 2414, 3, 
	2, 2, 2, 2453, 2415, 3, 2, 2, 2, 2453, 2416, 3, 2, 2, 2, 2453, 2417, 3, 
	2, 2, 2, 2453, 2418, 3, 2, 2, 2, 2453, 2419, 3, 2, 2, 2, 2453, 2420, 3, 
	2, 2, 2, 2453, 2421, 3, 2, 2, 2, 2453, 2422, 3, 2, 2, 2, 2453, 2423, 3, 
	2, 2, 2, 2453, 2424, 3, 2, 2, 2, 2453, 2425, 3, 2, 2, 2, 2453, 2426, 3, 
	2, 2, 2, 2453, 2427, 3, 2, 2, 2, 2453, 2428, 3, 2, 2, 2, 2453, 2429, 3, 
	2, 2, 2, 2453, 2430, 3, 2, 2, 2, 2453, 2431, 3, 2, 2, 2, 2453, 2432, 3, 
	2, 2, 2, 2453, 2433, 3, 2, 2, 2, 2453, 2434, 3, 2, 2, 2, 2453, 2435, 3, 
	2, 2, 2, 2453, 2436, 3, 2, 2, 2, 2453, 2437, 3, 2, 2, 2, 2453, 2438, 3, 
	2, 2, 2, 2453, 2439, 3, 2, 2, 2, 2453, 2440, 3, 2, 2, 2, 2453, 2441, 3, 
	2, 2, 2, 2453, 2442, 3, 2, 2, 2, 2453, 2443, 3, 2, 2, 2, 2453, 2444, 3, 
	2, 2, 2, 2453, 2445, 3, 2, 2, 2, 2453, 2446, 3, 2, 2, 2, 2453, 2447, 3, 
	2, 2, 2, 2453, 2448, 3, 2, 2, 2, 2453, 2449, 3, 2, 2, 2, 2453, 2451, 3, 
	2, 2, 2, 2454, 393, 3, 2, 2, 2, 2455, 2463, 7, 136, 2, 2, 2456, 2463, 7, 
	142, 2, 2, 2457, 2463, 7, 143, 2, 2, 2458, 2463, 7, 144, 2, 2, 2459, 2463, 
	5, 396, 199, 2, 2460, 2463, 5, 398, 200, 2, 2461, 2463, 5, 400, 201, 2, 
	2462, 2455, 3, 2, 2, 2, 2462, 2456, 3, 2, 2, 2, 2462, 2457, 3, 2, 2, 2, 
	2462, 2458, 3, 2, 2, 2, 2462, 2459, 3, 2, 2, 2, 2462, 2460, 3, 2, 2, 2, 
	2462, 2461, 3, 2, 2, 2, 2463, 395, 3, 2, 2, 2, 2464, 2465, 9, 14, 2, 2, 
	2465, 397, 3, 2, 2, 2, 2466, 2467, 7, 52, 2, 2, 2467, 399, 3, 2, 2, 2, 
	2468, 2469, 9, 15, 2, 2, 2469, 401, 3, 2, 2, 2, 318, 403, 415, 419, 430, 
	434, 449, 456, 461, 463, 468, 474, 484, 491, 497, 501, 506, 512, 519, 525, 
	528, 531, 534, 541, 548, 600, 615, 621, 627, 640, 642, 652, 667, 673, 703, 
	708, 712, 716, 719, 723, 729, 731, 739, 743, 746, 753, 760, 764, 769, 773, 
	776, 781, 787, 800, 811, 813, 828, 830, 842, 844, 856, 876, 878, 890, 892, 
	903, 914, 925, 937, 939, 951, 953, 963, 971, 983, 990, 994, 998, 1002, 
	1006, 1011, 1014, 1017, 1023, 1031, 1036, 1039, 1045, 1056, 1079, 1083, 
	1091, 1097, 1117, 1121, 1134, 1138, 1141, 1148, 1156, 1166, 1177, 1189, 
	1199, 1204, 1211, 1214, 1219, 1224, 1245, 1249, 1254, 1265, 1271, 1275, 
	1280, 1284, 1289, 1292, 1314, 1320, 1331, 1335, 1338, 1348, 1354, 1357, 
	1364, 1374, 1378, 1381, 1384, 1388, 1393, 1395, 1399, 1403, 1412, 1425, 
	1433, 1439, 1445, 1449, 1452, 1461, 1470, 1478, 1489, 1495, 1506, 1509, 
	1514, 1529, 1535, 1544, 1554, 1560, 1568, 1572, 1576, 1581, 1586, 1593, 
	1595, 1600, 1604, 1618, 1624, 1642, 1644, 1654, 1659, 1666, 1672, 1677, 
	1683, 1690, 1694, 1696, 1698, 1705, 1708, 1711, 1714, 1719, 1723, 1726, 
	1730, 1734, 1739, 1742, 1744, 1748, 1755, 1761, 1765, 1771, 1776, 1778, 
	1784, 1788, 1794, 1801, 1805, 1807, 1809, 1816, 1826, 1830, 1832, 1834, 
	1838, 1841, 1847, 1857, 1861, 1867, 1875, 1879, 1882, 1886, 1891, 1894, 
	1897, 1901, 1906, 1916, 1923, 1928, 1932, 1937, 1943, 1947, 1953, 1959, 
	1963, 1968, 1974, 1978, 1981, 1985, 1988, 1990, 1993, 2003, 2008, 2010, 
	2013, 2016, 2019, 2028, 2038, 2043, 2046, 2050, 2053, 2056, 2060, 2069, 
	2084, 2090, 2094, 2098, 2102, 2106, 2110, 2114, 2118, 2121, 2125, 2136, 
	2140, 2147, 2151, 2156, 2161, 2168, 2172, 2182, 2198, 2203, 2207, 2210, 
	2214, 2220, 2223, 2227, 2237, 2240, 2248, 2253, 2258, 2266, 2273, 2277, 
	2284, 2290, 2294, 2300, 2309, 2313, 2316, 2332, 2339, 2348, 2354, 2358, 
	2361, 2365, 2369, 2374, 2381, 2387, 2391, 2400, 2453, 2462,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'!'", "'not'", "'&&'", "'and'", "'||'", "'or'", "", "", "'alignas'", 
	"'alignof'", "'asm'", "'auto'", "'bool'", "'break'", "'case'", "'catch'", 
	"'char'", "'char16_t'", "'char32_t'", "'class'", "'const'", "'constexpr'", 
	"'const_cast'", "'continue'", "'decltype'", "'default'", "'delete'", "'do'", 
	"'double'", "'dynamic_cast'", "'else'", "'enum'", "'explicit'", "'export'", 
	"'extern'", "'false'", "'final'", "'float'", "'for'", "'friend'", "'goto'", 
	"'if'", "'inline'", "'int'", "'long'", "'mutable'", "'namespace'", "'new'", 
	"'noexcept'", "'nullptr'", "'operator'", "'override'", "'private'", "'protected'", 
	"'public'", "'register'", "'reinterpret_cast'", "'return'", "'short'", 
	"'signed'", "'sizeof'", "'static'", "'static_assert'", "'static_cast'", 
	"'struct'", "'switch'", "'template'", "'this'", "'thread_local'", "'throw'", 
	"'true'", "'try'", "'typedef'", "'typeid'", "'typename'", "'union'", "'unsigned'", 
	"'using'", "'virtual'", "'void'", "'volatile'", "'wchar_t'", "'while'", 
	"'('", "')'", "'['", "']'", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", 
	"'^'", "'&'", "'|'", "'~'", "", "'='", "'<'", "'>'", "'+='", "'-='", "'*='", 
	"'/='", "'%='", "'^='", "'&='", "'|='", "'<<'", "'>>'", "'<<='", "'>>='", 
	"'=='", "'!='", "'<='", "'>='", "", "", "'++'", "'--'", "','", "'->*'", 
	"'->'", "'?'", "':'", "'::'", "';'", "'.'", "'.*'", "'...'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "MultiLineMacro", "Directive", "Alignas", "Alignof", 
	"Asm", "Auto", "Bool", "Break", "Case", "Catch", "Char", "Char16", "Char32", 
	"Class", "Const", "Constexpr", "Const_cast", "Continue", "Decltype", "Default", 
	"Delete", "Do", "Double", "Dynamic_cast", "Else", "Enum", "Explicit", "Export", 
	"Extern", "False", "Final", "Float", "For", "Friend", "Goto", "If", "Inline", 
	"Int", "Long", "Mutable", "Namespace", "New", "Noexcept", "Nullptr", "Operator", 
	"Override", "Private", "Protected", "Public", "Register", "Reinterpret_cast", 
	"Return", "Short", "Signed", "Sizeof", "Static", "Static_assert", "Static_cast", 
	"Struct", "Switch", "Template", "This", "Thread_local", "Throw", "True", 
	"Try", "Typedef", "Typeid_", "Typename_", "Union", "Unsigned", "Using", 
	"Virtual", "Void", "Volatile", "Wchar", "While", "LeftParen", "RightParen", 
	"LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Plus", "Minus", 
	"Star", "Div", "Mod", "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less", 
	"Greater", "PlusAssign", "MinusAssign", "StarAssign", "DivAssign", "ModAssign", 
	"XorAssign", "AndAssign", "OrAssign", "LeftShift", "RightShift", "LeftShiftAssign", 
	"RightShiftAssign", "Equal", "NotEqual", "LessEqual", "GreaterEqual", "AndAnd", 
	"OrOr", "PlusPlus", "MinusMinus", "Comma", "ArrowStar", "Arrow", "Question", 
	"Colon", "Doublecolon", "Semi", "Dot", "DotStar", "Ellipsis", "Identifier", 
	"Integerliteral", "Decimalliteral", "Octalliteral", "Hexadecimalliteral", 
	"Binaryliteral", "Integersuffix", "Characterliteral", "Floatingliteral", 
	"Stringliteral", "Userdefinedintegerliteral", "Userdefinedfloatingliteral", 
	"Userdefinedstringliteral", "Userdefinedcharacterliteral", "Whitespace", 
	"Newline", "BlockComment", "LineComment",
}

var ruleNames = []string{
	"translationunit", "primaryexpression", "idexpression", "unqualifiedid", 
	"qualifiedid", "nestednamespecifier", "lambdaexpression", "lambdaintroducer", 
	"lambdacapture", "capturedefault", "capturelist", "capture", "simplecapture", 
	"initcapture", "lambdadeclarator", "postfixexpression", "typeidofexpr", 
	"typeidofthetypeid", "expressionlist", "pseudodestructorname", "unaryexpression", 
	"unaryoperator", "newexpression", "newplacement", "newtypeid", "newdeclarator", 
	"noptrnewdeclarator", "newinitializer", "deleteexpression", "noexceptexpression", 
	"castexpression", "pmexpression", "multiplicativeexpression", "additiveexpression", 
	"shiftexpression", "shiftoperator", "relationalexpression", "equalityexpression", 
	"andexpression", "exclusiveorexpression", "inclusiveorexpression", "logicalandexpression", 
	"logicalorexpression", "conditionalexpression", "assignmentexpression", 
	"assignmentoperator", "expression", "constantexpression", "statement", 
	"labeledstatement", "expressionstatement", "compoundstatement", "statementseq", 
	"selectionstatement", "condition", "iterationstatement", "forinitstatement", 
	"forrangedeclaration", "forrangeinitializer", "jumpstatement", "declarationstatement", 
	"declarationseq", "declaration", "blockdeclaration", "aliasdeclaration", 
	"simpledeclaration", "static_assertdeclaration", "emptydeclaration", "attributedeclaration", 
	"declspecifier", "declspecifierseq", "storageclassspecifier", "functionspecifier", 
	"typedefname", "typespecifier", "trailingtypespecifier", "typespecifierseq", 
	"trailingtypespecifierseq", "simpletypespecifier", "thetypename", "decltypespecifier", 
	"elaboratedtypespecifier", "enumname", "enumspecifier", "enumhead", "opaqueenumdeclaration", 
	"enumkey", "enumbase", "enumeratorlist", "enumeratordefinition", "enumerator", 
	"namespacename", "originalnamespacename", "namespacedefinition", "namednamespacedefinition", 
	"originalnamespacedefinition", "extensionnamespacedefinition", "unnamednamespacedefinition", 
	"namespacebody", "namespacealias", "namespacealiasdefinition", "qualifiednamespacespecifier", 
	"usingdeclaration", "usingdirective", "asmdefinition", "linkagespecification", 
	"attributespecifierseq", "attributespecifier", "alignmentspecifier", "attributelist", 
	"attribute", "attributetoken", "attributescopedtoken", "attributenamespace", 
	"attributeargumentclause", "balancedtokenseq", "balancedtoken", "initdeclaratorlist", 
	"initdeclarator", "declarator", "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers", 
	"trailingreturntype", "ptroperator", "cvqualifierseq", "cvqualifier", "refqualifier", 
	"declaratorid", "thetypeid", "abstractdeclarator", "ptrabstractdeclarator", 
	"noptrabstractdeclarator", "abstractpackdeclarator", "noptrabstractpackdeclarator", 
	"parameterdeclarationclause", "parameterdeclarationlist", "parameterdeclaration", 
	"functiondefinition", "functionbody", "initializer", "braceorequalinitializer", 
	"initializerclause", "initializerlist", "bracedinitlist", "classname", 
	"classspecifier", "classhead", "classheadname", "classvirtspecifier", "classkey", 
	"memberspecification", "memberdeclaration", "memberdeclaratorlist", "memberdeclarator", 
	"virtspecifierseq", "virtspecifier", "purespecifier", "baseclause", "basespecifierlist", 
	"basespecifier", "classordecltype", "basetypespecifier", "accessspecifier", 
	"conversionfunctionid", "conversiontypeid", "conversiondeclarator", "ctorinitializer", 
	"meminitializerlist", "meminitializer", "meminitializerid", "operatorfunctionid", 
	"literaloperatorid", "templatedeclaration", "templateparameterlist", "templateparameter", 
	"typeparameter", "simpletemplateid", "templateid", "templatename", "templateargumentlist", 
	"templateargument", "typenamespecifier", "explicitinstantiation", "explicitspecialization", 
	"tryblock", "functiontryblock", "handlerseq", "handler", "exceptiondeclaration", 
	"throwexpression", "exceptionspecification", "dynamicexceptionspecification", 
	"typeidlist", "noexceptspecification", "theoperator", "literal", "booleanliteral", 
	"pointerliteral", "userdefinedliteral",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type CPP14Parser struct {
	*antlr.BaseParser
}

func NewCPP14Parser(input antlr.TokenStream) *CPP14Parser {
	this := new(CPP14Parser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "CPP14.g4"

	return this
}

// CPP14Parser tokens.
const (
	CPP14ParserEOF = antlr.TokenEOF
	CPP14ParserT__0 = 1
	CPP14ParserT__1 = 2
	CPP14ParserT__2 = 3
	CPP14ParserT__3 = 4
	CPP14ParserT__4 = 5
	CPP14ParserT__5 = 6
	CPP14ParserMultiLineMacro = 7
	CPP14ParserDirective = 8
	CPP14ParserAlignas = 9
	CPP14ParserAlignof = 10
	CPP14ParserAsm = 11
	CPP14ParserAuto = 12
	CPP14ParserBool = 13
	CPP14ParserBreak = 14
	CPP14ParserCase = 15
	CPP14ParserCatch = 16
	CPP14ParserChar = 17
	CPP14ParserChar16 = 18
	CPP14ParserChar32 = 19
	CPP14ParserClass = 20
	CPP14ParserConst = 21
	CPP14ParserConstexpr = 22
	CPP14ParserConst_cast = 23
	CPP14ParserContinue = 24
	CPP14ParserDecltype = 25
	CPP14ParserDefault = 26
	CPP14ParserDelete = 27
	CPP14ParserDo = 28
	CPP14ParserDouble = 29
	CPP14ParserDynamic_cast = 30
	CPP14ParserElse = 31
	CPP14ParserEnum = 32
	CPP14ParserExplicit = 33
	CPP14ParserExport = 34
	CPP14ParserExtern = 35
	CPP14ParserFalse = 36
	CPP14ParserFinal = 37
	CPP14ParserFloat = 38
	CPP14ParserFor = 39
	CPP14ParserFriend = 40
	CPP14ParserGoto = 41
	CPP14ParserIf = 42
	CPP14ParserInline = 43
	CPP14ParserInt = 44
	CPP14ParserLong = 45
	CPP14ParserMutable = 46
	CPP14ParserNamespace = 47
	CPP14ParserNew = 48
	CPP14ParserNoexcept = 49
	CPP14ParserNullptr = 50
	CPP14ParserOperator = 51
	CPP14ParserOverride = 52
	CPP14ParserPrivate = 53
	CPP14ParserProtected = 54
	CPP14ParserPublic = 55
	CPP14ParserRegister = 56
	CPP14ParserReinterpret_cast = 57
	CPP14ParserReturn = 58
	CPP14ParserShort = 59
	CPP14ParserSigned = 60
	CPP14ParserSizeof = 61
	CPP14ParserStatic = 62
	CPP14ParserStatic_assert = 63
	CPP14ParserStatic_cast = 64
	CPP14ParserStruct = 65
	CPP14ParserSwitch = 66
	CPP14ParserTemplate = 67
	CPP14ParserThis = 68
	CPP14ParserThread_local = 69
	CPP14ParserThrow = 70
	CPP14ParserTrue = 71
	CPP14ParserTry = 72
	CPP14ParserTypedef = 73
	CPP14ParserTypeid_ = 74
	CPP14ParserTypename_ = 75
	CPP14ParserUnion = 76
	CPP14ParserUnsigned = 77
	CPP14ParserUsing = 78
	CPP14ParserVirtual = 79
	CPP14ParserVoid = 80
	CPP14ParserVolatile = 81
	CPP14ParserWchar = 82
	CPP14ParserWhile = 83
	CPP14ParserLeftParen = 84
	CPP14ParserRightParen = 85
	CPP14ParserLeftBracket = 86
	CPP14ParserRightBracket = 87
	CPP14ParserLeftBrace = 88
	CPP14ParserRightBrace = 89
	CPP14ParserPlus = 90
	CPP14ParserMinus = 91
	CPP14ParserStar = 92
	CPP14ParserDiv = 93
	CPP14ParserMod = 94
	CPP14ParserCaret = 95
	CPP14ParserAnd = 96
	CPP14ParserOr = 97
	CPP14ParserTilde = 98
	CPP14ParserNot = 99
	CPP14ParserAssign = 100
	CPP14ParserLess = 101
	CPP14ParserGreater = 102
	CPP14ParserPlusAssign = 103
	CPP14ParserMinusAssign = 104
	CPP14ParserStarAssign = 105
	CPP14ParserDivAssign = 106
	CPP14ParserModAssign = 107
	CPP14ParserXorAssign = 108
	CPP14ParserAndAssign = 109
	CPP14ParserOrAssign = 110
	CPP14ParserLeftShift = 111
	CPP14ParserRightShift = 112
	CPP14ParserLeftShiftAssign = 113
	CPP14ParserRightShiftAssign = 114
	CPP14ParserEqual = 115
	CPP14ParserNotEqual = 116
	CPP14ParserLessEqual = 117
	CPP14ParserGreaterEqual = 118
	CPP14ParserAndAnd = 119
	CPP14ParserOrOr = 120
	CPP14ParserPlusPlus = 121
	CPP14ParserMinusMinus = 122
	CPP14ParserComma = 123
	CPP14ParserArrowStar = 124
	CPP14ParserArrow = 125
	CPP14ParserQuestion = 126
	CPP14ParserColon = 127
	CPP14ParserDoublecolon = 128
	CPP14ParserSemi = 129
	CPP14ParserDot = 130
	CPP14ParserDotStar = 131
	CPP14ParserEllipsis = 132
	CPP14ParserIdentifier = 133
	CPP14ParserIntegerliteral = 134
	CPP14ParserDecimalliteral = 135
	CPP14ParserOctalliteral = 136
	CPP14ParserHexadecimalliteral = 137
	CPP14ParserBinaryliteral = 138
	CPP14ParserIntegersuffix = 139
	CPP14ParserCharacterliteral = 140
	CPP14ParserFloatingliteral = 141
	CPP14ParserStringliteral = 142
	CPP14ParserUserdefinedintegerliteral = 143
	CPP14ParserUserdefinedfloatingliteral = 144
	CPP14ParserUserdefinedstringliteral = 145
	CPP14ParserUserdefinedcharacterliteral = 146
	CPP14ParserWhitespace = 147
	CPP14ParserNewline = 148
	CPP14ParserBlockComment = 149
	CPP14ParserLineComment = 150
)

// CPP14Parser rules.
const (
	CPP14ParserRULE_translationunit = 0
	CPP14ParserRULE_primaryexpression = 1
	CPP14ParserRULE_idexpression = 2
	CPP14ParserRULE_unqualifiedid = 3
	CPP14ParserRULE_qualifiedid = 4
	CPP14ParserRULE_nestednamespecifier = 5
	CPP14ParserRULE_lambdaexpression = 6
	CPP14ParserRULE_lambdaintroducer = 7
	CPP14ParserRULE_lambdacapture = 8
	CPP14ParserRULE_capturedefault = 9
	CPP14ParserRULE_capturelist = 10
	CPP14ParserRULE_capture = 11
	CPP14ParserRULE_simplecapture = 12
	CPP14ParserRULE_initcapture = 13
	CPP14ParserRULE_lambdadeclarator = 14
	CPP14ParserRULE_postfixexpression = 15
	CPP14ParserRULE_typeidofexpr = 16
	CPP14ParserRULE_typeidofthetypeid = 17
	CPP14ParserRULE_expressionlist = 18
	CPP14ParserRULE_pseudodestructorname = 19
	CPP14ParserRULE_unaryexpression = 20
	CPP14ParserRULE_unaryoperator = 21
	CPP14ParserRULE_newexpression = 22
	CPP14ParserRULE_newplacement = 23
	CPP14ParserRULE_newtypeid = 24
	CPP14ParserRULE_newdeclarator = 25
	CPP14ParserRULE_noptrnewdeclarator = 26
	CPP14ParserRULE_newinitializer = 27
	CPP14ParserRULE_deleteexpression = 28
	CPP14ParserRULE_noexceptexpression = 29
	CPP14ParserRULE_castexpression = 30
	CPP14ParserRULE_pmexpression = 31
	CPP14ParserRULE_multiplicativeexpression = 32
	CPP14ParserRULE_additiveexpression = 33
	CPP14ParserRULE_shiftexpression = 34
	CPP14ParserRULE_shiftoperator = 35
	CPP14ParserRULE_relationalexpression = 36
	CPP14ParserRULE_equalityexpression = 37
	CPP14ParserRULE_andexpression = 38
	CPP14ParserRULE_exclusiveorexpression = 39
	CPP14ParserRULE_inclusiveorexpression = 40
	CPP14ParserRULE_logicalandexpression = 41
	CPP14ParserRULE_logicalorexpression = 42
	CPP14ParserRULE_conditionalexpression = 43
	CPP14ParserRULE_assignmentexpression = 44
	CPP14ParserRULE_assignmentoperator = 45
	CPP14ParserRULE_expression = 46
	CPP14ParserRULE_constantexpression = 47
	CPP14ParserRULE_statement = 48
	CPP14ParserRULE_labeledstatement = 49
	CPP14ParserRULE_expressionstatement = 50
	CPP14ParserRULE_compoundstatement = 51
	CPP14ParserRULE_statementseq = 52
	CPP14ParserRULE_selectionstatement = 53
	CPP14ParserRULE_condition = 54
	CPP14ParserRULE_iterationstatement = 55
	CPP14ParserRULE_forinitstatement = 56
	CPP14ParserRULE_forrangedeclaration = 57
	CPP14ParserRULE_forrangeinitializer = 58
	CPP14ParserRULE_jumpstatement = 59
	CPP14ParserRULE_declarationstatement = 60
	CPP14ParserRULE_declarationseq = 61
	CPP14ParserRULE_declaration = 62
	CPP14ParserRULE_blockdeclaration = 63
	CPP14ParserRULE_aliasdeclaration = 64
	CPP14ParserRULE_simpledeclaration = 65
	CPP14ParserRULE_static_assertdeclaration = 66
	CPP14ParserRULE_emptydeclaration = 67
	CPP14ParserRULE_attributedeclaration = 68
	CPP14ParserRULE_declspecifier = 69
	CPP14ParserRULE_declspecifierseq = 70
	CPP14ParserRULE_storageclassspecifier = 71
	CPP14ParserRULE_functionspecifier = 72
	CPP14ParserRULE_typedefname = 73
	CPP14ParserRULE_typespecifier = 74
	CPP14ParserRULE_trailingtypespecifier = 75
	CPP14ParserRULE_typespecifierseq = 76
	CPP14ParserRULE_trailingtypespecifierseq = 77
	CPP14ParserRULE_simpletypespecifier = 78
	CPP14ParserRULE_thetypename = 79
	CPP14ParserRULE_decltypespecifier = 80
	CPP14ParserRULE_elaboratedtypespecifier = 81
	CPP14ParserRULE_enumname = 82
	CPP14ParserRULE_enumspecifier = 83
	CPP14ParserRULE_enumhead = 84
	CPP14ParserRULE_opaqueenumdeclaration = 85
	CPP14ParserRULE_enumkey = 86
	CPP14ParserRULE_enumbase = 87
	CPP14ParserRULE_enumeratorlist = 88
	CPP14ParserRULE_enumeratordefinition = 89
	CPP14ParserRULE_enumerator = 90
	CPP14ParserRULE_namespacename = 91
	CPP14ParserRULE_originalnamespacename = 92
	CPP14ParserRULE_namespacedefinition = 93
	CPP14ParserRULE_namednamespacedefinition = 94
	CPP14ParserRULE_originalnamespacedefinition = 95
	CPP14ParserRULE_extensionnamespacedefinition = 96
	CPP14ParserRULE_unnamednamespacedefinition = 97
	CPP14ParserRULE_namespacebody = 98
	CPP14ParserRULE_namespacealias = 99
	CPP14ParserRULE_namespacealiasdefinition = 100
	CPP14ParserRULE_qualifiednamespacespecifier = 101
	CPP14ParserRULE_usingdeclaration = 102
	CPP14ParserRULE_usingdirective = 103
	CPP14ParserRULE_asmdefinition = 104
	CPP14ParserRULE_linkagespecification = 105
	CPP14ParserRULE_attributespecifierseq = 106
	CPP14ParserRULE_attributespecifier = 107
	CPP14ParserRULE_alignmentspecifier = 108
	CPP14ParserRULE_attributelist = 109
	CPP14ParserRULE_attribute = 110
	CPP14ParserRULE_attributetoken = 111
	CPP14ParserRULE_attributescopedtoken = 112
	CPP14ParserRULE_attributenamespace = 113
	CPP14ParserRULE_attributeargumentclause = 114
	CPP14ParserRULE_balancedtokenseq = 115
	CPP14ParserRULE_balancedtoken = 116
	CPP14ParserRULE_initdeclaratorlist = 117
	CPP14ParserRULE_initdeclarator = 118
	CPP14ParserRULE_declarator = 119
	CPP14ParserRULE_ptrdeclarator = 120
	CPP14ParserRULE_noptrdeclarator = 121
	CPP14ParserRULE_parametersandqualifiers = 122
	CPP14ParserRULE_trailingreturntype = 123
	CPP14ParserRULE_ptroperator = 124
	CPP14ParserRULE_cvqualifierseq = 125
	CPP14ParserRULE_cvqualifier = 126
	CPP14ParserRULE_refqualifier = 127
	CPP14ParserRULE_declaratorid = 128
	CPP14ParserRULE_thetypeid = 129
	CPP14ParserRULE_abstractdeclarator = 130
	CPP14ParserRULE_ptrabstractdeclarator = 131
	CPP14ParserRULE_noptrabstractdeclarator = 132
	CPP14ParserRULE_abstractpackdeclarator = 133
	CPP14ParserRULE_noptrabstractpackdeclarator = 134
	CPP14ParserRULE_parameterdeclarationclause = 135
	CPP14ParserRULE_parameterdeclarationlist = 136
	CPP14ParserRULE_parameterdeclaration = 137
	CPP14ParserRULE_functiondefinition = 138
	CPP14ParserRULE_functionbody = 139
	CPP14ParserRULE_initializer = 140
	CPP14ParserRULE_braceorequalinitializer = 141
	CPP14ParserRULE_initializerclause = 142
	CPP14ParserRULE_initializerlist = 143
	CPP14ParserRULE_bracedinitlist = 144
	CPP14ParserRULE_classname = 145
	CPP14ParserRULE_classspecifier = 146
	CPP14ParserRULE_classhead = 147
	CPP14ParserRULE_classheadname = 148
	CPP14ParserRULE_classvirtspecifier = 149
	CPP14ParserRULE_classkey = 150
	CPP14ParserRULE_memberspecification = 151
	CPP14ParserRULE_memberdeclaration = 152
	CPP14ParserRULE_memberdeclaratorlist = 153
	CPP14ParserRULE_memberdeclarator = 154
	CPP14ParserRULE_virtspecifierseq = 155
	CPP14ParserRULE_virtspecifier = 156
	CPP14ParserRULE_purespecifier = 157
	CPP14ParserRULE_baseclause = 158
	CPP14ParserRULE_basespecifierlist = 159
	CPP14ParserRULE_basespecifier = 160
	CPP14ParserRULE_classordecltype = 161
	CPP14ParserRULE_basetypespecifier = 162
	CPP14ParserRULE_accessspecifier = 163
	CPP14ParserRULE_conversionfunctionid = 164
	CPP14ParserRULE_conversiontypeid = 165
	CPP14ParserRULE_conversiondeclarator = 166
	CPP14ParserRULE_ctorinitializer = 167
	CPP14ParserRULE_meminitializerlist = 168
	CPP14ParserRULE_meminitializer = 169
	CPP14ParserRULE_meminitializerid = 170
	CPP14ParserRULE_operatorfunctionid = 171
	CPP14ParserRULE_literaloperatorid = 172
	CPP14ParserRULE_templatedeclaration = 173
	CPP14ParserRULE_templateparameterlist = 174
	CPP14ParserRULE_templateparameter = 175
	CPP14ParserRULE_typeparameter = 176
	CPP14ParserRULE_simpletemplateid = 177
	CPP14ParserRULE_templateid = 178
	CPP14ParserRULE_templatename = 179
	CPP14ParserRULE_templateargumentlist = 180
	CPP14ParserRULE_templateargument = 181
	CPP14ParserRULE_typenamespecifier = 182
	CPP14ParserRULE_explicitinstantiation = 183
	CPP14ParserRULE_explicitspecialization = 184
	CPP14ParserRULE_tryblock = 185
	CPP14ParserRULE_functiontryblock = 186
	CPP14ParserRULE_handlerseq = 187
	CPP14ParserRULE_handler = 188
	CPP14ParserRULE_exceptiondeclaration = 189
	CPP14ParserRULE_throwexpression = 190
	CPP14ParserRULE_exceptionspecification = 191
	CPP14ParserRULE_dynamicexceptionspecification = 192
	CPP14ParserRULE_typeidlist = 193
	CPP14ParserRULE_noexceptspecification = 194
	CPP14ParserRULE_theoperator = 195
	CPP14ParserRULE_literal = 196
	CPP14ParserRULE_booleanliteral = 197
	CPP14ParserRULE_pointerliteral = 198
	CPP14ParserRULE_userdefinedliteral = 199
)

// ITranslationunitContext is an interface to support dynamic dispatch.
type ITranslationunitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTranslationunitContext differentiates from other interfaces.
	IsTranslationunitContext()
}

type TranslationunitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTranslationunitContext() *TranslationunitContext {
	var p = new(TranslationunitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_translationunit
	return p
}

func (*TranslationunitContext) IsTranslationunitContext() {}

func NewTranslationunitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TranslationunitContext {
	var p = new(TranslationunitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_translationunit

	return p
}

func (s *TranslationunitContext) GetParser() antlr.Parser { return s.parser }

func (s *TranslationunitContext) EOF() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEOF, 0)
}

func (s *TranslationunitContext) Declarationseq() IDeclarationseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationseqContext)
}

func (s *TranslationunitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TranslationunitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TranslationunitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTranslationunit(s)
	}
}

func (s *TranslationunitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTranslationunit(s)
	}
}

func (s *TranslationunitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTranslationunit(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Translationunit() (localctx ITranslationunitContext) {
	localctx = NewTranslationunitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, CPP14ParserRULE_translationunit)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(401)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if ((((_la - 3)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 3))) & ((1 << (CPP14ParserT__2 - 3)) | (1 << (CPP14ParserAlignas - 3)) | (1 << (CPP14ParserAsm - 3)) | (1 << (CPP14ParserAuto - 3)) | (1 << (CPP14ParserBool - 3)) | (1 << (CPP14ParserChar - 3)) | (1 << (CPP14ParserChar16 - 3)) | (1 << (CPP14ParserChar32 - 3)) | (1 << (CPP14ParserClass - 3)) | (1 << (CPP14ParserConst - 3)) | (1 << (CPP14ParserConstexpr - 3)) | (1 << (CPP14ParserDecltype - 3)) | (1 << (CPP14ParserDouble - 3)) | (1 << (CPP14ParserEnum - 3)) | (1 << (CPP14ParserExplicit - 3)))) != 0) || ((((_la - 35)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 35))) & ((1 << (CPP14ParserExtern - 35)) | (1 << (CPP14ParserFloat - 35)) | (1 << (CPP14ParserFriend - 35)) | (1 << (CPP14ParserInline - 35)) | (1 << (CPP14ParserInt - 35)) | (1 << (CPP14ParserLong - 35)) | (1 << (CPP14ParserMutable - 35)) | (1 << (CPP14ParserNamespace - 35)) | (1 << (CPP14ParserOperator - 35)) | (1 << (CPP14ParserRegister - 35)) | (1 << (CPP14ParserShort - 35)) | (1 << (CPP14ParserSigned - 35)) | (1 << (CPP14ParserStatic - 35)) | (1 << (CPP14ParserStatic_assert - 35)) | (1 << (CPP14ParserStruct - 35)))) != 0) || ((((_la - 67)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 67))) & ((1 << (CPP14ParserTemplate - 67)) | (1 << (CPP14ParserThread_local - 67)) | (1 << (CPP14ParserTypedef - 67)) | (1 << (CPP14ParserTypename_ - 67)) | (1 << (CPP14ParserUnion - 67)) | (1 << (CPP14ParserUnsigned - 67)) | (1 << (CPP14ParserUsing - 67)) | (1 << (CPP14ParserVirtual - 67)) | (1 << (CPP14ParserVoid - 67)) | (1 << (CPP14ParserVolatile - 67)) | (1 << (CPP14ParserWchar - 67)) | (1 << (CPP14ParserLeftParen - 67)) | (1 << (CPP14ParserLeftBracket - 67)) | (1 << (CPP14ParserStar - 67)) | (1 << (CPP14ParserAnd - 67)) | (1 << (CPP14ParserTilde - 67)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (CPP14ParserDoublecolon - 128)) | (1 << (CPP14ParserSemi - 128)) | (1 << (CPP14ParserEllipsis - 128)) | (1 << (CPP14ParserIdentifier - 128)))) != 0) {
		{
			p.SetState(400)
			p.declarationseq(0)
		}

	}
	{
		p.SetState(403)
		p.Match(CPP14ParserEOF)
	}



	return localctx
}


// IPrimaryexpressionContext is an interface to support dynamic dispatch.
type IPrimaryexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryexpressionContext differentiates from other interfaces.
	IsPrimaryexpressionContext()
}

type PrimaryexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryexpressionContext() *PrimaryexpressionContext {
	var p = new(PrimaryexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_primaryexpression
	return p
}

func (*PrimaryexpressionContext) IsPrimaryexpressionContext() {}

func NewPrimaryexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryexpressionContext {
	var p = new(PrimaryexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_primaryexpression

	return p
}

func (s *PrimaryexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryexpressionContext) Literal() ILiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *PrimaryexpressionContext) This() antlr.TerminalNode {
	return s.GetToken(CPP14ParserThis, 0)
}

func (s *PrimaryexpressionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *PrimaryexpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrimaryexpressionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *PrimaryexpressionContext) Idexpression() IIdexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdexpressionContext)
}

func (s *PrimaryexpressionContext) Lambdaexpression() ILambdaexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaexpressionContext)
}

func (s *PrimaryexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PrimaryexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterPrimaryexpression(s)
	}
}

func (s *PrimaryexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitPrimaryexpression(s)
	}
}

func (s *PrimaryexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitPrimaryexpression(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Primaryexpression() (localctx IPrimaryexpressionContext) {
	localctx = NewPrimaryexpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, CPP14ParserRULE_primaryexpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(413)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserFalse, CPP14ParserNullptr, CPP14ParserTrue, CPP14ParserIntegerliteral, CPP14ParserCharacterliteral, CPP14ParserFloatingliteral, CPP14ParserStringliteral, CPP14ParserUserdefinedintegerliteral, CPP14ParserUserdefinedfloatingliteral, CPP14ParserUserdefinedstringliteral, CPP14ParserUserdefinedcharacterliteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(405)
			p.Literal()
		}


	case CPP14ParserThis:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(406)
			p.Match(CPP14ParserThis)
		}


	case CPP14ParserLeftParen:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(407)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(408)
			p.expression(0)
		}
		{
			p.SetState(409)
			p.Match(CPP14ParserRightParen)
		}


	case CPP14ParserDecltype, CPP14ParserOperator, CPP14ParserTilde, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(411)
			p.Idexpression()
		}


	case CPP14ParserLeftBracket:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(412)
			p.Lambdaexpression()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IIdexpressionContext is an interface to support dynamic dispatch.
type IIdexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdexpressionContext differentiates from other interfaces.
	IsIdexpressionContext()
}

type IdexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdexpressionContext() *IdexpressionContext {
	var p = new(IdexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_idexpression
	return p
}

func (*IdexpressionContext) IsIdexpressionContext() {}

func NewIdexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdexpressionContext {
	var p = new(IdexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_idexpression

	return p
}

func (s *IdexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *IdexpressionContext) Unqualifiedid() IUnqualifiedidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnqualifiedidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnqualifiedidContext)
}

func (s *IdexpressionContext) Qualifiedid() IQualifiedidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedidContext)
}

func (s *IdexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *IdexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterIdexpression(s)
	}
}

func (s *IdexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitIdexpression(s)
	}
}

func (s *IdexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitIdexpression(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Idexpression() (localctx IIdexpressionContext) {
	localctx = NewIdexpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, CPP14ParserRULE_idexpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(417)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(415)
			p.Unqualifiedid()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(416)
			p.Qualifiedid()
		}

	}


	return localctx
}


// IUnqualifiedidContext is an interface to support dynamic dispatch.
type IUnqualifiedidContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnqualifiedidContext differentiates from other interfaces.
	IsUnqualifiedidContext()
}

type UnqualifiedidContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnqualifiedidContext() *UnqualifiedidContext {
	var p = new(UnqualifiedidContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_unqualifiedid
	return p
}

func (*UnqualifiedidContext) IsUnqualifiedidContext() {}

func NewUnqualifiedidContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnqualifiedidContext {
	var p = new(UnqualifiedidContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_unqualifiedid

	return p
}

func (s *UnqualifiedidContext) GetParser() antlr.Parser { return s.parser }

func (s *UnqualifiedidContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *UnqualifiedidContext) Operatorfunctionid() IOperatorfunctionidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperatorfunctionidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperatorfunctionidContext)
}

func (s *UnqualifiedidContext) Conversionfunctionid() IConversionfunctionidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConversionfunctionidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConversionfunctionidContext)
}

func (s *UnqualifiedidContext) Literaloperatorid() ILiteraloperatoridContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteraloperatoridContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteraloperatoridContext)
}

func (s *UnqualifiedidContext) Tilde() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTilde, 0)
}

func (s *UnqualifiedidContext) Classname() IClassnameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassnameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassnameContext)
}

func (s *UnqualifiedidContext) Decltypespecifier() IDecltypespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecltypespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecltypespecifierContext)
}

func (s *UnqualifiedidContext) Templateid() ITemplateidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateidContext)
}

func (s *UnqualifiedidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnqualifiedidContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *UnqualifiedidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterUnqualifiedid(s)
	}
}

func (s *UnqualifiedidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitUnqualifiedid(s)
	}
}

func (s *UnqualifiedidContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitUnqualifiedid(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Unqualifiedid() (localctx IUnqualifiedidContext) {
	localctx = NewUnqualifiedidContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, CPP14ParserRULE_unqualifiedid)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(428)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(419)
			p.Match(CPP14ParserIdentifier)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(420)
			p.Operatorfunctionid()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(421)
			p.Conversionfunctionid()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(422)
			p.Literaloperatorid()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(423)
			p.Match(CPP14ParserTilde)
		}
		{
			p.SetState(424)
			p.Classname()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(425)
			p.Match(CPP14ParserTilde)
		}
		{
			p.SetState(426)
			p.Decltypespecifier()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(427)
			p.Templateid()
		}

	}


	return localctx
}


// IQualifiedidContext is an interface to support dynamic dispatch.
type IQualifiedidContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQualifiedidContext differentiates from other interfaces.
	IsQualifiedidContext()
}

type QualifiedidContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualifiedidContext() *QualifiedidContext {
	var p = new(QualifiedidContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_qualifiedid
	return p
}

func (*QualifiedidContext) IsQualifiedidContext() {}

func NewQualifiedidContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifiedidContext {
	var p = new(QualifiedidContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_qualifiedid

	return p
}

func (s *QualifiedidContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifiedidContext) Nestednamespecifier() INestednamespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestednamespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestednamespecifierContext)
}

func (s *QualifiedidContext) Unqualifiedid() IUnqualifiedidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnqualifiedidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnqualifiedidContext)
}

func (s *QualifiedidContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *QualifiedidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifiedidContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *QualifiedidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterQualifiedid(s)
	}
}

func (s *QualifiedidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitQualifiedid(s)
	}
}

func (s *QualifiedidContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitQualifiedid(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Qualifiedid() (localctx IQualifiedidContext) {
	localctx = NewQualifiedidContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, CPP14ParserRULE_qualifiedid)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(430)
		p.nestednamespecifier(0)
	}
	p.SetState(432)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == CPP14ParserTemplate {
		{
			p.SetState(431)
			p.Match(CPP14ParserTemplate)
		}

	}
	{
		p.SetState(434)
		p.Unqualifiedid()
	}



	return localctx
}


// INestednamespecifierContext is an interface to support dynamic dispatch.
type INestednamespecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNestednamespecifierContext differentiates from other interfaces.
	IsNestednamespecifierContext()
}

type NestednamespecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNestednamespecifierContext() *NestednamespecifierContext {
	var p = new(NestednamespecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_nestednamespecifier
	return p
}

func (*NestednamespecifierContext) IsNestednamespecifierContext() {}

func NewNestednamespecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NestednamespecifierContext {
	var p = new(NestednamespecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_nestednamespecifier

	return p
}

func (s *NestednamespecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *NestednamespecifierContext) Doublecolon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDoublecolon, 0)
}

func (s *NestednamespecifierContext) Thetypename() IThetypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThetypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThetypenameContext)
}

func (s *NestednamespecifierContext) Namespacename() INamespacenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespacenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespacenameContext)
}

func (s *NestednamespecifierContext) Decltypespecifier() IDecltypespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecltypespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecltypespecifierContext)
}

func (s *NestednamespecifierContext) Nestednamespecifier() INestednamespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestednamespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestednamespecifierContext)
}

func (s *NestednamespecifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *NestednamespecifierContext) Simpletemplateid() ISimpletemplateidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpletemplateidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpletemplateidContext)
}

func (s *NestednamespecifierContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *NestednamespecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NestednamespecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NestednamespecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterNestednamespecifier(s)
	}
}

func (s *NestednamespecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitNestednamespecifier(s)
	}
}

func (s *NestednamespecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitNestednamespecifier(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Nestednamespecifier() (localctx INestednamespecifierContext) {
	return p.nestednamespecifier(0)
}

func (p *CPP14Parser) nestednamespecifier(_p int) (localctx INestednamespecifierContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewNestednamespecifierContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx INestednamespecifierContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 10
	p.EnterRecursionRule(localctx, 10, CPP14ParserRULE_nestednamespecifier, _p)
	var _la int


	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(447)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(437)
			p.Match(CPP14ParserDoublecolon)
		}


	case 2:
		{
			p.SetState(438)
			p.Thetypename()
		}
		{
			p.SetState(439)
			p.Match(CPP14ParserDoublecolon)
		}


	case 3:
		{
			p.SetState(441)
			p.Namespacename()
		}
		{
			p.SetState(442)
			p.Match(CPP14ParserDoublecolon)
		}


	case 4:
		{
			p.SetState(444)
			p.Decltypespecifier()
		}
		{
			p.SetState(445)
			p.Match(CPP14ParserDoublecolon)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(461)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(459)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) {
			case 1:
				localctx = NewNestednamespecifierContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_nestednamespecifier)
				p.SetState(449)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(450)
					p.Match(CPP14ParserIdentifier)
				}
				{
					p.SetState(451)
					p.Match(CPP14ParserDoublecolon)
				}


			case 2:
				localctx = NewNestednamespecifierContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_nestednamespecifier)
				p.SetState(452)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				p.SetState(454)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == CPP14ParserTemplate {
					{
						p.SetState(453)
						p.Match(CPP14ParserTemplate)
					}

				}
				{
					p.SetState(456)
					p.Simpletemplateid()
				}
				{
					p.SetState(457)
					p.Match(CPP14ParserDoublecolon)
				}

			}

		}
		p.SetState(463)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext())
	}



	return localctx
}


// ILambdaexpressionContext is an interface to support dynamic dispatch.
type ILambdaexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdaexpressionContext differentiates from other interfaces.
	IsLambdaexpressionContext()
}

type LambdaexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaexpressionContext() *LambdaexpressionContext {
	var p = new(LambdaexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_lambdaexpression
	return p
}

func (*LambdaexpressionContext) IsLambdaexpressionContext() {}

func NewLambdaexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaexpressionContext {
	var p = new(LambdaexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_lambdaexpression

	return p
}

func (s *LambdaexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaexpressionContext) Lambdaintroducer() ILambdaintroducerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaintroducerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaintroducerContext)
}

func (s *LambdaexpressionContext) Compoundstatement() ICompoundstatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompoundstatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompoundstatementContext)
}

func (s *LambdaexpressionContext) Lambdadeclarator() ILambdadeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdadeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdadeclaratorContext)
}

func (s *LambdaexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *LambdaexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterLambdaexpression(s)
	}
}

func (s *LambdaexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitLambdaexpression(s)
	}
}

func (s *LambdaexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitLambdaexpression(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Lambdaexpression() (localctx ILambdaexpressionContext) {
	localctx = NewLambdaexpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, CPP14ParserRULE_lambdaexpression)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(464)
		p.Lambdaintroducer()
	}
	p.SetState(466)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == CPP14ParserLeftParen {
		{
			p.SetState(465)
			p.Lambdadeclarator()
		}

	}
	{
		p.SetState(468)
		p.Compoundstatement()
	}



	return localctx
}


// ILambdaintroducerContext is an interface to support dynamic dispatch.
type ILambdaintroducerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdaintroducerContext differentiates from other interfaces.
	IsLambdaintroducerContext()
}

type LambdaintroducerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaintroducerContext() *LambdaintroducerContext {
	var p = new(LambdaintroducerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_lambdaintroducer
	return p
}

func (*LambdaintroducerContext) IsLambdaintroducerContext() {}

func NewLambdaintroducerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaintroducerContext {
	var p = new(LambdaintroducerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_lambdaintroducer

	return p
}

func (s *LambdaintroducerContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaintroducerContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *LambdaintroducerContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *LambdaintroducerContext) Lambdacapture() ILambdacaptureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdacaptureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdacaptureContext)
}

func (s *LambdaintroducerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaintroducerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *LambdaintroducerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterLambdaintroducer(s)
	}
}

func (s *LambdaintroducerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitLambdaintroducer(s)
	}
}

func (s *LambdaintroducerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitLambdaintroducer(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Lambdaintroducer() (localctx ILambdaintroducerContext) {
	localctx = NewLambdaintroducerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, CPP14ParserRULE_lambdaintroducer)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(470)
		p.Match(CPP14ParserLeftBracket)
	}
	p.SetState(472)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == CPP14ParserThis || _la == CPP14ParserAnd || _la == CPP14ParserAssign || _la == CPP14ParserIdentifier {
		{
			p.SetState(471)
			p.Lambdacapture()
		}

	}
	{
		p.SetState(474)
		p.Match(CPP14ParserRightBracket)
	}



	return localctx
}


// ILambdacaptureContext is an interface to support dynamic dispatch.
type ILambdacaptureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdacaptureContext differentiates from other interfaces.
	IsLambdacaptureContext()
}

type LambdacaptureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdacaptureContext() *LambdacaptureContext {
	var p = new(LambdacaptureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_lambdacapture
	return p
}

func (*LambdacaptureContext) IsLambdacaptureContext() {}

func NewLambdacaptureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdacaptureContext {
	var p = new(LambdacaptureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_lambdacapture

	return p
}

func (s *LambdacaptureContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdacaptureContext) Capturedefault() ICapturedefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICapturedefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICapturedefaultContext)
}

func (s *LambdacaptureContext) Capturelist() ICapturelistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICapturelistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICapturelistContext)
}

func (s *LambdacaptureContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *LambdacaptureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdacaptureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *LambdacaptureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterLambdacapture(s)
	}
}

func (s *LambdacaptureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitLambdacapture(s)
	}
}

func (s *LambdacaptureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitLambdacapture(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Lambdacapture() (localctx ILambdacaptureContext) {
	localctx = NewLambdacaptureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, CPP14ParserRULE_lambdacapture)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(482)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(476)
			p.Capturedefault()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(477)
			p.capturelist(0)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(478)
			p.Capturedefault()
		}
		{
			p.SetState(479)
			p.Match(CPP14ParserComma)
		}
		{
			p.SetState(480)
			p.capturelist(0)
		}

	}


	return localctx
}


// ICapturedefaultContext is an interface to support dynamic dispatch.
type ICapturedefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCapturedefaultContext differentiates from other interfaces.
	IsCapturedefaultContext()
}

type CapturedefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCapturedefaultContext() *CapturedefaultContext {
	var p = new(CapturedefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_capturedefault
	return p
}

func (*CapturedefaultContext) IsCapturedefaultContext() {}

func NewCapturedefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CapturedefaultContext {
	var p = new(CapturedefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_capturedefault

	return p
}

func (s *CapturedefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *CapturedefaultContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *CapturedefaultContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *CapturedefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CapturedefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *CapturedefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterCapturedefault(s)
	}
}

func (s *CapturedefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitCapturedefault(s)
	}
}

func (s *CapturedefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitCapturedefault(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Capturedefault() (localctx ICapturedefaultContext) {
	localctx = NewCapturedefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, CPP14ParserRULE_capturedefault)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(484)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserAnd || _la == CPP14ParserAssign) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ICapturelistContext is an interface to support dynamic dispatch.
type ICapturelistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCapturelistContext differentiates from other interfaces.
	IsCapturelistContext()
}

type CapturelistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCapturelistContext() *CapturelistContext {
	var p = new(CapturelistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_capturelist
	return p
}

func (*CapturelistContext) IsCapturelistContext() {}

func NewCapturelistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CapturelistContext {
	var p = new(CapturelistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_capturelist

	return p
}

func (s *CapturelistContext) GetParser() antlr.Parser { return s.parser }

func (s *CapturelistContext) Capture() ICaptureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaptureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICaptureContext)
}

func (s *CapturelistContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *CapturelistContext) Capturelist() ICapturelistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICapturelistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICapturelistContext)
}

func (s *CapturelistContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *CapturelistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CapturelistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *CapturelistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterCapturelist(s)
	}
}

func (s *CapturelistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitCapturelist(s)
	}
}

func (s *CapturelistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitCapturelist(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Capturelist() (localctx ICapturelistContext) {
	return p.capturelist(0)
}

func (p *CPP14Parser) capturelist(_p int) (localctx ICapturelistContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewCapturelistContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ICapturelistContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 20
	p.EnterRecursionRule(localctx, 20, CPP14ParserRULE_capturelist, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(487)
		p.Capture()
	}
	p.SetState(489)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(488)
			p.Match(CPP14ParserEllipsis)
		}


	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(499)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewCapturelistContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_capturelist)
			p.SetState(491)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(492)
				p.Match(CPP14ParserComma)
			}
			{
				p.SetState(493)
				p.Capture()
			}
			p.SetState(495)
			p.GetErrorHandler().Sync(p)


			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(494)
					p.Match(CPP14ParserEllipsis)
				}


			}


		}
		p.SetState(501)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext())
	}



	return localctx
}


// ICaptureContext is an interface to support dynamic dispatch.
type ICaptureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaptureContext differentiates from other interfaces.
	IsCaptureContext()
}

type CaptureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaptureContext() *CaptureContext {
	var p = new(CaptureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_capture
	return p
}

func (*CaptureContext) IsCaptureContext() {}

func NewCaptureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaptureContext {
	var p = new(CaptureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_capture

	return p
}

func (s *CaptureContext) GetParser() antlr.Parser { return s.parser }

func (s *CaptureContext) Simplecapture() ISimplecaptureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimplecaptureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimplecaptureContext)
}

func (s *CaptureContext) Initcapture() IInitcaptureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitcaptureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitcaptureContext)
}

func (s *CaptureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaptureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *CaptureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterCapture(s)
	}
}

func (s *CaptureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitCapture(s)
	}
}

func (s *CaptureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitCapture(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Capture() (localctx ICaptureContext) {
	localctx = NewCaptureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, CPP14ParserRULE_capture)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(504)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(502)
			p.Simplecapture()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(503)
			p.Initcapture()
		}

	}


	return localctx
}


// ISimplecaptureContext is an interface to support dynamic dispatch.
type ISimplecaptureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimplecaptureContext differentiates from other interfaces.
	IsSimplecaptureContext()
}

type SimplecaptureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimplecaptureContext() *SimplecaptureContext {
	var p = new(SimplecaptureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_simplecapture
	return p
}

func (*SimplecaptureContext) IsSimplecaptureContext() {}

func NewSimplecaptureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimplecaptureContext {
	var p = new(SimplecaptureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_simplecapture

	return p
}

func (s *SimplecaptureContext) GetParser() antlr.Parser { return s.parser }

func (s *SimplecaptureContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *SimplecaptureContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *SimplecaptureContext) This() antlr.TerminalNode {
	return s.GetToken(CPP14ParserThis, 0)
}

func (s *SimplecaptureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimplecaptureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *SimplecaptureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterSimplecapture(s)
	}
}

func (s *SimplecaptureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitSimplecapture(s)
	}
}

func (s *SimplecaptureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitSimplecapture(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Simplecapture() (localctx ISimplecaptureContext) {
	localctx = NewSimplecaptureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, CPP14ParserRULE_simplecapture)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(510)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(506)
			p.Match(CPP14ParserIdentifier)
		}


	case CPP14ParserAnd:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(507)
			p.Match(CPP14ParserAnd)
		}
		{
			p.SetState(508)
			p.Match(CPP14ParserIdentifier)
		}


	case CPP14ParserThis:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(509)
			p.Match(CPP14ParserThis)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IInitcaptureContext is an interface to support dynamic dispatch.
type IInitcaptureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitcaptureContext differentiates from other interfaces.
	IsInitcaptureContext()
}

type InitcaptureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitcaptureContext() *InitcaptureContext {
	var p = new(InitcaptureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_initcapture
	return p
}

func (*InitcaptureContext) IsInitcaptureContext() {}

func NewInitcaptureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitcaptureContext {
	var p = new(InitcaptureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_initcapture

	return p
}

func (s *InitcaptureContext) GetParser() antlr.Parser { return s.parser }

func (s *InitcaptureContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *InitcaptureContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *InitcaptureContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *InitcaptureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitcaptureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *InitcaptureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterInitcapture(s)
	}
}

func (s *InitcaptureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitInitcapture(s)
	}
}

func (s *InitcaptureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitInitcapture(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Initcapture() (localctx IInitcaptureContext) {
	localctx = NewInitcaptureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, CPP14ParserRULE_initcapture)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(517)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(512)
			p.Match(CPP14ParserIdentifier)
		}
		{
			p.SetState(513)
			p.Initializer()
		}


	case CPP14ParserAnd:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(514)
			p.Match(CPP14ParserAnd)
		}
		{
			p.SetState(515)
			p.Match(CPP14ParserIdentifier)
		}
		{
			p.SetState(516)
			p.Initializer()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ILambdadeclaratorContext is an interface to support dynamic dispatch.
type ILambdadeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdadeclaratorContext differentiates from other interfaces.
	IsLambdadeclaratorContext()
}

type LambdadeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdadeclaratorContext() *LambdadeclaratorContext {
	var p = new(LambdadeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_lambdadeclarator
	return p
}

func (*LambdadeclaratorContext) IsLambdadeclaratorContext() {}

func NewLambdadeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdadeclaratorContext {
	var p = new(LambdadeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_lambdadeclarator

	return p
}

func (s *LambdadeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdadeclaratorContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *LambdadeclaratorContext) Parameterdeclarationclause() IParameterdeclarationclauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterdeclarationclauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterdeclarationclauseContext)
}

func (s *LambdadeclaratorContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *LambdadeclaratorContext) Mutable() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMutable, 0)
}

func (s *LambdadeclaratorContext) Exceptionspecification() IExceptionspecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExceptionspecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExceptionspecificationContext)
}

func (s *LambdadeclaratorContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *LambdadeclaratorContext) Trailingreturntype() ITrailingreturntypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrailingreturntypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrailingreturntypeContext)
}

func (s *LambdadeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdadeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *LambdadeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterLambdadeclarator(s)
	}
}

func (s *LambdadeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitLambdadeclarator(s)
	}
}

func (s *LambdadeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitLambdadeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Lambdadeclarator() (localctx ILambdadeclaratorContext) {
	localctx = NewLambdadeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, CPP14ParserRULE_lambdadeclarator)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(519)
		p.Match(CPP14ParserLeftParen)
	}
	{
		p.SetState(520)
		p.Parameterdeclarationclause()
	}
	{
		p.SetState(521)
		p.Match(CPP14ParserRightParen)
	}
	p.SetState(523)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == CPP14ParserMutable {
		{
			p.SetState(522)
			p.Match(CPP14ParserMutable)
		}

	}
	p.SetState(526)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == CPP14ParserNoexcept || _la == CPP14ParserThrow {
		{
			p.SetState(525)
			p.Exceptionspecification()
		}

	}
	p.SetState(529)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(528)
			p.attributespecifierseq(0)
		}

	}
	p.SetState(532)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == CPP14ParserArrow {
		{
			p.SetState(531)
			p.Trailingreturntype()
		}

	}



	return localctx
}


// IPostfixexpressionContext is an interface to support dynamic dispatch.
type IPostfixexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPostfixexpressionContext differentiates from other interfaces.
	IsPostfixexpressionContext()
}

type PostfixexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixexpressionContext() *PostfixexpressionContext {
	var p = new(PostfixexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_postfixexpression
	return p
}

func (*PostfixexpressionContext) IsPostfixexpressionContext() {}

func NewPostfixexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixexpressionContext {
	var p = new(PostfixexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_postfixexpression

	return p
}

func (s *PostfixexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixexpressionContext) Primaryexpression() IPrimaryexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryexpressionContext)
}

func (s *PostfixexpressionContext) Simpletypespecifier() ISimpletypespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpletypespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpletypespecifierContext)
}

func (s *PostfixexpressionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *PostfixexpressionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *PostfixexpressionContext) Expressionlist() IExpressionlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionlistContext)
}

func (s *PostfixexpressionContext) Typenamespecifier() ITypenamespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenamespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenamespecifierContext)
}

func (s *PostfixexpressionContext) Bracedinitlist() IBracedinitlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBracedinitlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBracedinitlistContext)
}

func (s *PostfixexpressionContext) Dynamic_cast() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDynamic_cast, 0)
}

func (s *PostfixexpressionContext) Less() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, 0)
}

func (s *PostfixexpressionContext) Thetypeid() IThetypeidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThetypeidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThetypeidContext)
}

func (s *PostfixexpressionContext) Greater() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, 0)
}

func (s *PostfixexpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PostfixexpressionContext) Static_cast() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStatic_cast, 0)
}

func (s *PostfixexpressionContext) Reinterpret_cast() antlr.TerminalNode {
	return s.GetToken(CPP14ParserReinterpret_cast, 0)
}

func (s *PostfixexpressionContext) Const_cast() antlr.TerminalNode {
	return s.GetToken(CPP14ParserConst_cast, 0)
}

func (s *PostfixexpressionContext) Typeidofthetypeid() ITypeidofthetypeidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeidofthetypeidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeidofthetypeidContext)
}

func (s *PostfixexpressionContext) Postfixexpression() IPostfixexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixexpressionContext)
}

func (s *PostfixexpressionContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *PostfixexpressionContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *PostfixexpressionContext) Dot() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDot, 0)
}

func (s *PostfixexpressionContext) Idexpression() IIdexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdexpressionContext)
}

func (s *PostfixexpressionContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *PostfixexpressionContext) Arrow() antlr.TerminalNode {
	return s.GetToken(CPP14ParserArrow, 0)
}

func (s *PostfixexpressionContext) Pseudodestructorname() IPseudodestructornameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPseudodestructornameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPseudodestructornameContext)
}

func (s *PostfixexpressionContext) PlusPlus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlusPlus, 0)
}

func (s *PostfixexpressionContext) MinusMinus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinusMinus, 0)
}

func (s *PostfixexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PostfixexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterPostfixexpression(s)
	}
}

func (s *PostfixexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitPostfixexpression(s)
	}
}

func (s *PostfixexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitPostfixexpression(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Postfixexpression() (localctx IPostfixexpressionContext) {
	return p.postfixexpression(0)
}

func (p *CPP14Parser) postfixexpression(_p int) (localctx IPostfixexpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewPostfixexpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPostfixexpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 30
	p.EnterRecursionRule(localctx, 30, CPP14ParserRULE_postfixexpression, _p)
	var _la int


	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(598)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(535)
			p.Primaryexpression()
		}


	case 2:
		{
			p.SetState(536)
			p.Simpletypespecifier()
		}
		{
			p.SetState(537)
			p.Match(CPP14ParserLeftParen)
		}
		p.SetState(539)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << CPP14ParserT__0) | (1 << CPP14ParserT__1) | (1 << CPP14ParserAlignof) | (1 << CPP14ParserAuto) | (1 << CPP14ParserBool) | (1 << CPP14ParserChar) | (1 << CPP14ParserChar16) | (1 << CPP14ParserChar32) | (1 << CPP14ParserConst_cast) | (1 << CPP14ParserDecltype) | (1 << CPP14ParserDelete) | (1 << CPP14ParserDouble) | (1 << CPP14ParserDynamic_cast))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (CPP14ParserFalse - 36)) | (1 << (CPP14ParserFloat - 36)) | (1 << (CPP14ParserInt - 36)) | (1 << (CPP14ParserLong - 36)) | (1 << (CPP14ParserNew - 36)) | (1 << (CPP14ParserNoexcept - 36)) | (1 << (CPP14ParserNullptr - 36)) | (1 << (CPP14ParserOperator - 36)) | (1 << (CPP14ParserReinterpret_cast - 36)) | (1 << (CPP14ParserShort - 36)) | (1 << (CPP14ParserSigned - 36)) | (1 << (CPP14ParserSizeof - 36)) | (1 << (CPP14ParserStatic_cast - 36)))) != 0) || ((((_la - 68)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 68))) & ((1 << (CPP14ParserThis - 68)) | (1 << (CPP14ParserThrow - 68)) | (1 << (CPP14ParserTrue - 68)) | (1 << (CPP14ParserTypeid_ - 68)) | (1 << (CPP14ParserTypename_ - 68)) | (1 << (CPP14ParserUnsigned - 68)) | (1 << (CPP14ParserVoid - 68)) | (1 << (CPP14ParserWchar - 68)) | (1 << (CPP14ParserLeftParen - 68)) | (1 << (CPP14ParserLeftBracket - 68)) | (1 << (CPP14ParserLeftBrace - 68)) | (1 << (CPP14ParserPlus - 68)) | (1 << (CPP14ParserMinus - 68)) | (1 << (CPP14ParserStar - 68)) | (1 << (CPP14ParserAnd - 68)) | (1 << (CPP14ParserOr - 68)) | (1 << (CPP14ParserTilde - 68)))) != 0) || ((((_la - 121)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 121))) & ((1 << (CPP14ParserPlusPlus - 121)) | (1 << (CPP14ParserMinusMinus - 121)) | (1 << (CPP14ParserDoublecolon - 121)) | (1 << (CPP14ParserIdentifier - 121)) | (1 << (CPP14ParserIntegerliteral - 121)) | (1 << (CPP14ParserCharacterliteral - 121)) | (1 << (CPP14ParserFloatingliteral - 121)) | (1 << (CPP14ParserStringliteral - 121)) | (1 << (CPP14ParserUserdefinedintegerliteral - 121)) | (1 << (CPP14ParserUserdefinedfloatingliteral - 121)) | (1 << (CPP14ParserUserdefinedstringliteral - 121)) | (1 << (CPP14ParserUserdefinedcharacterliteral - 121)))) != 0) {
			{
				p.SetState(538)
				p.Expressionlist()
			}

		}
		{
			p.SetState(541)
			p.Match(CPP14ParserRightParen)
		}


	case 3:
		{
			p.SetState(543)
			p.Typenamespecifier()
		}
		{
			p.SetState(544)
			p.Match(CPP14ParserLeftParen)
		}
		p.SetState(546)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << CPP14ParserT__0) | (1 << CPP14ParserT__1) | (1 << CPP14ParserAlignof) | (1 << CPP14ParserAuto) | (1 << CPP14ParserBool) | (1 << CPP14ParserChar) | (1 << CPP14ParserChar16) | (1 << CPP14ParserChar32) | (1 << CPP14ParserConst_cast) | (1 << CPP14ParserDecltype) | (1 << CPP14ParserDelete) | (1 << CPP14ParserDouble) | (1 << CPP14ParserDynamic_cast))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (CPP14ParserFalse - 36)) | (1 << (CPP14ParserFloat - 36)) | (1 << (CPP14ParserInt - 36)) | (1 << (CPP14ParserLong - 36)) | (1 << (CPP14ParserNew - 36)) | (1 << (CPP14ParserNoexcept - 36)) | (1 << (CPP14ParserNullptr - 36)) | (1 << (CPP14ParserOperator - 36)) | (1 << (CPP14ParserReinterpret_cast - 36)) | (1 << (CPP14ParserShort - 36)) | (1 << (CPP14ParserSigned - 36)) | (1 << (CPP14ParserSizeof - 36)) | (1 << (CPP14ParserStatic_cast - 36)))) != 0) || ((((_la - 68)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 68))) & ((1 << (CPP14ParserThis - 68)) | (1 << (CPP14ParserThrow - 68)) | (1 << (CPP14ParserTrue - 68)) | (1 << (CPP14ParserTypeid_ - 68)) | (1 << (CPP14ParserTypename_ - 68)) | (1 << (CPP14ParserUnsigned - 68)) | (1 << (CPP14ParserVoid - 68)) | (1 << (CPP14ParserWchar - 68)) | (1 << (CPP14ParserLeftParen - 68)) | (1 << (CPP14ParserLeftBracket - 68)) | (1 << (CPP14ParserLeftBrace - 68)) | (1 << (CPP14ParserPlus - 68)) | (1 << (CPP14ParserMinus - 68)) | (1 << (CPP14ParserStar - 68)) | (1 << (CPP14ParserAnd - 68)) | (1 << (CPP14ParserOr - 68)) | (1 << (CPP14ParserTilde - 68)))) != 0) || ((((_la - 121)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 121))) & ((1 << (CPP14ParserPlusPlus - 121)) | (1 << (CPP14ParserMinusMinus - 121)) | (1 << (CPP14ParserDoublecolon - 121)) | (1 << (CPP14ParserIdentifier - 121)) | (1 << (CPP14ParserIntegerliteral - 121)) | (1 << (CPP14ParserCharacterliteral - 121)) | (1 << (CPP14ParserFloatingliteral - 121)) | (1 << (CPP14ParserStringliteral - 121)) | (1 << (CPP14ParserUserdefinedintegerliteral - 121)) | (1 << (CPP14ParserUserdefinedfloatingliteral - 121)) | (1 << (CPP14ParserUserdefinedstringliteral - 121)) | (1 << (CPP14ParserUserdefinedcharacterliteral - 121)))) != 0) {
			{
				p.SetState(545)
				p.Expressionlist()
			}

		}
		{
			p.SetState(548)
			p.Match(CPP14ParserRightParen)
		}


	case 4:
		{
			p.SetState(550)
			p.Simpletypespecifier()
		}
		{
			p.SetState(551)
			p.Bracedinitlist()
		}


	case 5:
		{
			p.SetState(553)
			p.Typenamespecifier()
		}
		{
			p.SetState(554)
			p.Bracedinitlist()
		}


	case 6:
		{
			p.SetState(556)
			p.Match(CPP14ParserDynamic_cast)
		}
		{
			p.SetState(557)
			p.Match(CPP14ParserLess)
		}
		{
			p.SetState(558)
			p.Thetypeid()
		}
		{
			p.SetState(559)
			p.Match(CPP14ParserGreater)
		}
		{
			p.SetState(560)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(561)
			p.expression(0)
		}
		{
			p.SetState(562)
			p.Match(CPP14ParserRightParen)
		}


	case 7:
		{
			p.SetState(564)
			p.Match(CPP14ParserStatic_cast)
		}
		{
			p.SetState(565)
			p.Match(CPP14ParserLess)
		}
		{
			p.SetState(566)
			p.Thetypeid()
		}
		{
			p.SetState(567)
			p.Match(CPP14ParserGreater)
		}
		{
			p.SetState(568)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(569)
			p.expression(0)
		}
		{
			p.SetState(570)
			p.Match(CPP14ParserRightParen)
		}


	case 8:
		{
			p.SetState(572)
			p.Match(CPP14ParserReinterpret_cast)
		}
		{
			p.SetState(573)
			p.Match(CPP14ParserLess)
		}
		{
			p.SetState(574)
			p.Thetypeid()
		}
		{
			p.SetState(575)
			p.Match(CPP14ParserGreater)
		}
		{
			p.SetState(576)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(577)
			p.expression(0)
		}
		{
			p.SetState(578)
			p.Match(CPP14ParserRightParen)
		}


	case 9:
		{
			p.SetState(580)
			p.Match(CPP14ParserConst_cast)
		}
		{
			p.SetState(581)
			p.Match(CPP14ParserLess)
		}
		{
			p.SetState(582)
			p.Thetypeid()
		}
		{
			p.SetState(583)
			p.Match(CPP14ParserGreater)
		}
		{
			p.SetState(584)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(585)
			p.expression(0)
		}
		{
			p.SetState(586)
			p.Match(CPP14ParserRightParen)
		}


	case 10:
		{
			p.SetState(588)
			p.Typeidofthetypeid()
		}
		{
			p.SetState(589)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(590)
			p.expression(0)
		}
		{
			p.SetState(591)
			p.Match(CPP14ParserRightParen)
		}


	case 11:
		{
			p.SetState(593)
			p.Typeidofthetypeid()
		}
		{
			p.SetState(594)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(595)
			p.Thetypeid()
		}
		{
			p.SetState(596)
			p.Match(CPP14ParserRightParen)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(640)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(638)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext()) {
			case 1:
				localctx = NewPostfixexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_postfixexpression)
				p.SetState(600)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
				}
				{
					p.SetState(601)
					p.Match(CPP14ParserLeftBracket)
				}
				{
					p.SetState(602)
					p.expression(0)
				}
				{
					p.SetState(603)
					p.Match(CPP14ParserRightBracket)
				}


			case 2:
				localctx = NewPostfixexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_postfixexpression)
				p.SetState(605)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
				}
				{
					p.SetState(606)
					p.Match(CPP14ParserLeftBracket)
				}
				{
					p.SetState(607)
					p.Bracedinitlist()
				}
				{
					p.SetState(608)
					p.Match(CPP14ParserRightBracket)
				}


			case 3:
				localctx = NewPostfixexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_postfixexpression)
				p.SetState(610)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
				}
				{
					p.SetState(611)
					p.Match(CPP14ParserLeftParen)
				}
				p.SetState(613)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << CPP14ParserT__0) | (1 << CPP14ParserT__1) | (1 << CPP14ParserAlignof) | (1 << CPP14ParserAuto) | (1 << CPP14ParserBool) | (1 << CPP14ParserChar) | (1 << CPP14ParserChar16) | (1 << CPP14ParserChar32) | (1 << CPP14ParserConst_cast) | (1 << CPP14ParserDecltype) | (1 << CPP14ParserDelete) | (1 << CPP14ParserDouble) | (1 << CPP14ParserDynamic_cast))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (CPP14ParserFalse - 36)) | (1 << (CPP14ParserFloat - 36)) | (1 << (CPP14ParserInt - 36)) | (1 << (CPP14ParserLong - 36)) | (1 << (CPP14ParserNew - 36)) | (1 << (CPP14ParserNoexcept - 36)) | (1 << (CPP14ParserNullptr - 36)) | (1 << (CPP14ParserOperator - 36)) | (1 << (CPP14ParserReinterpret_cast - 36)) | (1 << (CPP14ParserShort - 36)) | (1 << (CPP14ParserSigned - 36)) | (1 << (CPP14ParserSizeof - 36)) | (1 << (CPP14ParserStatic_cast - 36)))) != 0) || ((((_la - 68)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 68))) & ((1 << (CPP14ParserThis - 68)) | (1 << (CPP14ParserThrow - 68)) | (1 << (CPP14ParserTrue - 68)) | (1 << (CPP14ParserTypeid_ - 68)) | (1 << (CPP14ParserTypename_ - 68)) | (1 << (CPP14ParserUnsigned - 68)) | (1 << (CPP14ParserVoid - 68)) | (1 << (CPP14ParserWchar - 68)) | (1 << (CPP14ParserLeftParen - 68)) | (1 << (CPP14ParserLeftBracket - 68)) | (1 << (CPP14ParserLeftBrace - 68)) | (1 << (CPP14ParserPlus - 68)) | (1 << (CPP14ParserMinus - 68)) | (1 << (CPP14ParserStar - 68)) | (1 << (CPP14ParserAnd - 68)) | (1 << (CPP14ParserOr - 68)) | (1 << (CPP14ParserTilde - 68)))) != 0) || ((((_la - 121)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 121))) & ((1 << (CPP14ParserPlusPlus - 121)) | (1 << (CPP14ParserMinusMinus - 121)) | (1 << (CPP14ParserDoublecolon - 121)) | (1 << (CPP14ParserIdentifier - 121)) | (1 << (CPP14ParserIntegerliteral - 121)) | (1 << (CPP14ParserCharacterliteral - 121)) | (1 << (CPP14ParserFloatingliteral - 121)) | (1 << (CPP14ParserStringliteral - 121)) | (1 << (CPP14ParserUserdefinedintegerliteral - 121)) | (1 << (CPP14ParserUserdefinedfloatingliteral - 121)) | (1 << (CPP14ParserUserdefinedstringliteral - 121)) | (1 << (CPP14ParserUserdefinedcharacterliteral - 121)))) != 0) {
					{
						p.SetState(612)
						p.Expressionlist()
					}

				}
				{
					p.SetState(615)
					p.Match(CPP14ParserRightParen)
				}


			case 4:
				localctx = NewPostfixexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_postfixexpression)
				p.SetState(616)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(617)
					p.Match(CPP14ParserDot)
				}
				p.SetState(619)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == CPP14ParserTemplate {
					{
						p.SetState(618)
						p.Match(CPP14ParserTemplate)
					}

				}
				{
					p.SetState(621)
					p.Idexpression()
				}


			case 5:
				localctx = NewPostfixexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_postfixexpression)
				p.SetState(622)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(623)
					p.Match(CPP14ParserArrow)
				}
				p.SetState(625)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == CPP14ParserTemplate {
					{
						p.SetState(624)
						p.Match(CPP14ParserTemplate)
					}

				}
				{
					p.SetState(627)
					p.Idexpression()
				}


			case 6:
				localctx = NewPostfixexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_postfixexpression)
				p.SetState(628)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(629)
					p.Match(CPP14ParserDot)
				}
				{
					p.SetState(630)
					p.Pseudodestructorname()
				}


			case 7:
				localctx = NewPostfixexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_postfixexpression)
				p.SetState(631)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(632)
					p.Match(CPP14ParserArrow)
				}
				{
					p.SetState(633)
					p.Pseudodestructorname()
				}


			case 8:
				localctx = NewPostfixexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_postfixexpression)
				p.SetState(634)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(635)
					p.Match(CPP14ParserPlusPlus)
				}


			case 9:
				localctx = NewPostfixexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_postfixexpression)
				p.SetState(636)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(637)
					p.Match(CPP14ParserMinusMinus)
				}

			}

		}
		p.SetState(642)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext())
	}



	return localctx
}


// ITypeidofexprContext is an interface to support dynamic dispatch.
type ITypeidofexprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeidofexprContext differentiates from other interfaces.
	IsTypeidofexprContext()
}

type TypeidofexprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeidofexprContext() *TypeidofexprContext {
	var p = new(TypeidofexprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeidofexpr
	return p
}

func (*TypeidofexprContext) IsTypeidofexprContext() {}

func NewTypeidofexprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeidofexprContext {
	var p = new(TypeidofexprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typeidofexpr

	return p
}

func (s *TypeidofexprContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeidofexprContext) Typeid_() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTypeid_, 0)
}

func (s *TypeidofexprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeidofexprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TypeidofexprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTypeidofexpr(s)
	}
}

func (s *TypeidofexprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTypeidofexpr(s)
	}
}

func (s *TypeidofexprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTypeidofexpr(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Typeidofexpr() (localctx ITypeidofexprContext) {
	localctx = NewTypeidofexprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, CPP14ParserRULE_typeidofexpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(643)
		p.Match(CPP14ParserTypeid_)
	}



	return localctx
}


// ITypeidofthetypeidContext is an interface to support dynamic dispatch.
type ITypeidofthetypeidContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeidofthetypeidContext differentiates from other interfaces.
	IsTypeidofthetypeidContext()
}

type TypeidofthetypeidContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeidofthetypeidContext() *TypeidofthetypeidContext {
	var p = new(TypeidofthetypeidContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeidofthetypeid
	return p
}

func (*TypeidofthetypeidContext) IsTypeidofthetypeidContext() {}

func NewTypeidofthetypeidContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeidofthetypeidContext {
	var p = new(TypeidofthetypeidContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typeidofthetypeid

	return p
}

func (s *TypeidofthetypeidContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeidofthetypeidContext) Typeid_() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTypeid_, 0)
}

func (s *TypeidofthetypeidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeidofthetypeidContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TypeidofthetypeidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTypeidofthetypeid(s)
	}
}

func (s *TypeidofthetypeidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTypeidofthetypeid(s)
	}
}

func (s *TypeidofthetypeidContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTypeidofthetypeid(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Typeidofthetypeid() (localctx ITypeidofthetypeidContext) {
	localctx = NewTypeidofthetypeidContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, CPP14ParserRULE_typeidofthetypeid)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(645)
		p.Match(CPP14ParserTypeid_)
	}



	return localctx
}


// IExpressionlistContext is an interface to support dynamic dispatch.
type IExpressionlistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionlistContext differentiates from other interfaces.
	IsExpressionlistContext()
}

type ExpressionlistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionlistContext() *ExpressionlistContext {
	var p = new(ExpressionlistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_expressionlist
	return p
}

func (*ExpressionlistContext) IsExpressionlistContext() {}

func NewExpressionlistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionlistContext {
	var p = new(ExpressionlistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_expressionlist

	return p
}

func (s *ExpressionlistContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionlistContext) Initializerlist() IInitializerlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerlistContext)
}

func (s *ExpressionlistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionlistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ExpressionlistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterExpressionlist(s)
	}
}

func (s *ExpressionlistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitExpressionlist(s)
	}
}

func (s *ExpressionlistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitExpressionlist(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Expressionlist() (localctx IExpressionlistContext) {
	localctx = NewExpressionlistContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, CPP14ParserRULE_expressionlist)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(647)
		p.initializerlist(0)
	}



	return localctx
}


// IPseudodestructornameContext is an interface to support dynamic dispatch.
type IPseudodestructornameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPseudodestructornameContext differentiates from other interfaces.
	IsPseudodestructornameContext()
}

type PseudodestructornameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPseudodestructornameContext() *PseudodestructornameContext {
	var p = new(PseudodestructornameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_pseudodestructorname
	return p
}

func (*PseudodestructornameContext) IsPseudodestructornameContext() {}

func NewPseudodestructornameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PseudodestructornameContext {
	var p = new(PseudodestructornameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_pseudodestructorname

	return p
}

func (s *PseudodestructornameContext) GetParser() antlr.Parser { return s.parser }

func (s *PseudodestructornameContext) AllThetypename() []IThetypenameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IThetypenameContext)(nil)).Elem())
	var tst = make([]IThetypenameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IThetypenameContext)
		}
	}

	return tst
}

func (s *PseudodestructornameContext) Thetypename(i int) IThetypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThetypenameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IThetypenameContext)
}

func (s *PseudodestructornameContext) Doublecolon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDoublecolon, 0)
}

func (s *PseudodestructornameContext) Tilde() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTilde, 0)
}

func (s *PseudodestructornameContext) Nestednamespecifier() INestednamespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestednamespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestednamespecifierContext)
}

func (s *PseudodestructornameContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *PseudodestructornameContext) Simpletemplateid() ISimpletemplateidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpletemplateidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpletemplateidContext)
}

func (s *PseudodestructornameContext) Decltypespecifier() IDecltypespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecltypespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecltypespecifierContext)
}

func (s *PseudodestructornameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PseudodestructornameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PseudodestructornameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterPseudodestructorname(s)
	}
}

func (s *PseudodestructornameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitPseudodestructorname(s)
	}
}

func (s *PseudodestructornameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitPseudodestructorname(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Pseudodestructorname() (localctx IPseudodestructornameContext) {
	localctx = NewPseudodestructornameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, CPP14ParserRULE_pseudodestructorname)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(671)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(650)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(649)
				p.nestednamespecifier(0)
			}


		}
		{
			p.SetState(652)
			p.Thetypename()
		}
		{
			p.SetState(653)
			p.Match(CPP14ParserDoublecolon)
		}
		{
			p.SetState(654)
			p.Match(CPP14ParserTilde)
		}
		{
			p.SetState(655)
			p.Thetypename()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(657)
			p.nestednamespecifier(0)
		}
		{
			p.SetState(658)
			p.Match(CPP14ParserTemplate)
		}
		{
			p.SetState(659)
			p.Simpletemplateid()
		}
		{
			p.SetState(660)
			p.Match(CPP14ParserDoublecolon)
		}
		{
			p.SetState(661)
			p.Match(CPP14ParserTilde)
		}
		{
			p.SetState(662)
			p.Thetypename()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(665)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserDecltype || _la == CPP14ParserDoublecolon || _la == CPP14ParserIdentifier {
			{
				p.SetState(664)
				p.nestednamespecifier(0)
			}

		}
		{
			p.SetState(667)
			p.Match(CPP14ParserTilde)
		}
		{
			p.SetState(668)
			p.Thetypename()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(669)
			p.Match(CPP14ParserTilde)
		}
		{
			p.SetState(670)
			p.Decltypespecifier()
		}

	}


	return localctx
}


// IUnaryexpressionContext is an interface to support dynamic dispatch.
type IUnaryexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnaryexpressionContext differentiates from other interfaces.
	IsUnaryexpressionContext()
}

type UnaryexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryexpressionContext() *UnaryexpressionContext {
	var p = new(UnaryexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_unaryexpression
	return p
}

func (*UnaryexpressionContext) IsUnaryexpressionContext() {}

func NewUnaryexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryexpressionContext {
	var p = new(UnaryexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_unaryexpression

	return p
}

func (s *UnaryexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaryexpressionContext) Postfixexpression() IPostfixexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixexpressionContext)
}

func (s *UnaryexpressionContext) PlusPlus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlusPlus, 0)
}

func (s *UnaryexpressionContext) Castexpression() ICastexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICastexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICastexpressionContext)
}

func (s *UnaryexpressionContext) MinusMinus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinusMinus, 0)
}

func (s *UnaryexpressionContext) Unaryoperator() IUnaryoperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryoperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryoperatorContext)
}

func (s *UnaryexpressionContext) Sizeof() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSizeof, 0)
}

func (s *UnaryexpressionContext) Unaryexpression() IUnaryexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryexpressionContext)
}

func (s *UnaryexpressionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *UnaryexpressionContext) Thetypeid() IThetypeidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThetypeidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThetypeidContext)
}

func (s *UnaryexpressionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *UnaryexpressionContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *UnaryexpressionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *UnaryexpressionContext) Alignof() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAlignof, 0)
}

func (s *UnaryexpressionContext) Noexceptexpression() INoexceptexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoexceptexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoexceptexpressionContext)
}

func (s *UnaryexpressionContext) Newexpression() INewexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INewexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INewexpressionContext)
}

func (s *UnaryexpressionContext) Deleteexpression() IDeleteexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeleteexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeleteexpressionContext)
}

func (s *UnaryexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *UnaryexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterUnaryexpression(s)
	}
}

func (s *UnaryexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitUnaryexpression(s)
	}
}

func (s *UnaryexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitUnaryexpression(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Unaryexpression() (localctx IUnaryexpressionContext) {
	localctx = NewUnaryexpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, CPP14ParserRULE_unaryexpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(701)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(673)
			p.postfixexpression(0)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(674)
			p.Match(CPP14ParserPlusPlus)
		}
		{
			p.SetState(675)
			p.Castexpression()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(676)
			p.Match(CPP14ParserMinusMinus)
		}
		{
			p.SetState(677)
			p.Castexpression()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(678)
			p.Unaryoperator()
		}
		{
			p.SetState(679)
			p.Castexpression()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(681)
			p.Match(CPP14ParserSizeof)
		}
		{
			p.SetState(682)
			p.Unaryexpression()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(683)
			p.Match(CPP14ParserSizeof)
		}
		{
			p.SetState(684)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(685)
			p.Thetypeid()
		}
		{
			p.SetState(686)
			p.Match(CPP14ParserRightParen)
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(688)
			p.Match(CPP14ParserSizeof)
		}
		{
			p.SetState(689)
			p.Match(CPP14ParserEllipsis)
		}
		{
			p.SetState(690)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(691)
			p.Match(CPP14ParserIdentifier)
		}
		{
			p.SetState(692)
			p.Match(CPP14ParserRightParen)
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(693)
			p.Match(CPP14ParserAlignof)
		}
		{
			p.SetState(694)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(695)
			p.Thetypeid()
		}
		{
			p.SetState(696)
			p.Match(CPP14ParserRightParen)
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(698)
			p.Noexceptexpression()
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(699)
			p.Newexpression()
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(700)
			p.Deleteexpression()
		}

	}


	return localctx
}


// IUnaryoperatorContext is an interface to support dynamic dispatch.
type IUnaryoperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnaryoperatorContext differentiates from other interfaces.
	IsUnaryoperatorContext()
}

type UnaryoperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryoperatorContext() *UnaryoperatorContext {
	var p = new(UnaryoperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_unaryoperator
	return p
}

func (*UnaryoperatorContext) IsUnaryoperatorContext() {}

func NewUnaryoperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryoperatorContext {
	var p = new(UnaryoperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_unaryoperator

	return p
}

func (s *UnaryoperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaryoperatorContext) Or() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOr, 0)
}

func (s *UnaryoperatorContext) Star() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStar, 0)
}

func (s *UnaryoperatorContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *UnaryoperatorContext) Plus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlus, 0)
}

func (s *UnaryoperatorContext) Tilde() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTilde, 0)
}

func (s *UnaryoperatorContext) Minus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinus, 0)
}

func (s *UnaryoperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryoperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *UnaryoperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterUnaryoperator(s)
	}
}

func (s *UnaryoperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitUnaryoperator(s)
	}
}

func (s *UnaryoperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitUnaryoperator(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Unaryoperator() (localctx IUnaryoperatorContext) {
	localctx = NewUnaryoperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, CPP14ParserRULE_unaryoperator)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(703)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserT__0 || _la == CPP14ParserT__1 || ((((_la - 90)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 90))) & ((1 << (CPP14ParserPlus - 90)) | (1 << (CPP14ParserMinus - 90)) | (1 << (CPP14ParserStar - 90)) | (1 << (CPP14ParserAnd - 90)) | (1 << (CPP14ParserOr - 90)) | (1 << (CPP14ParserTilde - 90)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// INewexpressionContext is an interface to support dynamic dispatch.
type INewexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNewexpressionContext differentiates from other interfaces.
	IsNewexpressionContext()
}

type NewexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNewexpressionContext() *NewexpressionContext {
	var p = new(NewexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_newexpression
	return p
}

func (*NewexpressionContext) IsNewexpressionContext() {}

func NewNewexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NewexpressionContext {
	var p = new(NewexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_newexpression

	return p
}

func (s *NewexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *NewexpressionContext) New() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNew, 0)
}

func (s *NewexpressionContext) Newtypeid() INewtypeidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INewtypeidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INewtypeidContext)
}

func (s *NewexpressionContext) Doublecolon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDoublecolon, 0)
}

func (s *NewexpressionContext) Newplacement() INewplacementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INewplacementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INewplacementContext)
}

func (s *NewexpressionContext) Newinitializer() INewinitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INewinitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INewinitializerContext)
}

func (s *NewexpressionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NewexpressionContext) Thetypeid() IThetypeidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThetypeidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThetypeidContext)
}

func (s *NewexpressionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NewexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NewexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NewexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterNewexpression(s)
	}
}

func (s *NewexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitNewexpression(s)
	}
}

func (s *NewexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitNewexpression(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Newexpression() (localctx INewexpressionContext) {
	localctx = NewNewexpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, CPP14ParserRULE_newexpression)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(729)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(706)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserDoublecolon {
			{
				p.SetState(705)
				p.Match(CPP14ParserDoublecolon)
			}

		}
		{
			p.SetState(708)
			p.Match(CPP14ParserNew)
		}
		p.SetState(710)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserLeftParen {
			{
				p.SetState(709)
				p.Newplacement()
			}

		}
		{
			p.SetState(712)
			p.Newtypeid()
		}
		p.SetState(714)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(713)
				p.Newinitializer()
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(717)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserDoublecolon {
			{
				p.SetState(716)
				p.Match(CPP14ParserDoublecolon)
			}

		}
		{
			p.SetState(719)
			p.Match(CPP14ParserNew)
		}
		p.SetState(721)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(720)
				p.Newplacement()
			}


		}
		{
			p.SetState(723)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(724)
			p.Thetypeid()
		}
		{
			p.SetState(725)
			p.Match(CPP14ParserRightParen)
		}
		p.SetState(727)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(726)
				p.Newinitializer()
			}


		}

	}


	return localctx
}


// INewplacementContext is an interface to support dynamic dispatch.
type INewplacementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNewplacementContext differentiates from other interfaces.
	IsNewplacementContext()
}

type NewplacementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNewplacementContext() *NewplacementContext {
	var p = new(NewplacementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_newplacement
	return p
}

func (*NewplacementContext) IsNewplacementContext() {}

func NewNewplacementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NewplacementContext {
	var p = new(NewplacementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_newplacement

	return p
}

func (s *NewplacementContext) GetParser() antlr.Parser { return s.parser }

func (s *NewplacementContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NewplacementContext) Expressionlist() IExpressionlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionlistContext)
}

func (s *NewplacementContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NewplacementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NewplacementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NewplacementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterNewplacement(s)
	}
}

func (s *NewplacementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitNewplacement(s)
	}
}

func (s *NewplacementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitNewplacement(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Newplacement() (localctx INewplacementContext) {
	localctx = NewNewplacementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, CPP14ParserRULE_newplacement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(731)
		p.Match(CPP14ParserLeftParen)
	}
	{
		p.SetState(732)
		p.Expressionlist()
	}
	{
		p.SetState(733)
		p.Match(CPP14ParserRightParen)
	}



	return localctx
}


// INewtypeidContext is an interface to support dynamic dispatch.
type INewtypeidContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNewtypeidContext differentiates from other interfaces.
	IsNewtypeidContext()
}

type NewtypeidContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNewtypeidContext() *NewtypeidContext {
	var p = new(NewtypeidContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_newtypeid
	return p
}

func (*NewtypeidContext) IsNewtypeidContext() {}

func NewNewtypeidContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NewtypeidContext {
	var p = new(NewtypeidContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_newtypeid

	return p
}

func (s *NewtypeidContext) GetParser() antlr.Parser { return s.parser }

func (s *NewtypeidContext) Typespecifierseq() ITypespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypespecifierseqContext)
}

func (s *NewtypeidContext) Newdeclarator() INewdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INewdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INewdeclaratorContext)
}

func (s *NewtypeidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NewtypeidContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NewtypeidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterNewtypeid(s)
	}
}

func (s *NewtypeidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitNewtypeid(s)
	}
}

func (s *NewtypeidContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitNewtypeid(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Newtypeid() (localctx INewtypeidContext) {
	localctx = NewNewtypeidContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, CPP14ParserRULE_newtypeid)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(735)
		p.Typespecifierseq()
	}
	p.SetState(737)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 41, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(736)
			p.Newdeclarator()
		}


	}



	return localctx
}


// INewdeclaratorContext is an interface to support dynamic dispatch.
type INewdeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNewdeclaratorContext differentiates from other interfaces.
	IsNewdeclaratorContext()
}

type NewdeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNewdeclaratorContext() *NewdeclaratorContext {
	var p = new(NewdeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_newdeclarator
	return p
}

func (*NewdeclaratorContext) IsNewdeclaratorContext() {}

func NewNewdeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NewdeclaratorContext {
	var p = new(NewdeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_newdeclarator

	return p
}

func (s *NewdeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *NewdeclaratorContext) Ptroperator() IPtroperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPtroperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPtroperatorContext)
}

func (s *NewdeclaratorContext) Newdeclarator() INewdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INewdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INewdeclaratorContext)
}

func (s *NewdeclaratorContext) Noptrnewdeclarator() INoptrnewdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoptrnewdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoptrnewdeclaratorContext)
}

func (s *NewdeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NewdeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NewdeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterNewdeclarator(s)
	}
}

func (s *NewdeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitNewdeclarator(s)
	}
}

func (s *NewdeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitNewdeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Newdeclarator() (localctx INewdeclaratorContext) {
	localctx = NewNewdeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, CPP14ParserRULE_newdeclarator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(744)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserT__2, CPP14ParserDecltype, CPP14ParserStar, CPP14ParserAnd, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(739)
			p.Ptroperator()
		}
		p.SetState(741)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(740)
				p.Newdeclarator()
			}


		}


	case CPP14ParserLeftBracket:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(743)
			p.noptrnewdeclarator(0)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// INoptrnewdeclaratorContext is an interface to support dynamic dispatch.
type INoptrnewdeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNoptrnewdeclaratorContext differentiates from other interfaces.
	IsNoptrnewdeclaratorContext()
}

type NoptrnewdeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoptrnewdeclaratorContext() *NoptrnewdeclaratorContext {
	var p = new(NoptrnewdeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_noptrnewdeclarator
	return p
}

func (*NoptrnewdeclaratorContext) IsNoptrnewdeclaratorContext() {}

func NewNoptrnewdeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoptrnewdeclaratorContext {
	var p = new(NoptrnewdeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_noptrnewdeclarator

	return p
}

func (s *NoptrnewdeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *NoptrnewdeclaratorContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *NoptrnewdeclaratorContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NoptrnewdeclaratorContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *NoptrnewdeclaratorContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *NoptrnewdeclaratorContext) Noptrnewdeclarator() INoptrnewdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoptrnewdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoptrnewdeclaratorContext)
}

func (s *NoptrnewdeclaratorContext) Constantexpression() IConstantexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantexpressionContext)
}

func (s *NoptrnewdeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoptrnewdeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NoptrnewdeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterNoptrnewdeclarator(s)
	}
}

func (s *NoptrnewdeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitNoptrnewdeclarator(s)
	}
}

func (s *NoptrnewdeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitNoptrnewdeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Noptrnewdeclarator() (localctx INoptrnewdeclaratorContext) {
	return p.noptrnewdeclarator(0)
}

func (p *CPP14Parser) noptrnewdeclarator(_p int) (localctx INoptrnewdeclaratorContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewNoptrnewdeclaratorContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx INoptrnewdeclaratorContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 52
	p.EnterRecursionRule(localctx, 52, CPP14ParserRULE_noptrnewdeclarator, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(747)
		p.Match(CPP14ParserLeftBracket)
	}
	{
		p.SetState(748)
		p.expression(0)
	}
	{
		p.SetState(749)
		p.Match(CPP14ParserRightBracket)
	}
	p.SetState(751)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(750)
			p.attributespecifierseq(0)
		}


	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(762)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewNoptrnewdeclaratorContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_noptrnewdeclarator)
			p.SetState(753)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(754)
				p.Match(CPP14ParserLeftBracket)
			}
			{
				p.SetState(755)
				p.Constantexpression()
			}
			{
				p.SetState(756)
				p.Match(CPP14ParserRightBracket)
			}
			p.SetState(758)
			p.GetErrorHandler().Sync(p)


			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 45, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(757)
					p.attributespecifierseq(0)
				}


			}


		}
		p.SetState(764)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext())
	}



	return localctx
}


// INewinitializerContext is an interface to support dynamic dispatch.
type INewinitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNewinitializerContext differentiates from other interfaces.
	IsNewinitializerContext()
}

type NewinitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNewinitializerContext() *NewinitializerContext {
	var p = new(NewinitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_newinitializer
	return p
}

func (*NewinitializerContext) IsNewinitializerContext() {}

func NewNewinitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NewinitializerContext {
	var p = new(NewinitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_newinitializer

	return p
}

func (s *NewinitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *NewinitializerContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NewinitializerContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NewinitializerContext) Expressionlist() IExpressionlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionlistContext)
}

func (s *NewinitializerContext) Bracedinitlist() IBracedinitlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBracedinitlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBracedinitlistContext)
}

func (s *NewinitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NewinitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NewinitializerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterNewinitializer(s)
	}
}

func (s *NewinitializerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitNewinitializer(s)
	}
}

func (s *NewinitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitNewinitializer(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Newinitializer() (localctx INewinitializerContext) {
	localctx = NewNewinitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, CPP14ParserRULE_newinitializer)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(771)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftParen:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(765)
			p.Match(CPP14ParserLeftParen)
		}
		p.SetState(767)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << CPP14ParserT__0) | (1 << CPP14ParserT__1) | (1 << CPP14ParserAlignof) | (1 << CPP14ParserAuto) | (1 << CPP14ParserBool) | (1 << CPP14ParserChar) | (1 << CPP14ParserChar16) | (1 << CPP14ParserChar32) | (1 << CPP14ParserConst_cast) | (1 << CPP14ParserDecltype) | (1 << CPP14ParserDelete) | (1 << CPP14ParserDouble) | (1 << CPP14ParserDynamic_cast))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (CPP14ParserFalse - 36)) | (1 << (CPP14ParserFloat - 36)) | (1 << (CPP14ParserInt - 36)) | (1 << (CPP14ParserLong - 36)) | (1 << (CPP14ParserNew - 36)) | (1 << (CPP14ParserNoexcept - 36)) | (1 << (CPP14ParserNullptr - 36)) | (1 << (CPP14ParserOperator - 36)) | (1 << (CPP14ParserReinterpret_cast - 36)) | (1 << (CPP14ParserShort - 36)) | (1 << (CPP14ParserSigned - 36)) | (1 << (CPP14ParserSizeof - 36)) | (1 << (CPP14ParserStatic_cast - 36)))) != 0) || ((((_la - 68)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 68))) & ((1 << (CPP14ParserThis - 68)) | (1 << (CPP14ParserThrow - 68)) | (1 << (CPP14ParserTrue - 68)) | (1 << (CPP14ParserTypeid_ - 68)) | (1 << (CPP14ParserTypename_ - 68)) | (1 << (CPP14ParserUnsigned - 68)) | (1 << (CPP14ParserVoid - 68)) | (1 << (CPP14ParserWchar - 68)) | (1 << (CPP14ParserLeftParen - 68)) | (1 << (CPP14ParserLeftBracket - 68)) | (1 << (CPP14ParserLeftBrace - 68)) | (1 << (CPP14ParserPlus - 68)) | (1 << (CPP14ParserMinus - 68)) | (1 << (CPP14ParserStar - 68)) | (1 << (CPP14ParserAnd - 68)) | (1 << (CPP14ParserOr - 68)) | (1 << (CPP14ParserTilde - 68)))) != 0) || ((((_la - 121)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 121))) & ((1 << (CPP14ParserPlusPlus - 121)) | (1 << (CPP14ParserMinusMinus - 121)) | (1 << (CPP14ParserDoublecolon - 121)) | (1 << (CPP14ParserIdentifier - 121)) | (1 << (CPP14ParserIntegerliteral - 121)) | (1 << (CPP14ParserCharacterliteral - 121)) | (1 << (CPP14ParserFloatingliteral - 121)) | (1 << (CPP14ParserStringliteral - 121)) | (1 << (CPP14ParserUserdefinedintegerliteral - 121)) | (1 << (CPP14ParserUserdefinedfloatingliteral - 121)) | (1 << (CPP14ParserUserdefinedstringliteral - 121)) | (1 << (CPP14ParserUserdefinedcharacterliteral - 121)))) != 0) {
			{
				p.SetState(766)
				p.Expressionlist()
			}

		}
		{
			p.SetState(769)
			p.Match(CPP14ParserRightParen)
		}


	case CPP14ParserLeftBrace:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(770)
			p.Bracedinitlist()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IDeleteexpressionContext is an interface to support dynamic dispatch.
type IDeleteexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeleteexpressionContext differentiates from other interfaces.
	IsDeleteexpressionContext()
}

type DeleteexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeleteexpressionContext() *DeleteexpressionContext {
	var p = new(DeleteexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_deleteexpression
	return p
}

func (*DeleteexpressionContext) IsDeleteexpressionContext() {}

func NewDeleteexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeleteexpressionContext {
	var p = new(DeleteexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_deleteexpression

	return p
}

func (s *DeleteexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *DeleteexpressionContext) Delete() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDelete, 0)
}

func (s *DeleteexpressionContext) Castexpression() ICastexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICastexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICastexpressionContext)
}

func (s *DeleteexpressionContext) Doublecolon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDoublecolon, 0)
}

func (s *DeleteexpressionContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *DeleteexpressionContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *DeleteexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *DeleteexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterDeleteexpression(s)
	}
}

func (s *DeleteexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitDeleteexpression(s)
	}
}

func (s *DeleteexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitDeleteexpression(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Deleteexpression() (localctx IDeleteexpressionContext) {
	localctx = NewDeleteexpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, CPP14ParserRULE_deleteexpression)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(785)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(774)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserDoublecolon {
			{
				p.SetState(773)
				p.Match(CPP14ParserDoublecolon)
			}

		}
		{
			p.SetState(776)
			p.Match(CPP14ParserDelete)
		}
		{
			p.SetState(777)
			p.Castexpression()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(779)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserDoublecolon {
			{
				p.SetState(778)
				p.Match(CPP14ParserDoublecolon)
			}

		}
		{
			p.SetState(781)
			p.Match(CPP14ParserDelete)
		}
		{
			p.SetState(782)
			p.Match(CPP14ParserLeftBracket)
		}
		{
			p.SetState(783)
			p.Match(CPP14ParserRightBracket)
		}
		{
			p.SetState(784)
			p.Castexpression()
		}

	}


	return localctx
}


// INoexceptexpressionContext is an interface to support dynamic dispatch.
type INoexceptexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNoexceptexpressionContext differentiates from other interfaces.
	IsNoexceptexpressionContext()
}

type NoexceptexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoexceptexpressionContext() *NoexceptexpressionContext {
	var p = new(NoexceptexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_noexceptexpression
	return p
}

func (*NoexceptexpressionContext) IsNoexceptexpressionContext() {}

func NewNoexceptexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoexceptexpressionContext {
	var p = new(NoexceptexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_noexceptexpression

	return p
}

func (s *NoexceptexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *NoexceptexpressionContext) Noexcept() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNoexcept, 0)
}

func (s *NoexceptexpressionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NoexceptexpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NoexceptexpressionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NoexceptexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoexceptexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NoexceptexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterNoexceptexpression(s)
	}
}

func (s *NoexceptexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitNoexceptexpression(s)
	}
}

func (s *NoexceptexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitNoexceptexpression(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Noexceptexpression() (localctx INoexceptexpressionContext) {
	localctx = NewNoexceptexpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, CPP14ParserRULE_noexceptexpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(787)
		p.Match(CPP14ParserNoexcept)
	}
	{
		p.SetState(788)
		p.Match(CPP14ParserLeftParen)
	}
	{
		p.SetState(789)
		p.expression(0)
	}
	{
		p.SetState(790)
		p.Match(CPP14ParserRightParen)
	}



	return localctx
}


// ICastexpressionContext is an interface to support dynamic dispatch.
type ICastexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCastexpressionContext differentiates from other interfaces.
	IsCastexpressionContext()
}

type CastexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCastexpressionContext() *CastexpressionContext {
	var p = new(CastexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_castexpression
	return p
}

func (*CastexpressionContext) IsCastexpressionContext() {}

func NewCastexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CastexpressionContext {
	var p = new(CastexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_castexpression

	return p
}

func (s *CastexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *CastexpressionContext) Unaryexpression() IUnaryexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryexpressionContext)
}

func (s *CastexpressionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *CastexpressionContext) Thetypeid() IThetypeidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThetypeidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThetypeidContext)
}

func (s *CastexpressionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *CastexpressionContext) Castexpression() ICastexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICastexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICastexpressionContext)
}

func (s *CastexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CastexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *CastexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterCastexpression(s)
	}
}

func (s *CastexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitCastexpression(s)
	}
}

func (s *CastexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitCastexpression(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Castexpression() (localctx ICastexpressionContext) {
	localctx = NewCastexpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, CPP14ParserRULE_castexpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(798)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(792)
			p.Unaryexpression()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(793)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(794)
			p.Thetypeid()
		}
		{
			p.SetState(795)
			p.Match(CPP14ParserRightParen)
		}
		{
			p.SetState(796)
			p.Castexpression()
		}

	}


	return localctx
}


// IPmexpressionContext is an interface to support dynamic dispatch.
type IPmexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPmexpressionContext differentiates from other interfaces.
	IsPmexpressionContext()
}

type PmexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPmexpressionContext() *PmexpressionContext {
	var p = new(PmexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_pmexpression
	return p
}

func (*PmexpressionContext) IsPmexpressionContext() {}

func NewPmexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PmexpressionContext {
	var p = new(PmexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_pmexpression

	return p
}

func (s *PmexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PmexpressionContext) Castexpression() ICastexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICastexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICastexpressionContext)
}

func (s *PmexpressionContext) Pmexpression() IPmexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPmexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPmexpressionContext)
}

func (s *PmexpressionContext) DotStar() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDotStar, 0)
}

func (s *PmexpressionContext) ArrowStar() antlr.TerminalNode {
	return s.GetToken(CPP14ParserArrowStar, 0)
}

func (s *PmexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PmexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PmexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterPmexpression(s)
	}
}

func (s *PmexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitPmexpression(s)
	}
}

func (s *PmexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitPmexpression(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Pmexpression() (localctx IPmexpressionContext) {
	return p.pmexpression(0)
}

func (p *CPP14Parser) pmexpression(_p int) (localctx IPmexpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewPmexpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPmexpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 62
	p.EnterRecursionRule(localctx, 62, CPP14ParserRULE_pmexpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(801)
		p.Castexpression()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(811)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(809)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext()) {
			case 1:
				localctx = NewPmexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_pmexpression)
				p.SetState(803)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(804)
					p.Match(CPP14ParserDotStar)
				}
				{
					p.SetState(805)
					p.Castexpression()
				}


			case 2:
				localctx = NewPmexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_pmexpression)
				p.SetState(806)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(807)
					p.Match(CPP14ParserArrowStar)
				}
				{
					p.SetState(808)
					p.Castexpression()
				}

			}

		}
		p.SetState(813)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext())
	}



	return localctx
}


// IMultiplicativeexpressionContext is an interface to support dynamic dispatch.
type IMultiplicativeexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultiplicativeexpressionContext differentiates from other interfaces.
	IsMultiplicativeexpressionContext()
}

type MultiplicativeexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiplicativeexpressionContext() *MultiplicativeexpressionContext {
	var p = new(MultiplicativeexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_multiplicativeexpression
	return p
}

func (*MultiplicativeexpressionContext) IsMultiplicativeexpressionContext() {}

func NewMultiplicativeexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultiplicativeexpressionContext {
	var p = new(MultiplicativeexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_multiplicativeexpression

	return p
}

func (s *MultiplicativeexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *MultiplicativeexpressionContext) Pmexpression() IPmexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPmexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPmexpressionContext)
}

func (s *MultiplicativeexpressionContext) Multiplicativeexpression() IMultiplicativeexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiplicativeexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiplicativeexpressionContext)
}

func (s *MultiplicativeexpressionContext) Star() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStar, 0)
}

func (s *MultiplicativeexpressionContext) Div() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDiv, 0)
}

func (s *MultiplicativeexpressionContext) Mod() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMod, 0)
}

func (s *MultiplicativeexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiplicativeexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *MultiplicativeexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterMultiplicativeexpression(s)
	}
}

func (s *MultiplicativeexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitMultiplicativeexpression(s)
	}
}

func (s *MultiplicativeexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitMultiplicativeexpression(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Multiplicativeexpression() (localctx IMultiplicativeexpressionContext) {
	return p.multiplicativeexpression(0)
}

func (p *CPP14Parser) multiplicativeexpression(_p int) (localctx IMultiplicativeexpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewMultiplicativeexpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IMultiplicativeexpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 64
	p.EnterRecursionRule(localctx, 64, CPP14ParserRULE_multiplicativeexpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(815)
		p.pmexpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(828)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(826)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext()) {
			case 1:
				localctx = NewMultiplicativeexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_multiplicativeexpression)
				p.SetState(817)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(818)
					p.Match(CPP14ParserStar)
				}
				{
					p.SetState(819)
					p.pmexpression(0)
				}


			case 2:
				localctx = NewMultiplicativeexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_multiplicativeexpression)
				p.SetState(820)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(821)
					p.Match(CPP14ParserDiv)
				}
				{
					p.SetState(822)
					p.pmexpression(0)
				}


			case 3:
				localctx = NewMultiplicativeexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_multiplicativeexpression)
				p.SetState(823)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(824)
					p.Match(CPP14ParserMod)
				}
				{
					p.SetState(825)
					p.pmexpression(0)
				}

			}

		}
		p.SetState(830)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext())
	}



	return localctx
}


// IAdditiveexpressionContext is an interface to support dynamic dispatch.
type IAdditiveexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdditiveexpressionContext differentiates from other interfaces.
	IsAdditiveexpressionContext()
}

type AdditiveexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdditiveexpressionContext() *AdditiveexpressionContext {
	var p = new(AdditiveexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_additiveexpression
	return p
}

func (*AdditiveexpressionContext) IsAdditiveexpressionContext() {}

func NewAdditiveexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AdditiveexpressionContext {
	var p = new(AdditiveexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_additiveexpression

	return p
}

func (s *AdditiveexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AdditiveexpressionContext) Multiplicativeexpression() IMultiplicativeexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiplicativeexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiplicativeexpressionContext)
}

func (s *AdditiveexpressionContext) Additiveexpression() IAdditiveexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdditiveexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdditiveexpressionContext)
}

func (s *AdditiveexpressionContext) Plus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlus, 0)
}

func (s *AdditiveexpressionContext) Minus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinus, 0)
}

func (s *AdditiveexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdditiveexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AdditiveexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterAdditiveexpression(s)
	}
}

func (s *AdditiveexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitAdditiveexpression(s)
	}
}

func (s *AdditiveexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitAdditiveexpression(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Additiveexpression() (localctx IAdditiveexpressionContext) {
	return p.additiveexpression(0)
}

func (p *CPP14Parser) additiveexpression(_p int) (localctx IAdditiveexpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewAdditiveexpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAdditiveexpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 66
	p.EnterRecursionRule(localctx, 66, CPP14ParserRULE_additiveexpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(832)
		p.multiplicativeexpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(842)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(840)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext()) {
			case 1:
				localctx = NewAdditiveexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_additiveexpression)
				p.SetState(834)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(835)
					p.Match(CPP14ParserPlus)
				}
				{
					p.SetState(836)
					p.multiplicativeexpression(0)
				}


			case 2:
				localctx = NewAdditiveexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_additiveexpression)
				p.SetState(837)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(838)
					p.Match(CPP14ParserMinus)
				}
				{
					p.SetState(839)
					p.multiplicativeexpression(0)
				}

			}

		}
		p.SetState(844)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext())
	}



	return localctx
}


// IShiftexpressionContext is an interface to support dynamic dispatch.
type IShiftexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShiftexpressionContext differentiates from other interfaces.
	IsShiftexpressionContext()
}

type ShiftexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShiftexpressionContext() *ShiftexpressionContext {
	var p = new(ShiftexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_shiftexpression
	return p
}

func (*ShiftexpressionContext) IsShiftexpressionContext() {}

func NewShiftexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShiftexpressionContext {
	var p = new(ShiftexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_shiftexpression

	return p
}

func (s *ShiftexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ShiftexpressionContext) Additiveexpression() IAdditiveexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdditiveexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdditiveexpressionContext)
}

func (s *ShiftexpressionContext) Shiftexpression() IShiftexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShiftexpressionContext)
}

func (s *ShiftexpressionContext) Shiftoperator() IShiftoperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftoperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShiftoperatorContext)
}

func (s *ShiftexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShiftexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ShiftexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterShiftexpression(s)
	}
}

func (s *ShiftexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitShiftexpression(s)
	}
}

func (s *ShiftexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitShiftexpression(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Shiftexpression() (localctx IShiftexpressionContext) {
	return p.shiftexpression(0)
}

func (p *CPP14Parser) shiftexpression(_p int) (localctx IShiftexpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewShiftexpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IShiftexpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 68
	p.EnterRecursionRule(localctx, 68, CPP14ParserRULE_shiftexpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(846)
		p.additiveexpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(854)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 59, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewShiftexpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_shiftexpression)
			p.SetState(848)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(849)
				p.Shiftoperator()
			}
			{
				p.SetState(850)
				p.additiveexpression(0)
			}


		}
		p.SetState(856)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 59, p.GetParserRuleContext())
	}



	return localctx
}


// IShiftoperatorContext is an interface to support dynamic dispatch.
type IShiftoperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShiftoperatorContext differentiates from other interfaces.
	IsShiftoperatorContext()
}

type ShiftoperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShiftoperatorContext() *ShiftoperatorContext {
	var p = new(ShiftoperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_shiftoperator
	return p
}

func (*ShiftoperatorContext) IsShiftoperatorContext() {}

func NewShiftoperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShiftoperatorContext {
	var p = new(ShiftoperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_shiftoperator

	return p
}

func (s *ShiftoperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *ShiftoperatorContext) RightShift() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightShift, 0)
}

func (s *ShiftoperatorContext) LeftShift() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftShift, 0)
}

func (s *ShiftoperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShiftoperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ShiftoperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterShiftoperator(s)
	}
}

func (s *ShiftoperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitShiftoperator(s)
	}
}

func (s *ShiftoperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitShiftoperator(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Shiftoperator() (localctx IShiftoperatorContext) {
	localctx = NewShiftoperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, CPP14ParserRULE_shiftoperator)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(857)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserLeftShift || _la == CPP14ParserRightShift) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IRelationalexpressionContext is an interface to support dynamic dispatch.
type IRelationalexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelationalexpressionContext differentiates from other interfaces.
	IsRelationalexpressionContext()
}

type RelationalexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationalexpressionContext() *RelationalexpressionContext {
	var p = new(RelationalexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_relationalexpression
	return p
}

func (*RelationalexpressionContext) IsRelationalexpressionContext() {}

func NewRelationalexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationalexpressionContext {
	var p = new(RelationalexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_relationalexpression

	return p
}

func (s *RelationalexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationalexpressionContext) Shiftexpression() IShiftexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShiftexpressionContext)
}

func (s *RelationalexpressionContext) Relationalexpression() IRelationalexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalexpressionContext)
}

func (s *RelationalexpressionContext) Less() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, 0)
}

func (s *RelationalexpressionContext) Greater() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, 0)
}

func (s *RelationalexpressionContext) LessEqual() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLessEqual, 0)
}

func (s *RelationalexpressionContext) GreaterEqual() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreaterEqual, 0)
}

func (s *RelationalexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationalexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *RelationalexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterRelationalexpression(s)
	}
}

func (s *RelationalexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitRelationalexpression(s)
	}
}

func (s *RelationalexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitRelationalexpression(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Relationalexpression() (localctx IRelationalexpressionContext) {
	return p.relationalexpression(0)
}

func (p *CPP14Parser) relationalexpression(_p int) (localctx IRelationalexpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewRelationalexpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IRelationalexpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 72
	p.EnterRecursionRule(localctx, 72, CPP14ParserRULE_relationalexpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(860)
		p.shiftexpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(876)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(874)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 60, p.GetParserRuleContext()) {
			case 1:
				localctx = NewRelationalexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_relationalexpression)
				p.SetState(862)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(863)
					p.Match(CPP14ParserLess)
				}
				{
					p.SetState(864)
					p.shiftexpression(0)
				}


			case 2:
				localctx = NewRelationalexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_relationalexpression)
				p.SetState(865)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(866)
					p.Match(CPP14ParserGreater)
				}
				{
					p.SetState(867)
					p.shiftexpression(0)
				}


			case 3:
				localctx = NewRelationalexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_relationalexpression)
				p.SetState(868)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(869)
					p.Match(CPP14ParserLessEqual)
				}
				{
					p.SetState(870)
					p.shiftexpression(0)
				}


			case 4:
				localctx = NewRelationalexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_relationalexpression)
				p.SetState(871)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(872)
					p.Match(CPP14ParserGreaterEqual)
				}
				{
					p.SetState(873)
					p.shiftexpression(0)
				}

			}

		}
		p.SetState(878)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext())
	}



	return localctx
}


// IEqualityexpressionContext is an interface to support dynamic dispatch.
type IEqualityexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEqualityexpressionContext differentiates from other interfaces.
	IsEqualityexpressionContext()
}

type EqualityexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEqualityexpressionContext() *EqualityexpressionContext {
	var p = new(EqualityexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_equalityexpression
	return p
}

func (*EqualityexpressionContext) IsEqualityexpressionContext() {}

func NewEqualityexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EqualityexpressionContext {
	var p = new(EqualityexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_equalityexpression

	return p
}

func (s *EqualityexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *EqualityexpressionContext) Relationalexpression() IRelationalexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalexpressionContext)
}

func (s *EqualityexpressionContext) Equalityexpression() IEqualityexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityexpressionContext)
}

func (s *EqualityexpressionContext) Equal() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEqual, 0)
}

func (s *EqualityexpressionContext) NotEqual() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNotEqual, 0)
}

func (s *EqualityexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqualityexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *EqualityexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterEqualityexpression(s)
	}
}

func (s *EqualityexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitEqualityexpression(s)
	}
}

func (s *EqualityexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitEqualityexpression(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Equalityexpression() (localctx IEqualityexpressionContext) {
	return p.equalityexpression(0)
}

func (p *CPP14Parser) equalityexpression(_p int) (localctx IEqualityexpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewEqualityexpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IEqualityexpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 74
	p.EnterRecursionRule(localctx, 74, CPP14ParserRULE_equalityexpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(880)
		p.relationalexpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(890)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(888)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 62, p.GetParserRuleContext()) {
			case 1:
				localctx = NewEqualityexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_equalityexpression)
				p.SetState(882)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(883)
					p.Match(CPP14ParserEqual)
				}
				{
					p.SetState(884)
					p.relationalexpression(0)
				}


			case 2:
				localctx = NewEqualityexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_equalityexpression)
				p.SetState(885)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(886)
					p.Match(CPP14ParserNotEqual)
				}
				{
					p.SetState(887)
					p.relationalexpression(0)
				}

			}

		}
		p.SetState(892)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext())
	}



	return localctx
}


// IAndexpressionContext is an interface to support dynamic dispatch.
type IAndexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAndexpressionContext differentiates from other interfaces.
	IsAndexpressionContext()
}

type AndexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAndexpressionContext() *AndexpressionContext {
	var p = new(AndexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_andexpression
	return p
}

func (*AndexpressionContext) IsAndexpressionContext() {}

func NewAndexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AndexpressionContext {
	var p = new(AndexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_andexpression

	return p
}

func (s *AndexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AndexpressionContext) Equalityexpression() IEqualityexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityexpressionContext)
}

func (s *AndexpressionContext) Andexpression() IAndexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAndexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAndexpressionContext)
}

func (s *AndexpressionContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *AndexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AndexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AndexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterAndexpression(s)
	}
}

func (s *AndexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitAndexpression(s)
	}
}

func (s *AndexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitAndexpression(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Andexpression() (localctx IAndexpressionContext) {
	return p.andexpression(0)
}

func (p *CPP14Parser) andexpression(_p int) (localctx IAndexpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewAndexpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAndexpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 76
	p.EnterRecursionRule(localctx, 76, CPP14ParserRULE_andexpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(894)
		p.equalityexpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(901)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewAndexpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_andexpression)
			p.SetState(896)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(897)
				p.Match(CPP14ParserAnd)
			}
			{
				p.SetState(898)
				p.equalityexpression(0)
			}


		}
		p.SetState(903)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext())
	}



	return localctx
}


// IExclusiveorexpressionContext is an interface to support dynamic dispatch.
type IExclusiveorexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExclusiveorexpressionContext differentiates from other interfaces.
	IsExclusiveorexpressionContext()
}

type ExclusiveorexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExclusiveorexpressionContext() *ExclusiveorexpressionContext {
	var p = new(ExclusiveorexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_exclusiveorexpression
	return p
}

func (*ExclusiveorexpressionContext) IsExclusiveorexpressionContext() {}

func NewExclusiveorexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExclusiveorexpressionContext {
	var p = new(ExclusiveorexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_exclusiveorexpression

	return p
}

func (s *ExclusiveorexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExclusiveorexpressionContext) Andexpression() IAndexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAndexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAndexpressionContext)
}

func (s *ExclusiveorexpressionContext) Exclusiveorexpression() IExclusiveorexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExclusiveorexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExclusiveorexpressionContext)
}

func (s *ExclusiveorexpressionContext) Caret() antlr.TerminalNode {
	return s.GetToken(CPP14ParserCaret, 0)
}

func (s *ExclusiveorexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExclusiveorexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ExclusiveorexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterExclusiveorexpression(s)
	}
}

func (s *ExclusiveorexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitExclusiveorexpression(s)
	}
}

func (s *ExclusiveorexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitExclusiveorexpression(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Exclusiveorexpression() (localctx IExclusiveorexpressionContext) {
	return p.exclusiveorexpression(0)
}

func (p *CPP14Parser) exclusiveorexpression(_p int) (localctx IExclusiveorexpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExclusiveorexpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExclusiveorexpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 78
	p.EnterRecursionRule(localctx, 78, CPP14ParserRULE_exclusiveorexpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(905)
		p.andexpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(912)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 65, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExclusiveorexpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_exclusiveorexpression)
			p.SetState(907)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(908)
				p.Match(CPP14ParserCaret)
			}
			{
				p.SetState(909)
				p.andexpression(0)
			}


		}
		p.SetState(914)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 65, p.GetParserRuleContext())
	}



	return localctx
}


// IInclusiveorexpressionContext is an interface to support dynamic dispatch.
type IInclusiveorexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInclusiveorexpressionContext differentiates from other interfaces.
	IsInclusiveorexpressionContext()
}

type InclusiveorexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInclusiveorexpressionContext() *InclusiveorexpressionContext {
	var p = new(InclusiveorexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_inclusiveorexpression
	return p
}

func (*InclusiveorexpressionContext) IsInclusiveorexpressionContext() {}

func NewInclusiveorexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InclusiveorexpressionContext {
	var p = new(InclusiveorexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_inclusiveorexpression

	return p
}

func (s *InclusiveorexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *InclusiveorexpressionContext) Exclusiveorexpression() IExclusiveorexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExclusiveorexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExclusiveorexpressionContext)
}

func (s *InclusiveorexpressionContext) Inclusiveorexpression() IInclusiveorexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInclusiveorexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInclusiveorexpressionContext)
}

func (s *InclusiveorexpressionContext) Or() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOr, 0)
}

func (s *InclusiveorexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InclusiveorexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *InclusiveorexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterInclusiveorexpression(s)
	}
}

func (s *InclusiveorexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitInclusiveorexpression(s)
	}
}

func (s *InclusiveorexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitInclusiveorexpression(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Inclusiveorexpression() (localctx IInclusiveorexpressionContext) {
	return p.inclusiveorexpression(0)
}

func (p *CPP14Parser) inclusiveorexpression(_p int) (localctx IInclusiveorexpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewInclusiveorexpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IInclusiveorexpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 80
	p.EnterRecursionRule(localctx, 80, CPP14ParserRULE_inclusiveorexpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(916)
		p.exclusiveorexpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(923)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 66, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewInclusiveorexpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_inclusiveorexpression)
			p.SetState(918)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(919)
				p.Match(CPP14ParserOr)
			}
			{
				p.SetState(920)
				p.exclusiveorexpression(0)
			}


		}
		p.SetState(925)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 66, p.GetParserRuleContext())
	}



	return localctx
}


// ILogicalandexpressionContext is an interface to support dynamic dispatch.
type ILogicalandexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalandexpressionContext differentiates from other interfaces.
	IsLogicalandexpressionContext()
}

type LogicalandexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalandexpressionContext() *LogicalandexpressionContext {
	var p = new(LogicalandexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_logicalandexpression
	return p
}

func (*LogicalandexpressionContext) IsLogicalandexpressionContext() {}

func NewLogicalandexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalandexpressionContext {
	var p = new(LogicalandexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_logicalandexpression

	return p
}

func (s *LogicalandexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalandexpressionContext) Inclusiveorexpression() IInclusiveorexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInclusiveorexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInclusiveorexpressionContext)
}

func (s *LogicalandexpressionContext) Logicalandexpression() ILogicalandexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalandexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalandexpressionContext)
}

func (s *LogicalandexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalandexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *LogicalandexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterLogicalandexpression(s)
	}
}

func (s *LogicalandexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitLogicalandexpression(s)
	}
}

func (s *LogicalandexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitLogicalandexpression(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Logicalandexpression() (localctx ILogicalandexpressionContext) {
	return p.logicalandexpression(0)
}

func (p *CPP14Parser) logicalandexpression(_p int) (localctx ILogicalandexpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalandexpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalandexpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 82
	p.EnterRecursionRule(localctx, 82, CPP14ParserRULE_logicalandexpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(927)
		p.inclusiveorexpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(937)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 68, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(935)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext()) {
			case 1:
				localctx = NewLogicalandexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_logicalandexpression)
				p.SetState(929)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(930)
					p.Match(CPP14ParserT__2)
				}
				{
					p.SetState(931)
					p.inclusiveorexpression(0)
				}


			case 2:
				localctx = NewLogicalandexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_logicalandexpression)
				p.SetState(932)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(933)
					p.Match(CPP14ParserT__3)
				}
				{
					p.SetState(934)
					p.inclusiveorexpression(0)
				}

			}

		}
		p.SetState(939)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 68, p.GetParserRuleContext())
	}



	return localctx
}


// ILogicalorexpressionContext is an interface to support dynamic dispatch.
type ILogicalorexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalorexpressionContext differentiates from other interfaces.
	IsLogicalorexpressionContext()
}

type LogicalorexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalorexpressionContext() *LogicalorexpressionContext {
	var p = new(LogicalorexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_logicalorexpression
	return p
}

func (*LogicalorexpressionContext) IsLogicalorexpressionContext() {}

func NewLogicalorexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalorexpressionContext {
	var p = new(LogicalorexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_logicalorexpression

	return p
}

func (s *LogicalorexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalorexpressionContext) Logicalandexpression() ILogicalandexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalandexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalandexpressionContext)
}

func (s *LogicalorexpressionContext) Logicalorexpression() ILogicalorexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalorexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalorexpressionContext)
}

func (s *LogicalorexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalorexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *LogicalorexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterLogicalorexpression(s)
	}
}

func (s *LogicalorexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitLogicalorexpression(s)
	}
}

func (s *LogicalorexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitLogicalorexpression(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Logicalorexpression() (localctx ILogicalorexpressionContext) {
	return p.logicalorexpression(0)
}

func (p *CPP14Parser) logicalorexpression(_p int) (localctx ILogicalorexpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalorexpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalorexpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 84
	p.EnterRecursionRule(localctx, 84, CPP14ParserRULE_logicalorexpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(941)
		p.logicalandexpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(951)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(949)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 69, p.GetParserRuleContext()) {
			case 1:
				localctx = NewLogicalorexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_logicalorexpression)
				p.SetState(943)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(944)
					p.Match(CPP14ParserT__4)
				}
				{
					p.SetState(945)
					p.logicalandexpression(0)
				}


			case 2:
				localctx = NewLogicalorexpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_logicalorexpression)
				p.SetState(946)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(947)
					p.Match(CPP14ParserT__5)
				}
				{
					p.SetState(948)
					p.logicalandexpression(0)
				}

			}

		}
		p.SetState(953)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext())
	}



	return localctx
}


// IConditionalexpressionContext is an interface to support dynamic dispatch.
type IConditionalexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionalexpressionContext differentiates from other interfaces.
	IsConditionalexpressionContext()
}

type ConditionalexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionalexpressionContext() *ConditionalexpressionContext {
	var p = new(ConditionalexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_conditionalexpression
	return p
}

func (*ConditionalexpressionContext) IsConditionalexpressionContext() {}

func NewConditionalexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionalexpressionContext {
	var p = new(ConditionalexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_conditionalexpression

	return p
}

func (s *ConditionalexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionalexpressionContext) Logicalorexpression() ILogicalorexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalorexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalorexpressionContext)
}

func (s *ConditionalexpressionContext) Question() antlr.TerminalNode {
	return s.GetToken(CPP14ParserQuestion, 0)
}

func (s *ConditionalexpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConditionalexpressionContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *ConditionalexpressionContext) Assignmentexpression() IAssignmentexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentexpressionContext)
}

func (s *ConditionalexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ConditionalexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterConditionalexpression(s)
	}
}

func (s *ConditionalexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitConditionalexpression(s)
	}
}

func (s *ConditionalexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitConditionalexpression(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Conditionalexpression() (localctx IConditionalexpressionContext) {
	localctx = NewConditionalexpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, CPP14ParserRULE_conditionalexpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(961)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(954)
			p.logicalorexpression(0)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(955)
			p.logicalorexpression(0)
		}
		{
			p.SetState(956)
			p.Match(CPP14ParserQuestion)
		}
		{
			p.SetState(957)
			p.expression(0)
		}
		{
			p.SetState(958)
			p.Match(CPP14ParserColon)
		}
		{
			p.SetState(959)
			p.Assignmentexpression()
		}

	}


	return localctx
}


// IAssignmentexpressionContext is an interface to support dynamic dispatch.
type IAssignmentexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentexpressionContext differentiates from other interfaces.
	IsAssignmentexpressionContext()
}

type AssignmentexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentexpressionContext() *AssignmentexpressionContext {
	var p = new(AssignmentexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_assignmentexpression
	return p
}

func (*AssignmentexpressionContext) IsAssignmentexpressionContext() {}

func NewAssignmentexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentexpressionContext {
	var p = new(AssignmentexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_assignmentexpression

	return p
}

func (s *AssignmentexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentexpressionContext) Conditionalexpression() IConditionalexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionalexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionalexpressionContext)
}

func (s *AssignmentexpressionContext) Logicalorexpression() ILogicalorexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalorexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalorexpressionContext)
}

func (s *AssignmentexpressionContext) Assignmentoperator() IAssignmentoperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentoperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentoperatorContext)
}

func (s *AssignmentexpressionContext) Initializerclause() IInitializerclauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerclauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerclauseContext)
}

func (s *AssignmentexpressionContext) Throwexpression() IThrowexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrowexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrowexpressionContext)
}

func (s *AssignmentexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AssignmentexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterAssignmentexpression(s)
	}
}

func (s *AssignmentexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitAssignmentexpression(s)
	}
}

func (s *AssignmentexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitAssignmentexpression(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Assignmentexpression() (localctx IAssignmentexpressionContext) {
	localctx = NewAssignmentexpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, CPP14ParserRULE_assignmentexpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(969)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(963)
			p.Conditionalexpression()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(964)
			p.logicalorexpression(0)
		}
		{
			p.SetState(965)
			p.Assignmentoperator()
		}
		{
			p.SetState(966)
			p.Initializerclause()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(968)
			p.Throwexpression()
		}

	}


	return localctx
}


// IAssignmentoperatorContext is an interface to support dynamic dispatch.
type IAssignmentoperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentoperatorContext differentiates from other interfaces.
	IsAssignmentoperatorContext()
}

type AssignmentoperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentoperatorContext() *AssignmentoperatorContext {
	var p = new(AssignmentoperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_assignmentoperator
	return p
}

func (*AssignmentoperatorContext) IsAssignmentoperatorContext() {}

func NewAssignmentoperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentoperatorContext {
	var p = new(AssignmentoperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_assignmentoperator

	return p
}

func (s *AssignmentoperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentoperatorContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *AssignmentoperatorContext) StarAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStarAssign, 0)
}

func (s *AssignmentoperatorContext) DivAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDivAssign, 0)
}

func (s *AssignmentoperatorContext) ModAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserModAssign, 0)
}

func (s *AssignmentoperatorContext) PlusAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlusAssign, 0)
}

func (s *AssignmentoperatorContext) MinusAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinusAssign, 0)
}

func (s *AssignmentoperatorContext) RightShiftAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightShiftAssign, 0)
}

func (s *AssignmentoperatorContext) LeftShiftAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftShiftAssign, 0)
}

func (s *AssignmentoperatorContext) AndAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAndAssign, 0)
}

func (s *AssignmentoperatorContext) XorAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserXorAssign, 0)
}

func (s *AssignmentoperatorContext) OrAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOrAssign, 0)
}

func (s *AssignmentoperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentoperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AssignmentoperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterAssignmentoperator(s)
	}
}

func (s *AssignmentoperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitAssignmentoperator(s)
	}
}

func (s *AssignmentoperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitAssignmentoperator(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Assignmentoperator() (localctx IAssignmentoperatorContext) {
	localctx = NewAssignmentoperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, CPP14ParserRULE_assignmentoperator)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(971)
		_la = p.GetTokenStream().LA(1)

		if !(((((_la - 100)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 100))) & ((1 << (CPP14ParserAssign - 100)) | (1 << (CPP14ParserPlusAssign - 100)) | (1 << (CPP14ParserMinusAssign - 100)) | (1 << (CPP14ParserStarAssign - 100)) | (1 << (CPP14ParserDivAssign - 100)) | (1 << (CPP14ParserModAssign - 100)) | (1 << (CPP14ParserXorAssign - 100)) | (1 << (CPP14ParserAndAssign - 100)) | (1 << (CPP14ParserOrAssign - 100)) | (1 << (CPP14ParserLeftShiftAssign - 100)) | (1 << (CPP14ParserRightShiftAssign - 100)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) Assignmentexpression() IAssignmentexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentexpressionContext)
}

func (s *ExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitExpression(s)
	}
}

func (s *ExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitExpression(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *CPP14Parser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 92
	p.EnterRecursionRule(localctx, 92, CPP14ParserRULE_expression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(974)
		p.Assignmentexpression()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(981)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_expression)
			p.SetState(976)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(977)
				p.Match(CPP14ParserComma)
			}
			{
				p.SetState(978)
				p.Assignmentexpression()
			}


		}
		p.SetState(983)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext())
	}



	return localctx
}


// IConstantexpressionContext is an interface to support dynamic dispatch.
type IConstantexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstantexpressionContext differentiates from other interfaces.
	IsConstantexpressionContext()
}

type ConstantexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantexpressionContext() *ConstantexpressionContext {
	var p = new(ConstantexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_constantexpression
	return p
}

func (*ConstantexpressionContext) IsConstantexpressionContext() {}

func NewConstantexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantexpressionContext {
	var p = new(ConstantexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_constantexpression

	return p
}

func (s *ConstantexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantexpressionContext) Conditionalexpression() IConditionalexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionalexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionalexpressionContext)
}

func (s *ConstantexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ConstantexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterConstantexpression(s)
	}
}

func (s *ConstantexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitConstantexpression(s)
	}
}

func (s *ConstantexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitConstantexpression(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Constantexpression() (localctx IConstantexpressionContext) {
	localctx = NewConstantexpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, CPP14ParserRULE_constantexpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(984)
		p.Conditionalexpression()
	}



	return localctx
}


// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) Labeledstatement() ILabeledstatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabeledstatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabeledstatementContext)
}

func (s *StatementContext) Expressionstatement() IExpressionstatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionstatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionstatementContext)
}

func (s *StatementContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *StatementContext) Compoundstatement() ICompoundstatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompoundstatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompoundstatementContext)
}

func (s *StatementContext) Selectionstatement() ISelectionstatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectionstatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectionstatementContext)
}

func (s *StatementContext) Iterationstatement() IIterationstatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIterationstatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIterationstatementContext)
}

func (s *StatementContext) Jumpstatement() IJumpstatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJumpstatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJumpstatementContext)
}

func (s *StatementContext) Declarationstatement() IDeclarationstatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationstatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationstatementContext)
}

func (s *StatementContext) Tryblock() ITryblockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITryblockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITryblockContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitStatement(s)
	}
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, CPP14ParserRULE_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1012)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 80, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(986)
			p.Labeledstatement()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(988)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(987)
				p.attributespecifierseq(0)
			}


		}
		{
			p.SetState(990)
			p.Expressionstatement()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(992)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(991)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(994)
			p.Compoundstatement()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(996)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(995)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(998)
			p.Selectionstatement()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(1000)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(999)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(1002)
			p.Iterationstatement()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		p.SetState(1004)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1003)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(1006)
			p.Jumpstatement()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1007)
			p.Declarationstatement()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		p.SetState(1009)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1008)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(1011)
			p.Tryblock()
		}

	}


	return localctx
}


// ILabeledstatementContext is an interface to support dynamic dispatch.
type ILabeledstatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabeledstatementContext differentiates from other interfaces.
	IsLabeledstatementContext()
}

type LabeledstatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabeledstatementContext() *LabeledstatementContext {
	var p = new(LabeledstatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_labeledstatement
	return p
}

func (*LabeledstatementContext) IsLabeledstatementContext() {}

func NewLabeledstatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabeledstatementContext {
	var p = new(LabeledstatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_labeledstatement

	return p
}

func (s *LabeledstatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LabeledstatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *LabeledstatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *LabeledstatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *LabeledstatementContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *LabeledstatementContext) Case() antlr.TerminalNode {
	return s.GetToken(CPP14ParserCase, 0)
}

func (s *LabeledstatementContext) Constantexpression() IConstantexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantexpressionContext)
}

func (s *LabeledstatementContext) Default() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDefault, 0)
}

func (s *LabeledstatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabeledstatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *LabeledstatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterLabeledstatement(s)
	}
}

func (s *LabeledstatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitLabeledstatement(s)
	}
}

func (s *LabeledstatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitLabeledstatement(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Labeledstatement() (localctx ILabeledstatementContext) {
	localctx = NewLabeledstatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, CPP14ParserRULE_labeledstatement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1034)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1015)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1014)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(1017)
			p.Match(CPP14ParserIdentifier)
		}
		{
			p.SetState(1018)
			p.Match(CPP14ParserColon)
		}
		{
			p.SetState(1019)
			p.Statement()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1021)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1020)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(1023)
			p.Match(CPP14ParserCase)
		}
		{
			p.SetState(1024)
			p.Constantexpression()
		}
		{
			p.SetState(1025)
			p.Match(CPP14ParserColon)
		}
		{
			p.SetState(1026)
			p.Statement()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1029)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1028)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(1031)
			p.Match(CPP14ParserDefault)
		}
		{
			p.SetState(1032)
			p.Match(CPP14ParserColon)
		}
		{
			p.SetState(1033)
			p.Statement()
		}

	}


	return localctx
}


// IExpressionstatementContext is an interface to support dynamic dispatch.
type IExpressionstatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionstatementContext differentiates from other interfaces.
	IsExpressionstatementContext()
}

type ExpressionstatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionstatementContext() *ExpressionstatementContext {
	var p = new(ExpressionstatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_expressionstatement
	return p
}

func (*ExpressionstatementContext) IsExpressionstatementContext() {}

func NewExpressionstatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionstatementContext {
	var p = new(ExpressionstatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_expressionstatement

	return p
}

func (s *ExpressionstatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionstatementContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *ExpressionstatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionstatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionstatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ExpressionstatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterExpressionstatement(s)
	}
}

func (s *ExpressionstatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitExpressionstatement(s)
	}
}

func (s *ExpressionstatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitExpressionstatement(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Expressionstatement() (localctx IExpressionstatementContext) {
	localctx = NewExpressionstatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, CPP14ParserRULE_expressionstatement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1037)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << CPP14ParserT__0) | (1 << CPP14ParserT__1) | (1 << CPP14ParserAlignof) | (1 << CPP14ParserAuto) | (1 << CPP14ParserBool) | (1 << CPP14ParserChar) | (1 << CPP14ParserChar16) | (1 << CPP14ParserChar32) | (1 << CPP14ParserConst_cast) | (1 << CPP14ParserDecltype) | (1 << CPP14ParserDelete) | (1 << CPP14ParserDouble) | (1 << CPP14ParserDynamic_cast))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (CPP14ParserFalse - 36)) | (1 << (CPP14ParserFloat - 36)) | (1 << (CPP14ParserInt - 36)) | (1 << (CPP14ParserLong - 36)) | (1 << (CPP14ParserNew - 36)) | (1 << (CPP14ParserNoexcept - 36)) | (1 << (CPP14ParserNullptr - 36)) | (1 << (CPP14ParserOperator - 36)) | (1 << (CPP14ParserReinterpret_cast - 36)) | (1 << (CPP14ParserShort - 36)) | (1 << (CPP14ParserSigned - 36)) | (1 << (CPP14ParserSizeof - 36)) | (1 << (CPP14ParserStatic_cast - 36)))) != 0) || ((((_la - 68)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 68))) & ((1 << (CPP14ParserThis - 68)) | (1 << (CPP14ParserThrow - 68)) | (1 << (CPP14ParserTrue - 68)) | (1 << (CPP14ParserTypeid_ - 68)) | (1 << (CPP14ParserTypename_ - 68)) | (1 << (CPP14ParserUnsigned - 68)) | (1 << (CPP14ParserVoid - 68)) | (1 << (CPP14ParserWchar - 68)) | (1 << (CPP14ParserLeftParen - 68)) | (1 << (CPP14ParserLeftBracket - 68)) | (1 << (CPP14ParserPlus - 68)) | (1 << (CPP14ParserMinus - 68)) | (1 << (CPP14ParserStar - 68)) | (1 << (CPP14ParserAnd - 68)) | (1 << (CPP14ParserOr - 68)) | (1 << (CPP14ParserTilde - 68)))) != 0) || ((((_la - 121)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 121))) & ((1 << (CPP14ParserPlusPlus - 121)) | (1 << (CPP14ParserMinusMinus - 121)) | (1 << (CPP14ParserDoublecolon - 121)) | (1 << (CPP14ParserIdentifier - 121)) | (1 << (CPP14ParserIntegerliteral - 121)) | (1 << (CPP14ParserCharacterliteral - 121)) | (1 << (CPP14ParserFloatingliteral - 121)) | (1 << (CPP14ParserStringliteral - 121)) | (1 << (CPP14ParserUserdefinedintegerliteral - 121)) | (1 << (CPP14ParserUserdefinedfloatingliteral - 121)) | (1 << (CPP14ParserUserdefinedstringliteral - 121)) | (1 << (CPP14ParserUserdefinedcharacterliteral - 121)))) != 0) {
		{
			p.SetState(1036)
			p.expression(0)
		}

	}
	{
		p.SetState(1039)
		p.Match(CPP14ParserSemi)
	}



	return localctx
}


// ICompoundstatementContext is an interface to support dynamic dispatch.
type ICompoundstatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompoundstatementContext differentiates from other interfaces.
	IsCompoundstatementContext()
}

type CompoundstatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompoundstatementContext() *CompoundstatementContext {
	var p = new(CompoundstatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_compoundstatement
	return p
}

func (*CompoundstatementContext) IsCompoundstatementContext() {}

func NewCompoundstatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompoundstatementContext {
	var p = new(CompoundstatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_compoundstatement

	return p
}

func (s *CompoundstatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CompoundstatementContext) LeftBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, 0)
}

func (s *CompoundstatementContext) RightBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, 0)
}

func (s *CompoundstatementContext) Statementseq() IStatementseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementseqContext)
}

func (s *CompoundstatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompoundstatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *CompoundstatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterCompoundstatement(s)
	}
}

func (s *CompoundstatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitCompoundstatement(s)
	}
}

func (s *CompoundstatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitCompoundstatement(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Compoundstatement() (localctx ICompoundstatementContext) {
	localctx = NewCompoundstatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, CPP14ParserRULE_compoundstatement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1041)
		p.Match(CPP14ParserLeftBrace)
	}
	p.SetState(1043)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << CPP14ParserT__0) | (1 << CPP14ParserT__1) | (1 << CPP14ParserT__2) | (1 << CPP14ParserAlignas) | (1 << CPP14ParserAlignof) | (1 << CPP14ParserAsm) | (1 << CPP14ParserAuto) | (1 << CPP14ParserBool) | (1 << CPP14ParserBreak) | (1 << CPP14ParserCase) | (1 << CPP14ParserChar) | (1 << CPP14ParserChar16) | (1 << CPP14ParserChar32) | (1 << CPP14ParserClass) | (1 << CPP14ParserConst) | (1 << CPP14ParserConstexpr) | (1 << CPP14ParserConst_cast) | (1 << CPP14ParserContinue) | (1 << CPP14ParserDecltype) | (1 << CPP14ParserDefault) | (1 << CPP14ParserDelete) | (1 << CPP14ParserDo) | (1 << CPP14ParserDouble) | (1 << CPP14ParserDynamic_cast))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (CPP14ParserEnum - 32)) | (1 << (CPP14ParserExplicit - 32)) | (1 << (CPP14ParserExtern - 32)) | (1 << (CPP14ParserFalse - 32)) | (1 << (CPP14ParserFloat - 32)) | (1 << (CPP14ParserFor - 32)) | (1 << (CPP14ParserFriend - 32)) | (1 << (CPP14ParserGoto - 32)) | (1 << (CPP14ParserIf - 32)) | (1 << (CPP14ParserInline - 32)) | (1 << (CPP14ParserInt - 32)) | (1 << (CPP14ParserLong - 32)) | (1 << (CPP14ParserMutable - 32)) | (1 << (CPP14ParserNamespace - 32)) | (1 << (CPP14ParserNew - 32)) | (1 << (CPP14ParserNoexcept - 32)) | (1 << (CPP14ParserNullptr - 32)) | (1 << (CPP14ParserOperator - 32)) | (1 << (CPP14ParserRegister - 32)) | (1 << (CPP14ParserReinterpret_cast - 32)) | (1 << (CPP14ParserReturn - 32)) | (1 << (CPP14ParserShort - 32)) | (1 << (CPP14ParserSigned - 32)) | (1 << (CPP14ParserSizeof - 32)) | (1 << (CPP14ParserStatic - 32)) | (1 << (CPP14ParserStatic_assert - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (CPP14ParserStatic_cast - 64)) | (1 << (CPP14ParserStruct - 64)) | (1 << (CPP14ParserSwitch - 64)) | (1 << (CPP14ParserThis - 64)) | (1 << (CPP14ParserThread_local - 64)) | (1 << (CPP14ParserThrow - 64)) | (1 << (CPP14ParserTrue - 64)) | (1 << (CPP14ParserTry - 64)) | (1 << (CPP14ParserTypedef - 64)) | (1 << (CPP14ParserTypeid_ - 64)) | (1 << (CPP14ParserTypename_ - 64)) | (1 << (CPP14ParserUnion - 64)) | (1 << (CPP14ParserUnsigned - 64)) | (1 << (CPP14ParserUsing - 64)) | (1 << (CPP14ParserVirtual - 64)) | (1 << (CPP14ParserVoid - 64)) | (1 << (CPP14ParserVolatile - 64)) | (1 << (CPP14ParserWchar - 64)) | (1 << (CPP14ParserWhile - 64)) | (1 << (CPP14ParserLeftParen - 64)) | (1 << (CPP14ParserLeftBracket - 64)) | (1 << (CPP14ParserLeftBrace - 64)) | (1 << (CPP14ParserPlus - 64)) | (1 << (CPP14ParserMinus - 64)) | (1 << (CPP14ParserStar - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (CPP14ParserAnd - 96)) | (1 << (CPP14ParserOr - 96)) | (1 << (CPP14ParserTilde - 96)) | (1 << (CPP14ParserPlusPlus - 96)) | (1 << (CPP14ParserMinusMinus - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (CPP14ParserDoublecolon - 128)) | (1 << (CPP14ParserSemi - 128)) | (1 << (CPP14ParserEllipsis - 128)) | (1 << (CPP14ParserIdentifier - 128)) | (1 << (CPP14ParserIntegerliteral - 128)) | (1 << (CPP14ParserCharacterliteral - 128)) | (1 << (CPP14ParserFloatingliteral - 128)) | (1 << (CPP14ParserStringliteral - 128)) | (1 << (CPP14ParserUserdefinedintegerliteral - 128)) | (1 << (CPP14ParserUserdefinedfloatingliteral - 128)) | (1 << (CPP14ParserUserdefinedstringliteral - 128)) | (1 << (CPP14ParserUserdefinedcharacterliteral - 128)))) != 0) {
		{
			p.SetState(1042)
			p.statementseq(0)
		}

	}
	{
		p.SetState(1045)
		p.Match(CPP14ParserRightBrace)
	}



	return localctx
}


// IStatementseqContext is an interface to support dynamic dispatch.
type IStatementseqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementseqContext differentiates from other interfaces.
	IsStatementseqContext()
}

type StatementseqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementseqContext() *StatementseqContext {
	var p = new(StatementseqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_statementseq
	return p
}

func (*StatementseqContext) IsStatementseqContext() {}

func NewStatementseqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementseqContext {
	var p = new(StatementseqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_statementseq

	return p
}

func (s *StatementseqContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementseqContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *StatementseqContext) Statementseq() IStatementseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementseqContext)
}

func (s *StatementseqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementseqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *StatementseqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterStatementseq(s)
	}
}

func (s *StatementseqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitStatementseq(s)
	}
}

func (s *StatementseqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitStatementseq(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Statementseq() (localctx IStatementseqContext) {
	return p.statementseq(0)
}

func (p *CPP14Parser) statementseq(_p int) (localctx IStatementseqContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewStatementseqContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IStatementseqContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 104
	p.EnterRecursionRule(localctx, 104, CPP14ParserRULE_statementseq, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1048)
		p.Statement()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1054)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewStatementseqContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_statementseq)
			p.SetState(1050)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(1051)
				p.Statement()
			}


		}
		p.SetState(1056)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext())
	}



	return localctx
}


// ISelectionstatementContext is an interface to support dynamic dispatch.
type ISelectionstatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectionstatementContext differentiates from other interfaces.
	IsSelectionstatementContext()
}

type SelectionstatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectionstatementContext() *SelectionstatementContext {
	var p = new(SelectionstatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_selectionstatement
	return p
}

func (*SelectionstatementContext) IsSelectionstatementContext() {}

func NewSelectionstatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectionstatementContext {
	var p = new(SelectionstatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_selectionstatement

	return p
}

func (s *SelectionstatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectionstatementContext) If() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIf, 0)
}

func (s *SelectionstatementContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *SelectionstatementContext) Condition() IConditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionContext)
}

func (s *SelectionstatementContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *SelectionstatementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *SelectionstatementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *SelectionstatementContext) Else() antlr.TerminalNode {
	return s.GetToken(CPP14ParserElse, 0)
}

func (s *SelectionstatementContext) Switch() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSwitch, 0)
}

func (s *SelectionstatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectionstatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *SelectionstatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterSelectionstatement(s)
	}
}

func (s *SelectionstatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitSelectionstatement(s)
	}
}

func (s *SelectionstatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitSelectionstatement(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Selectionstatement() (localctx ISelectionstatementContext) {
	localctx = NewSelectionstatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, CPP14ParserRULE_selectionstatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1077)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1057)
			p.Match(CPP14ParserIf)
		}
		{
			p.SetState(1058)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(1059)
			p.Condition()
		}
		{
			p.SetState(1060)
			p.Match(CPP14ParserRightParen)
		}
		{
			p.SetState(1061)
			p.Statement()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1063)
			p.Match(CPP14ParserIf)
		}
		{
			p.SetState(1064)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(1065)
			p.Condition()
		}
		{
			p.SetState(1066)
			p.Match(CPP14ParserRightParen)
		}
		{
			p.SetState(1067)
			p.Statement()
		}
		{
			p.SetState(1068)
			p.Match(CPP14ParserElse)
		}
		{
			p.SetState(1069)
			p.Statement()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1071)
			p.Match(CPP14ParserSwitch)
		}
		{
			p.SetState(1072)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(1073)
			p.Condition()
		}
		{
			p.SetState(1074)
			p.Match(CPP14ParserRightParen)
		}
		{
			p.SetState(1075)
			p.Statement()
		}

	}


	return localctx
}


// IConditionContext is an interface to support dynamic dispatch.
type IConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionContext differentiates from other interfaces.
	IsConditionContext()
}

type ConditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionContext() *ConditionContext {
	var p = new(ConditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_condition
	return p
}

func (*ConditionContext) IsConditionContext() {}

func NewConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionContext {
	var p = new(ConditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_condition

	return p
}

func (s *ConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConditionContext) Declspecifierseq() IDeclspecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclspecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclspecifierseqContext)
}

func (s *ConditionContext) Declarator() IDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *ConditionContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *ConditionContext) Initializerclause() IInitializerclauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerclauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerclauseContext)
}

func (s *ConditionContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *ConditionContext) Bracedinitlist() IBracedinitlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBracedinitlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBracedinitlistContext)
}

func (s *ConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ConditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterCondition(s)
	}
}

func (s *ConditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitCondition(s)
	}
}

func (s *ConditionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitCondition(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Condition() (localctx IConditionContext) {
	localctx = NewConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, CPP14ParserRULE_condition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1095)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 91, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1079)
			p.expression(0)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1081)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1080)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(1083)
			p.Declspecifierseq()
		}
		{
			p.SetState(1084)
			p.Declarator()
		}
		{
			p.SetState(1085)
			p.Match(CPP14ParserAssign)
		}
		{
			p.SetState(1086)
			p.Initializerclause()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1089)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1088)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(1091)
			p.Declspecifierseq()
		}
		{
			p.SetState(1092)
			p.Declarator()
		}
		{
			p.SetState(1093)
			p.Bracedinitlist()
		}

	}


	return localctx
}


// IIterationstatementContext is an interface to support dynamic dispatch.
type IIterationstatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIterationstatementContext differentiates from other interfaces.
	IsIterationstatementContext()
}

type IterationstatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIterationstatementContext() *IterationstatementContext {
	var p = new(IterationstatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_iterationstatement
	return p
}

func (*IterationstatementContext) IsIterationstatementContext() {}

func NewIterationstatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IterationstatementContext {
	var p = new(IterationstatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_iterationstatement

	return p
}

func (s *IterationstatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IterationstatementContext) While() antlr.TerminalNode {
	return s.GetToken(CPP14ParserWhile, 0)
}

func (s *IterationstatementContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *IterationstatementContext) Condition() IConditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionContext)
}

func (s *IterationstatementContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *IterationstatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *IterationstatementContext) Do() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDo, 0)
}

func (s *IterationstatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IterationstatementContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *IterationstatementContext) For() antlr.TerminalNode {
	return s.GetToken(CPP14ParserFor, 0)
}

func (s *IterationstatementContext) Forinitstatement() IForinitstatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForinitstatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForinitstatementContext)
}

func (s *IterationstatementContext) Forrangedeclaration() IForrangedeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForrangedeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForrangedeclarationContext)
}

func (s *IterationstatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *IterationstatementContext) Forrangeinitializer() IForrangeinitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForrangeinitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForrangeinitializerContext)
}

func (s *IterationstatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IterationstatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *IterationstatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterIterationstatement(s)
	}
}

func (s *IterationstatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitIterationstatement(s)
	}
}

func (s *IterationstatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitIterationstatement(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Iterationstatement() (localctx IIterationstatementContext) {
	localctx = NewIterationstatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, CPP14ParserRULE_iterationstatement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1132)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 94, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1097)
			p.Match(CPP14ParserWhile)
		}
		{
			p.SetState(1098)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(1099)
			p.Condition()
		}
		{
			p.SetState(1100)
			p.Match(CPP14ParserRightParen)
		}
		{
			p.SetState(1101)
			p.Statement()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1103)
			p.Match(CPP14ParserDo)
		}
		{
			p.SetState(1104)
			p.Statement()
		}
		{
			p.SetState(1105)
			p.Match(CPP14ParserWhile)
		}
		{
			p.SetState(1106)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(1107)
			p.expression(0)
		}
		{
			p.SetState(1108)
			p.Match(CPP14ParserRightParen)
		}
		{
			p.SetState(1109)
			p.Match(CPP14ParserSemi)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1111)
			p.Match(CPP14ParserFor)
		}
		{
			p.SetState(1112)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(1113)
			p.Forinitstatement()
		}
		p.SetState(1115)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << CPP14ParserT__0) | (1 << CPP14ParserT__1) | (1 << CPP14ParserAlignas) | (1 << CPP14ParserAlignof) | (1 << CPP14ParserAuto) | (1 << CPP14ParserBool) | (1 << CPP14ParserChar) | (1 << CPP14ParserChar16) | (1 << CPP14ParserChar32) | (1 << CPP14ParserClass) | (1 << CPP14ParserConst) | (1 << CPP14ParserConstexpr) | (1 << CPP14ParserConst_cast) | (1 << CPP14ParserDecltype) | (1 << CPP14ParserDelete) | (1 << CPP14ParserDouble) | (1 << CPP14ParserDynamic_cast))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (CPP14ParserEnum - 32)) | (1 << (CPP14ParserExplicit - 32)) | (1 << (CPP14ParserExtern - 32)) | (1 << (CPP14ParserFalse - 32)) | (1 << (CPP14ParserFloat - 32)) | (1 << (CPP14ParserFriend - 32)) | (1 << (CPP14ParserInline - 32)) | (1 << (CPP14ParserInt - 32)) | (1 << (CPP14ParserLong - 32)) | (1 << (CPP14ParserMutable - 32)) | (1 << (CPP14ParserNew - 32)) | (1 << (CPP14ParserNoexcept - 32)) | (1 << (CPP14ParserNullptr - 32)) | (1 << (CPP14ParserOperator - 32)) | (1 << (CPP14ParserRegister - 32)) | (1 << (CPP14ParserReinterpret_cast - 32)) | (1 << (CPP14ParserShort - 32)) | (1 << (CPP14ParserSigned - 32)) | (1 << (CPP14ParserSizeof - 32)) | (1 << (CPP14ParserStatic - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (CPP14ParserStatic_cast - 64)) | (1 << (CPP14ParserStruct - 64)) | (1 << (CPP14ParserThis - 64)) | (1 << (CPP14ParserThread_local - 64)) | (1 << (CPP14ParserThrow - 64)) | (1 << (CPP14ParserTrue - 64)) | (1 << (CPP14ParserTypedef - 64)) | (1 << (CPP14ParserTypeid_ - 64)) | (1 << (CPP14ParserTypename_ - 64)) | (1 << (CPP14ParserUnion - 64)) | (1 << (CPP14ParserUnsigned - 64)) | (1 << (CPP14ParserVirtual - 64)) | (1 << (CPP14ParserVoid - 64)) | (1 << (CPP14ParserVolatile - 64)) | (1 << (CPP14ParserWchar - 64)) | (1 << (CPP14ParserLeftParen - 64)) | (1 << (CPP14ParserLeftBracket - 64)) | (1 << (CPP14ParserPlus - 64)) | (1 << (CPP14ParserMinus - 64)) | (1 << (CPP14ParserStar - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (CPP14ParserAnd - 96)) | (1 << (CPP14ParserOr - 96)) | (1 << (CPP14ParserTilde - 96)) | (1 << (CPP14ParserPlusPlus - 96)) | (1 << (CPP14ParserMinusMinus - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (CPP14ParserDoublecolon - 128)) | (1 << (CPP14ParserIdentifier - 128)) | (1 << (CPP14ParserIntegerliteral - 128)) | (1 << (CPP14ParserCharacterliteral - 128)) | (1 << (CPP14ParserFloatingliteral - 128)) | (1 << (CPP14ParserStringliteral - 128)) | (1 << (CPP14ParserUserdefinedintegerliteral - 128)) | (1 << (CPP14ParserUserdefinedfloatingliteral - 128)) | (1 << (CPP14ParserUserdefinedstringliteral - 128)) | (1 << (CPP14ParserUserdefinedcharacterliteral - 128)))) != 0) {
			{
				p.SetState(1114)
				p.Condition()
			}

		}
		{
			p.SetState(1117)
			p.Match(CPP14ParserSemi)
		}
		p.SetState(1119)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << CPP14ParserT__0) | (1 << CPP14ParserT__1) | (1 << CPP14ParserAlignof) | (1 << CPP14ParserAuto) | (1 << CPP14ParserBool) | (1 << CPP14ParserChar) | (1 << CPP14ParserChar16) | (1 << CPP14ParserChar32) | (1 << CPP14ParserConst_cast) | (1 << CPP14ParserDecltype) | (1 << CPP14ParserDelete) | (1 << CPP14ParserDouble) | (1 << CPP14ParserDynamic_cast))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (CPP14ParserFalse - 36)) | (1 << (CPP14ParserFloat - 36)) | (1 << (CPP14ParserInt - 36)) | (1 << (CPP14ParserLong - 36)) | (1 << (CPP14ParserNew - 36)) | (1 << (CPP14ParserNoexcept - 36)) | (1 << (CPP14ParserNullptr - 36)) | (1 << (CPP14ParserOperator - 36)) | (1 << (CPP14ParserReinterpret_cast - 36)) | (1 << (CPP14ParserShort - 36)) | (1 << (CPP14ParserSigned - 36)) | (1 << (CPP14ParserSizeof - 36)) | (1 << (CPP14ParserStatic_cast - 36)))) != 0) || ((((_la - 68)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 68))) & ((1 << (CPP14ParserThis - 68)) | (1 << (CPP14ParserThrow - 68)) | (1 << (CPP14ParserTrue - 68)) | (1 << (CPP14ParserTypeid_ - 68)) | (1 << (CPP14ParserTypename_ - 68)) | (1 << (CPP14ParserUnsigned - 68)) | (1 << (CPP14ParserVoid - 68)) | (1 << (CPP14ParserWchar - 68)) | (1 << (CPP14ParserLeftParen - 68)) | (1 << (CPP14ParserLeftBracket - 68)) | (1 << (CPP14ParserPlus - 68)) | (1 << (CPP14ParserMinus - 68)) | (1 << (CPP14ParserStar - 68)) | (1 << (CPP14ParserAnd - 68)) | (1 << (CPP14ParserOr - 68)) | (1 << (CPP14ParserTilde - 68)))) != 0) || ((((_la - 121)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 121))) & ((1 << (CPP14ParserPlusPlus - 121)) | (1 << (CPP14ParserMinusMinus - 121)) | (1 << (CPP14ParserDoublecolon - 121)) | (1 << (CPP14ParserIdentifier - 121)) | (1 << (CPP14ParserIntegerliteral - 121)) | (1 << (CPP14ParserCharacterliteral - 121)) | (1 << (CPP14ParserFloatingliteral - 121)) | (1 << (CPP14ParserStringliteral - 121)) | (1 << (CPP14ParserUserdefinedintegerliteral - 121)) | (1 << (CPP14ParserUserdefinedfloatingliteral - 121)) | (1 << (CPP14ParserUserdefinedstringliteral - 121)) | (1 << (CPP14ParserUserdefinedcharacterliteral - 121)))) != 0) {
			{
				p.SetState(1118)
				p.expression(0)
			}

		}
		{
			p.SetState(1121)
			p.Match(CPP14ParserRightParen)
		}
		{
			p.SetState(1122)
			p.Statement()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1124)
			p.Match(CPP14ParserFor)
		}
		{
			p.SetState(1125)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(1126)
			p.Forrangedeclaration()
		}
		{
			p.SetState(1127)
			p.Match(CPP14ParserColon)
		}
		{
			p.SetState(1128)
			p.Forrangeinitializer()
		}
		{
			p.SetState(1129)
			p.Match(CPP14ParserRightParen)
		}
		{
			p.SetState(1130)
			p.Statement()
		}

	}


	return localctx
}


// IForinitstatementContext is an interface to support dynamic dispatch.
type IForinitstatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForinitstatementContext differentiates from other interfaces.
	IsForinitstatementContext()
}

type ForinitstatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForinitstatementContext() *ForinitstatementContext {
	var p = new(ForinitstatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_forinitstatement
	return p
}

func (*ForinitstatementContext) IsForinitstatementContext() {}

func NewForinitstatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForinitstatementContext {
	var p = new(ForinitstatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_forinitstatement

	return p
}

func (s *ForinitstatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ForinitstatementContext) Expressionstatement() IExpressionstatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionstatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionstatementContext)
}

func (s *ForinitstatementContext) Simpledeclaration() ISimpledeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpledeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpledeclarationContext)
}

func (s *ForinitstatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForinitstatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ForinitstatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterForinitstatement(s)
	}
}

func (s *ForinitstatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitForinitstatement(s)
	}
}

func (s *ForinitstatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitForinitstatement(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Forinitstatement() (localctx IForinitstatementContext) {
	localctx = NewForinitstatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, CPP14ParserRULE_forinitstatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1136)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1134)
			p.Expressionstatement()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1135)
			p.Simpledeclaration()
		}

	}


	return localctx
}


// IForrangedeclarationContext is an interface to support dynamic dispatch.
type IForrangedeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForrangedeclarationContext differentiates from other interfaces.
	IsForrangedeclarationContext()
}

type ForrangedeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForrangedeclarationContext() *ForrangedeclarationContext {
	var p = new(ForrangedeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_forrangedeclaration
	return p
}

func (*ForrangedeclarationContext) IsForrangedeclarationContext() {}

func NewForrangedeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForrangedeclarationContext {
	var p = new(ForrangedeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_forrangedeclaration

	return p
}

func (s *ForrangedeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ForrangedeclarationContext) Declspecifierseq() IDeclspecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclspecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclspecifierseqContext)
}

func (s *ForrangedeclarationContext) Declarator() IDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *ForrangedeclarationContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *ForrangedeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForrangedeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ForrangedeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterForrangedeclaration(s)
	}
}

func (s *ForrangedeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitForrangedeclaration(s)
	}
}

func (s *ForrangedeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitForrangedeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Forrangedeclaration() (localctx IForrangedeclarationContext) {
	localctx = NewForrangedeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, CPP14ParserRULE_forrangedeclaration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1139)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(1138)
			p.attributespecifierseq(0)
		}

	}
	{
		p.SetState(1141)
		p.Declspecifierseq()
	}
	{
		p.SetState(1142)
		p.Declarator()
	}



	return localctx
}


// IForrangeinitializerContext is an interface to support dynamic dispatch.
type IForrangeinitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForrangeinitializerContext differentiates from other interfaces.
	IsForrangeinitializerContext()
}

type ForrangeinitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForrangeinitializerContext() *ForrangeinitializerContext {
	var p = new(ForrangeinitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_forrangeinitializer
	return p
}

func (*ForrangeinitializerContext) IsForrangeinitializerContext() {}

func NewForrangeinitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForrangeinitializerContext {
	var p = new(ForrangeinitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_forrangeinitializer

	return p
}

func (s *ForrangeinitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *ForrangeinitializerContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForrangeinitializerContext) Bracedinitlist() IBracedinitlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBracedinitlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBracedinitlistContext)
}

func (s *ForrangeinitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForrangeinitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ForrangeinitializerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterForrangeinitializer(s)
	}
}

func (s *ForrangeinitializerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitForrangeinitializer(s)
	}
}

func (s *ForrangeinitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitForrangeinitializer(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Forrangeinitializer() (localctx IForrangeinitializerContext) {
	localctx = NewForrangeinitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, CPP14ParserRULE_forrangeinitializer)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1146)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserT__0, CPP14ParserT__1, CPP14ParserAlignof, CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserConst_cast, CPP14ParserDecltype, CPP14ParserDelete, CPP14ParserDouble, CPP14ParserDynamic_cast, CPP14ParserFalse, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserNew, CPP14ParserNoexcept, CPP14ParserNullptr, CPP14ParserOperator, CPP14ParserReinterpret_cast, CPP14ParserShort, CPP14ParserSigned, CPP14ParserSizeof, CPP14ParserStatic_cast, CPP14ParserThis, CPP14ParserThrow, CPP14ParserTrue, CPP14ParserTypeid_, CPP14ParserTypename_, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserWchar, CPP14ParserLeftParen, CPP14ParserLeftBracket, CPP14ParserPlus, CPP14ParserMinus, CPP14ParserStar, CPP14ParserAnd, CPP14ParserOr, CPP14ParserTilde, CPP14ParserPlusPlus, CPP14ParserMinusMinus, CPP14ParserDoublecolon, CPP14ParserIdentifier, CPP14ParserIntegerliteral, CPP14ParserCharacterliteral, CPP14ParserFloatingliteral, CPP14ParserStringliteral, CPP14ParserUserdefinedintegerliteral, CPP14ParserUserdefinedfloatingliteral, CPP14ParserUserdefinedstringliteral, CPP14ParserUserdefinedcharacterliteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1144)
			p.expression(0)
		}


	case CPP14ParserLeftBrace:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1145)
			p.Bracedinitlist()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IJumpstatementContext is an interface to support dynamic dispatch.
type IJumpstatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJumpstatementContext differentiates from other interfaces.
	IsJumpstatementContext()
}

type JumpstatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJumpstatementContext() *JumpstatementContext {
	var p = new(JumpstatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_jumpstatement
	return p
}

func (*JumpstatementContext) IsJumpstatementContext() {}

func NewJumpstatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JumpstatementContext {
	var p = new(JumpstatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_jumpstatement

	return p
}

func (s *JumpstatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JumpstatementContext) Break() antlr.TerminalNode {
	return s.GetToken(CPP14ParserBreak, 0)
}

func (s *JumpstatementContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *JumpstatementContext) Continue() antlr.TerminalNode {
	return s.GetToken(CPP14ParserContinue, 0)
}

func (s *JumpstatementContext) Return() antlr.TerminalNode {
	return s.GetToken(CPP14ParserReturn, 0)
}

func (s *JumpstatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JumpstatementContext) Bracedinitlist() IBracedinitlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBracedinitlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBracedinitlistContext)
}

func (s *JumpstatementContext) Goto() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGoto, 0)
}

func (s *JumpstatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *JumpstatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JumpstatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *JumpstatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterJumpstatement(s)
	}
}

func (s *JumpstatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitJumpstatement(s)
	}
}

func (s *JumpstatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitJumpstatement(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Jumpstatement() (localctx IJumpstatementContext) {
	localctx = NewJumpstatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, CPP14ParserRULE_jumpstatement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1164)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1148)
			p.Match(CPP14ParserBreak)
		}
		{
			p.SetState(1149)
			p.Match(CPP14ParserSemi)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1150)
			p.Match(CPP14ParserContinue)
		}
		{
			p.SetState(1151)
			p.Match(CPP14ParserSemi)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1152)
			p.Match(CPP14ParserReturn)
		}
		p.SetState(1154)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << CPP14ParserT__0) | (1 << CPP14ParserT__1) | (1 << CPP14ParserAlignof) | (1 << CPP14ParserAuto) | (1 << CPP14ParserBool) | (1 << CPP14ParserChar) | (1 << CPP14ParserChar16) | (1 << CPP14ParserChar32) | (1 << CPP14ParserConst_cast) | (1 << CPP14ParserDecltype) | (1 << CPP14ParserDelete) | (1 << CPP14ParserDouble) | (1 << CPP14ParserDynamic_cast))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (CPP14ParserFalse - 36)) | (1 << (CPP14ParserFloat - 36)) | (1 << (CPP14ParserInt - 36)) | (1 << (CPP14ParserLong - 36)) | (1 << (CPP14ParserNew - 36)) | (1 << (CPP14ParserNoexcept - 36)) | (1 << (CPP14ParserNullptr - 36)) | (1 << (CPP14ParserOperator - 36)) | (1 << (CPP14ParserReinterpret_cast - 36)) | (1 << (CPP14ParserShort - 36)) | (1 << (CPP14ParserSigned - 36)) | (1 << (CPP14ParserSizeof - 36)) | (1 << (CPP14ParserStatic_cast - 36)))) != 0) || ((((_la - 68)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 68))) & ((1 << (CPP14ParserThis - 68)) | (1 << (CPP14ParserThrow - 68)) | (1 << (CPP14ParserTrue - 68)) | (1 << (CPP14ParserTypeid_ - 68)) | (1 << (CPP14ParserTypename_ - 68)) | (1 << (CPP14ParserUnsigned - 68)) | (1 << (CPP14ParserVoid - 68)) | (1 << (CPP14ParserWchar - 68)) | (1 << (CPP14ParserLeftParen - 68)) | (1 << (CPP14ParserLeftBracket - 68)) | (1 << (CPP14ParserPlus - 68)) | (1 << (CPP14ParserMinus - 68)) | (1 << (CPP14ParserStar - 68)) | (1 << (CPP14ParserAnd - 68)) | (1 << (CPP14ParserOr - 68)) | (1 << (CPP14ParserTilde - 68)))) != 0) || ((((_la - 121)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 121))) & ((1 << (CPP14ParserPlusPlus - 121)) | (1 << (CPP14ParserMinusMinus - 121)) | (1 << (CPP14ParserDoublecolon - 121)) | (1 << (CPP14ParserIdentifier - 121)) | (1 << (CPP14ParserIntegerliteral - 121)) | (1 << (CPP14ParserCharacterliteral - 121)) | (1 << (CPP14ParserFloatingliteral - 121)) | (1 << (CPP14ParserStringliteral - 121)) | (1 << (CPP14ParserUserdefinedintegerliteral - 121)) | (1 << (CPP14ParserUserdefinedfloatingliteral - 121)) | (1 << (CPP14ParserUserdefinedstringliteral - 121)) | (1 << (CPP14ParserUserdefinedcharacterliteral - 121)))) != 0) {
			{
				p.SetState(1153)
				p.expression(0)
			}

		}
		{
			p.SetState(1156)
			p.Match(CPP14ParserSemi)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1157)
			p.Match(CPP14ParserReturn)
		}
		{
			p.SetState(1158)
			p.Bracedinitlist()
		}
		{
			p.SetState(1159)
			p.Match(CPP14ParserSemi)
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1161)
			p.Match(CPP14ParserGoto)
		}
		{
			p.SetState(1162)
			p.Match(CPP14ParserIdentifier)
		}
		{
			p.SetState(1163)
			p.Match(CPP14ParserSemi)
		}

	}


	return localctx
}


// IDeclarationstatementContext is an interface to support dynamic dispatch.
type IDeclarationstatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationstatementContext differentiates from other interfaces.
	IsDeclarationstatementContext()
}

type DeclarationstatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationstatementContext() *DeclarationstatementContext {
	var p = new(DeclarationstatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_declarationstatement
	return p
}

func (*DeclarationstatementContext) IsDeclarationstatementContext() {}

func NewDeclarationstatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationstatementContext {
	var p = new(DeclarationstatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declarationstatement

	return p
}

func (s *DeclarationstatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationstatementContext) Blockdeclaration() IBlockdeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockdeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockdeclarationContext)
}

func (s *DeclarationstatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationstatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *DeclarationstatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterDeclarationstatement(s)
	}
}

func (s *DeclarationstatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitDeclarationstatement(s)
	}
}

func (s *DeclarationstatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitDeclarationstatement(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Declarationstatement() (localctx IDeclarationstatementContext) {
	localctx = NewDeclarationstatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, CPP14ParserRULE_declarationstatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1166)
		p.Blockdeclaration()
	}



	return localctx
}


// IDeclarationseqContext is an interface to support dynamic dispatch.
type IDeclarationseqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationseqContext differentiates from other interfaces.
	IsDeclarationseqContext()
}

type DeclarationseqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationseqContext() *DeclarationseqContext {
	var p = new(DeclarationseqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_declarationseq
	return p
}

func (*DeclarationseqContext) IsDeclarationseqContext() {}

func NewDeclarationseqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationseqContext {
	var p = new(DeclarationseqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declarationseq

	return p
}

func (s *DeclarationseqContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationseqContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *DeclarationseqContext) Declarationseq() IDeclarationseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationseqContext)
}

func (s *DeclarationseqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationseqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *DeclarationseqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterDeclarationseq(s)
	}
}

func (s *DeclarationseqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitDeclarationseq(s)
	}
}

func (s *DeclarationseqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitDeclarationseq(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Declarationseq() (localctx IDeclarationseqContext) {
	return p.declarationseq(0)
}

func (p *CPP14Parser) declarationseq(_p int) (localctx IDeclarationseqContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewDeclarationseqContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IDeclarationseqContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 122
	p.EnterRecursionRule(localctx, 122, CPP14ParserRULE_declarationseq, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1169)
		p.Declaration()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1175)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 100, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewDeclarationseqContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_declarationseq)
			p.SetState(1171)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(1172)
				p.Declaration()
			}


		}
		p.SetState(1177)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 100, p.GetParserRuleContext())
	}



	return localctx
}


// IDeclarationContext is an interface to support dynamic dispatch.
type IDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationContext differentiates from other interfaces.
	IsDeclarationContext()
}

type DeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationContext() *DeclarationContext {
	var p = new(DeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_declaration
	return p
}

func (*DeclarationContext) IsDeclarationContext() {}

func NewDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationContext {
	var p = new(DeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declaration

	return p
}

func (s *DeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationContext) Blockdeclaration() IBlockdeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockdeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockdeclarationContext)
}

func (s *DeclarationContext) Functiondefinition() IFunctiondefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctiondefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctiondefinitionContext)
}

func (s *DeclarationContext) Templatedeclaration() ITemplatedeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplatedeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplatedeclarationContext)
}

func (s *DeclarationContext) Explicitinstantiation() IExplicitinstantiationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExplicitinstantiationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExplicitinstantiationContext)
}

func (s *DeclarationContext) Explicitspecialization() IExplicitspecializationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExplicitspecializationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExplicitspecializationContext)
}

func (s *DeclarationContext) Linkagespecification() ILinkagespecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinkagespecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinkagespecificationContext)
}

func (s *DeclarationContext) Namespacedefinition() INamespacedefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespacedefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespacedefinitionContext)
}

func (s *DeclarationContext) Emptydeclaration() IEmptydeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEmptydeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEmptydeclarationContext)
}

func (s *DeclarationContext) Attributedeclaration() IAttributedeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributedeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributedeclarationContext)
}

func (s *DeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *DeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterDeclaration(s)
	}
}

func (s *DeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitDeclaration(s)
	}
}

func (s *DeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Declaration() (localctx IDeclarationContext) {
	localctx = NewDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, CPP14ParserRULE_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1187)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 101, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1178)
			p.Blockdeclaration()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1179)
			p.Functiondefinition()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1180)
			p.Templatedeclaration()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1181)
			p.Explicitinstantiation()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1182)
			p.Explicitspecialization()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1183)
			p.Linkagespecification()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1184)
			p.Namespacedefinition()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1185)
			p.Emptydeclaration()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1186)
			p.Attributedeclaration()
		}

	}


	return localctx
}


// IBlockdeclarationContext is an interface to support dynamic dispatch.
type IBlockdeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockdeclarationContext differentiates from other interfaces.
	IsBlockdeclarationContext()
}

type BlockdeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockdeclarationContext() *BlockdeclarationContext {
	var p = new(BlockdeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_blockdeclaration
	return p
}

func (*BlockdeclarationContext) IsBlockdeclarationContext() {}

func NewBlockdeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockdeclarationContext {
	var p = new(BlockdeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_blockdeclaration

	return p
}

func (s *BlockdeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockdeclarationContext) Simpledeclaration() ISimpledeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpledeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpledeclarationContext)
}

func (s *BlockdeclarationContext) Asmdefinition() IAsmdefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsmdefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsmdefinitionContext)
}

func (s *BlockdeclarationContext) Namespacealiasdefinition() INamespacealiasdefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespacealiasdefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespacealiasdefinitionContext)
}

func (s *BlockdeclarationContext) Usingdeclaration() IUsingdeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingdeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsingdeclarationContext)
}

func (s *BlockdeclarationContext) Usingdirective() IUsingdirectiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingdirectiveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsingdirectiveContext)
}

func (s *BlockdeclarationContext) Static_assertdeclaration() IStatic_assertdeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatic_assertdeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatic_assertdeclarationContext)
}

func (s *BlockdeclarationContext) Aliasdeclaration() IAliasdeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAliasdeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAliasdeclarationContext)
}

func (s *BlockdeclarationContext) Opaqueenumdeclaration() IOpaqueenumdeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpaqueenumdeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpaqueenumdeclarationContext)
}

func (s *BlockdeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockdeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *BlockdeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterBlockdeclaration(s)
	}
}

func (s *BlockdeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitBlockdeclaration(s)
	}
}

func (s *BlockdeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitBlockdeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Blockdeclaration() (localctx IBlockdeclarationContext) {
	localctx = NewBlockdeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, CPP14ParserRULE_blockdeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1197)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1189)
			p.Simpledeclaration()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1190)
			p.Asmdefinition()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1191)
			p.Namespacealiasdefinition()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1192)
			p.Usingdeclaration()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1193)
			p.Usingdirective()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1194)
			p.Static_assertdeclaration()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1195)
			p.Aliasdeclaration()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1196)
			p.Opaqueenumdeclaration()
		}

	}


	return localctx
}


// IAliasdeclarationContext is an interface to support dynamic dispatch.
type IAliasdeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAliasdeclarationContext differentiates from other interfaces.
	IsAliasdeclarationContext()
}

type AliasdeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliasdeclarationContext() *AliasdeclarationContext {
	var p = new(AliasdeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_aliasdeclaration
	return p
}

func (*AliasdeclarationContext) IsAliasdeclarationContext() {}

func NewAliasdeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AliasdeclarationContext {
	var p = new(AliasdeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_aliasdeclaration

	return p
}

func (s *AliasdeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *AliasdeclarationContext) Using() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUsing, 0)
}

func (s *AliasdeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *AliasdeclarationContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *AliasdeclarationContext) Thetypeid() IThetypeidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThetypeidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThetypeidContext)
}

func (s *AliasdeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *AliasdeclarationContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *AliasdeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AliasdeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AliasdeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterAliasdeclaration(s)
	}
}

func (s *AliasdeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitAliasdeclaration(s)
	}
}

func (s *AliasdeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitAliasdeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Aliasdeclaration() (localctx IAliasdeclarationContext) {
	localctx = NewAliasdeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, CPP14ParserRULE_aliasdeclaration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1199)
		p.Match(CPP14ParserUsing)
	}
	{
		p.SetState(1200)
		p.Match(CPP14ParserIdentifier)
	}
	p.SetState(1202)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(1201)
			p.attributespecifierseq(0)
		}

	}
	{
		p.SetState(1204)
		p.Match(CPP14ParserAssign)
	}
	{
		p.SetState(1205)
		p.Thetypeid()
	}
	{
		p.SetState(1206)
		p.Match(CPP14ParserSemi)
	}



	return localctx
}


// ISimpledeclarationContext is an interface to support dynamic dispatch.
type ISimpledeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpledeclarationContext differentiates from other interfaces.
	IsSimpledeclarationContext()
}

type SimpledeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpledeclarationContext() *SimpledeclarationContext {
	var p = new(SimpledeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpledeclaration
	return p
}

func (*SimpledeclarationContext) IsSimpledeclarationContext() {}

func NewSimpledeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpledeclarationContext {
	var p = new(SimpledeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_simpledeclaration

	return p
}

func (s *SimpledeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpledeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *SimpledeclarationContext) Declspecifierseq() IDeclspecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclspecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclspecifierseqContext)
}

func (s *SimpledeclarationContext) Initdeclaratorlist() IInitdeclaratorlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitdeclaratorlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitdeclaratorlistContext)
}

func (s *SimpledeclarationContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *SimpledeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpledeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *SimpledeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterSimpledeclaration(s)
	}
}

func (s *SimpledeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitSimpledeclaration(s)
	}
}

func (s *SimpledeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitSimpledeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Simpledeclaration() (localctx ISimpledeclarationContext) {
	localctx = NewSimpledeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, CPP14ParserRULE_simpledeclaration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1222)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserT__2, CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserClass, CPP14ParserConst, CPP14ParserConstexpr, CPP14ParserDecltype, CPP14ParserDouble, CPP14ParserEnum, CPP14ParserExplicit, CPP14ParserExtern, CPP14ParserFloat, CPP14ParserFriend, CPP14ParserInline, CPP14ParserInt, CPP14ParserLong, CPP14ParserMutable, CPP14ParserOperator, CPP14ParserRegister, CPP14ParserShort, CPP14ParserSigned, CPP14ParserStatic, CPP14ParserStruct, CPP14ParserThread_local, CPP14ParserTypedef, CPP14ParserTypename_, CPP14ParserUnion, CPP14ParserUnsigned, CPP14ParserVirtual, CPP14ParserVoid, CPP14ParserVolatile, CPP14ParserWchar, CPP14ParserLeftParen, CPP14ParserStar, CPP14ParserAnd, CPP14ParserTilde, CPP14ParserDoublecolon, CPP14ParserSemi, CPP14ParserEllipsis, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1209)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1208)
				p.Declspecifierseq()
			}


		}
		p.SetState(1212)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserT__2 || _la == CPP14ParserDecltype || _la == CPP14ParserOperator || ((((_la - 84)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 84))) & ((1 << (CPP14ParserLeftParen - 84)) | (1 << (CPP14ParserStar - 84)) | (1 << (CPP14ParserAnd - 84)) | (1 << (CPP14ParserTilde - 84)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (CPP14ParserDoublecolon - 128)) | (1 << (CPP14ParserEllipsis - 128)) | (1 << (CPP14ParserIdentifier - 128)))) != 0) {
			{
				p.SetState(1211)
				p.initdeclaratorlist(0)
			}

		}
		{
			p.SetState(1214)
			p.Match(CPP14ParserSemi)
		}


	case CPP14ParserAlignas, CPP14ParserLeftBracket:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1215)
			p.attributespecifierseq(0)
		}
		p.SetState(1217)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1216)
				p.Declspecifierseq()
			}


		}
		{
			p.SetState(1219)
			p.initdeclaratorlist(0)
		}
		{
			p.SetState(1220)
			p.Match(CPP14ParserSemi)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IStatic_assertdeclarationContext is an interface to support dynamic dispatch.
type IStatic_assertdeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatic_assertdeclarationContext differentiates from other interfaces.
	IsStatic_assertdeclarationContext()
}

type Static_assertdeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatic_assertdeclarationContext() *Static_assertdeclarationContext {
	var p = new(Static_assertdeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_static_assertdeclaration
	return p
}

func (*Static_assertdeclarationContext) IsStatic_assertdeclarationContext() {}

func NewStatic_assertdeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Static_assertdeclarationContext {
	var p = new(Static_assertdeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_static_assertdeclaration

	return p
}

func (s *Static_assertdeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Static_assertdeclarationContext) Static_assert() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStatic_assert, 0)
}

func (s *Static_assertdeclarationContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *Static_assertdeclarationContext) Constantexpression() IConstantexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantexpressionContext)
}

func (s *Static_assertdeclarationContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *Static_assertdeclarationContext) Stringliteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStringliteral, 0)
}

func (s *Static_assertdeclarationContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *Static_assertdeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *Static_assertdeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Static_assertdeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Static_assertdeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterStatic_assertdeclaration(s)
	}
}

func (s *Static_assertdeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitStatic_assertdeclaration(s)
	}
}

func (s *Static_assertdeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitStatic_assertdeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Static_assertdeclaration() (localctx IStatic_assertdeclarationContext) {
	localctx = NewStatic_assertdeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, CPP14ParserRULE_static_assertdeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1224)
		p.Match(CPP14ParserStatic_assert)
	}
	{
		p.SetState(1225)
		p.Match(CPP14ParserLeftParen)
	}
	{
		p.SetState(1226)
		p.Constantexpression()
	}
	{
		p.SetState(1227)
		p.Match(CPP14ParserComma)
	}
	{
		p.SetState(1228)
		p.Match(CPP14ParserStringliteral)
	}
	{
		p.SetState(1229)
		p.Match(CPP14ParserRightParen)
	}
	{
		p.SetState(1230)
		p.Match(CPP14ParserSemi)
	}



	return localctx
}


// IEmptydeclarationContext is an interface to support dynamic dispatch.
type IEmptydeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEmptydeclarationContext differentiates from other interfaces.
	IsEmptydeclarationContext()
}

type EmptydeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEmptydeclarationContext() *EmptydeclarationContext {
	var p = new(EmptydeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_emptydeclaration
	return p
}

func (*EmptydeclarationContext) IsEmptydeclarationContext() {}

func NewEmptydeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EmptydeclarationContext {
	var p = new(EmptydeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_emptydeclaration

	return p
}

func (s *EmptydeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *EmptydeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *EmptydeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EmptydeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *EmptydeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterEmptydeclaration(s)
	}
}

func (s *EmptydeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitEmptydeclaration(s)
	}
}

func (s *EmptydeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitEmptydeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Emptydeclaration() (localctx IEmptydeclarationContext) {
	localctx = NewEmptydeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, CPP14ParserRULE_emptydeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1232)
		p.Match(CPP14ParserSemi)
	}



	return localctx
}


// IAttributedeclarationContext is an interface to support dynamic dispatch.
type IAttributedeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributedeclarationContext differentiates from other interfaces.
	IsAttributedeclarationContext()
}

type AttributedeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributedeclarationContext() *AttributedeclarationContext {
	var p = new(AttributedeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributedeclaration
	return p
}

func (*AttributedeclarationContext) IsAttributedeclarationContext() {}

func NewAttributedeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributedeclarationContext {
	var p = new(AttributedeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attributedeclaration

	return p
}

func (s *AttributedeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributedeclarationContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *AttributedeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *AttributedeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributedeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AttributedeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterAttributedeclaration(s)
	}
}

func (s *AttributedeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitAttributedeclaration(s)
	}
}

func (s *AttributedeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitAttributedeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Attributedeclaration() (localctx IAttributedeclarationContext) {
	localctx = NewAttributedeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, CPP14ParserRULE_attributedeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1234)
		p.attributespecifierseq(0)
	}
	{
		p.SetState(1235)
		p.Match(CPP14ParserSemi)
	}



	return localctx
}


// IDeclspecifierContext is an interface to support dynamic dispatch.
type IDeclspecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclspecifierContext differentiates from other interfaces.
	IsDeclspecifierContext()
}

type DeclspecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclspecifierContext() *DeclspecifierContext {
	var p = new(DeclspecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_declspecifier
	return p
}

func (*DeclspecifierContext) IsDeclspecifierContext() {}

func NewDeclspecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclspecifierContext {
	var p = new(DeclspecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declspecifier

	return p
}

func (s *DeclspecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclspecifierContext) Storageclassspecifier() IStorageclassspecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorageclassspecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorageclassspecifierContext)
}

func (s *DeclspecifierContext) Typespecifier() ITypespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypespecifierContext)
}

func (s *DeclspecifierContext) Functionspecifier() IFunctionspecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionspecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionspecifierContext)
}

func (s *DeclspecifierContext) Friend() antlr.TerminalNode {
	return s.GetToken(CPP14ParserFriend, 0)
}

func (s *DeclspecifierContext) Typedef() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTypedef, 0)
}

func (s *DeclspecifierContext) Constexpr() antlr.TerminalNode {
	return s.GetToken(CPP14ParserConstexpr, 0)
}

func (s *DeclspecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclspecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *DeclspecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterDeclspecifier(s)
	}
}

func (s *DeclspecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitDeclspecifier(s)
	}
}

func (s *DeclspecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitDeclspecifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Declspecifier() (localctx IDeclspecifierContext) {
	localctx = NewDeclspecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, CPP14ParserRULE_declspecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1243)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserExtern, CPP14ParserMutable, CPP14ParserRegister, CPP14ParserStatic, CPP14ParserThread_local:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1237)
			p.Storageclassspecifier()
		}


	case CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserClass, CPP14ParserConst, CPP14ParserDecltype, CPP14ParserDouble, CPP14ParserEnum, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserShort, CPP14ParserSigned, CPP14ParserStruct, CPP14ParserTypename_, CPP14ParserUnion, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserVolatile, CPP14ParserWchar, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1238)
			p.Typespecifier()
		}


	case CPP14ParserExplicit, CPP14ParserInline, CPP14ParserVirtual:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1239)
			p.Functionspecifier()
		}


	case CPP14ParserFriend:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1240)
			p.Match(CPP14ParserFriend)
		}


	case CPP14ParserTypedef:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1241)
			p.Match(CPP14ParserTypedef)
		}


	case CPP14ParserConstexpr:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1242)
			p.Match(CPP14ParserConstexpr)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IDeclspecifierseqContext is an interface to support dynamic dispatch.
type IDeclspecifierseqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclspecifierseqContext differentiates from other interfaces.
	IsDeclspecifierseqContext()
}

type DeclspecifierseqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclspecifierseqContext() *DeclspecifierseqContext {
	var p = new(DeclspecifierseqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_declspecifierseq
	return p
}

func (*DeclspecifierseqContext) IsDeclspecifierseqContext() {}

func NewDeclspecifierseqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclspecifierseqContext {
	var p = new(DeclspecifierseqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declspecifierseq

	return p
}

func (s *DeclspecifierseqContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclspecifierseqContext) Declspecifier() IDeclspecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclspecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclspecifierContext)
}

func (s *DeclspecifierseqContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *DeclspecifierseqContext) Declspecifierseq() IDeclspecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclspecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclspecifierseqContext)
}

func (s *DeclspecifierseqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclspecifierseqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *DeclspecifierseqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterDeclspecifierseq(s)
	}
}

func (s *DeclspecifierseqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitDeclspecifierseq(s)
	}
}

func (s *DeclspecifierseqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitDeclspecifierseq(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Declspecifierseq() (localctx IDeclspecifierseqContext) {
	localctx = NewDeclspecifierseqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, CPP14ParserRULE_declspecifierseq)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1252)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 110, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1245)
			p.Declspecifier()
		}
		p.SetState(1247)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 109, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1246)
				p.attributespecifierseq(0)
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1249)
			p.Declspecifier()
		}
		{
			p.SetState(1250)
			p.Declspecifierseq()
		}

	}


	return localctx
}


// IStorageclassspecifierContext is an interface to support dynamic dispatch.
type IStorageclassspecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStorageclassspecifierContext differentiates from other interfaces.
	IsStorageclassspecifierContext()
}

type StorageclassspecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStorageclassspecifierContext() *StorageclassspecifierContext {
	var p = new(StorageclassspecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_storageclassspecifier
	return p
}

func (*StorageclassspecifierContext) IsStorageclassspecifierContext() {}

func NewStorageclassspecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StorageclassspecifierContext {
	var p = new(StorageclassspecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_storageclassspecifier

	return p
}

func (s *StorageclassspecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *StorageclassspecifierContext) Register() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRegister, 0)
}

func (s *StorageclassspecifierContext) Static() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStatic, 0)
}

func (s *StorageclassspecifierContext) Thread_local() antlr.TerminalNode {
	return s.GetToken(CPP14ParserThread_local, 0)
}

func (s *StorageclassspecifierContext) Extern() antlr.TerminalNode {
	return s.GetToken(CPP14ParserExtern, 0)
}

func (s *StorageclassspecifierContext) Mutable() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMutable, 0)
}

func (s *StorageclassspecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StorageclassspecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *StorageclassspecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterStorageclassspecifier(s)
	}
}

func (s *StorageclassspecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitStorageclassspecifier(s)
	}
}

func (s *StorageclassspecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitStorageclassspecifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Storageclassspecifier() (localctx IStorageclassspecifierContext) {
	localctx = NewStorageclassspecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, CPP14ParserRULE_storageclassspecifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1254)
		_la = p.GetTokenStream().LA(1)

		if !(((((_la - 35)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 35))) & ((1 << (CPP14ParserExtern - 35)) | (1 << (CPP14ParserMutable - 35)) | (1 << (CPP14ParserRegister - 35)) | (1 << (CPP14ParserStatic - 35)))) != 0) || _la == CPP14ParserThread_local) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IFunctionspecifierContext is an interface to support dynamic dispatch.
type IFunctionspecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionspecifierContext differentiates from other interfaces.
	IsFunctionspecifierContext()
}

type FunctionspecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionspecifierContext() *FunctionspecifierContext {
	var p = new(FunctionspecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_functionspecifier
	return p
}

func (*FunctionspecifierContext) IsFunctionspecifierContext() {}

func NewFunctionspecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionspecifierContext {
	var p = new(FunctionspecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_functionspecifier

	return p
}

func (s *FunctionspecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionspecifierContext) Inline() antlr.TerminalNode {
	return s.GetToken(CPP14ParserInline, 0)
}

func (s *FunctionspecifierContext) Virtual() antlr.TerminalNode {
	return s.GetToken(CPP14ParserVirtual, 0)
}

func (s *FunctionspecifierContext) Explicit() antlr.TerminalNode {
	return s.GetToken(CPP14ParserExplicit, 0)
}

func (s *FunctionspecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionspecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *FunctionspecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterFunctionspecifier(s)
	}
}

func (s *FunctionspecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitFunctionspecifier(s)
	}
}

func (s *FunctionspecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitFunctionspecifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Functionspecifier() (localctx IFunctionspecifierContext) {
	localctx = NewFunctionspecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, CPP14ParserRULE_functionspecifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1256)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserExplicit || _la == CPP14ParserInline || _la == CPP14ParserVirtual) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ITypedefnameContext is an interface to support dynamic dispatch.
type ITypedefnameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypedefnameContext differentiates from other interfaces.
	IsTypedefnameContext()
}

type TypedefnameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypedefnameContext() *TypedefnameContext {
	var p = new(TypedefnameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_typedefname
	return p
}

func (*TypedefnameContext) IsTypedefnameContext() {}

func NewTypedefnameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypedefnameContext {
	var p = new(TypedefnameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typedefname

	return p
}

func (s *TypedefnameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypedefnameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *TypedefnameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypedefnameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TypedefnameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTypedefname(s)
	}
}

func (s *TypedefnameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTypedefname(s)
	}
}

func (s *TypedefnameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTypedefname(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Typedefname() (localctx ITypedefnameContext) {
	localctx = NewTypedefnameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, CPP14ParserRULE_typedefname)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1258)
		p.Match(CPP14ParserIdentifier)
	}



	return localctx
}


// ITypespecifierContext is an interface to support dynamic dispatch.
type ITypespecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypespecifierContext differentiates from other interfaces.
	IsTypespecifierContext()
}

type TypespecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypespecifierContext() *TypespecifierContext {
	var p = new(TypespecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_typespecifier
	return p
}

func (*TypespecifierContext) IsTypespecifierContext() {}

func NewTypespecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypespecifierContext {
	var p = new(TypespecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typespecifier

	return p
}

func (s *TypespecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TypespecifierContext) Trailingtypespecifier() ITrailingtypespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrailingtypespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrailingtypespecifierContext)
}

func (s *TypespecifierContext) Classspecifier() IClassspecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassspecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassspecifierContext)
}

func (s *TypespecifierContext) Enumspecifier() IEnumspecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumspecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumspecifierContext)
}

func (s *TypespecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypespecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TypespecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTypespecifier(s)
	}
}

func (s *TypespecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTypespecifier(s)
	}
}

func (s *TypespecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTypespecifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Typespecifier() (localctx ITypespecifierContext) {
	localctx = NewTypespecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, CPP14ParserRULE_typespecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1263)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 111, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1260)
			p.Trailingtypespecifier()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1261)
			p.Classspecifier()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1262)
			p.Enumspecifier()
		}

	}


	return localctx
}


// ITrailingtypespecifierContext is an interface to support dynamic dispatch.
type ITrailingtypespecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrailingtypespecifierContext differentiates from other interfaces.
	IsTrailingtypespecifierContext()
}

type TrailingtypespecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrailingtypespecifierContext() *TrailingtypespecifierContext {
	var p = new(TrailingtypespecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_trailingtypespecifier
	return p
}

func (*TrailingtypespecifierContext) IsTrailingtypespecifierContext() {}

func NewTrailingtypespecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TrailingtypespecifierContext {
	var p = new(TrailingtypespecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_trailingtypespecifier

	return p
}

func (s *TrailingtypespecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TrailingtypespecifierContext) Simpletypespecifier() ISimpletypespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpletypespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpletypespecifierContext)
}

func (s *TrailingtypespecifierContext) Elaboratedtypespecifier() IElaboratedtypespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElaboratedtypespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElaboratedtypespecifierContext)
}

func (s *TrailingtypespecifierContext) Typenamespecifier() ITypenamespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenamespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenamespecifierContext)
}

func (s *TrailingtypespecifierContext) Cvqualifier() ICvqualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICvqualifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICvqualifierContext)
}

func (s *TrailingtypespecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TrailingtypespecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TrailingtypespecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTrailingtypespecifier(s)
	}
}

func (s *TrailingtypespecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTrailingtypespecifier(s)
	}
}

func (s *TrailingtypespecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTrailingtypespecifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Trailingtypespecifier() (localctx ITrailingtypespecifierContext) {
	localctx = NewTrailingtypespecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, CPP14ParserRULE_trailingtypespecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1269)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserDecltype, CPP14ParserDouble, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserShort, CPP14ParserSigned, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserWchar, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1265)
			p.Simpletypespecifier()
		}


	case CPP14ParserClass, CPP14ParserEnum, CPP14ParserStruct, CPP14ParserUnion:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1266)
			p.Elaboratedtypespecifier()
		}


	case CPP14ParserTypename_:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1267)
			p.Typenamespecifier()
		}


	case CPP14ParserConst, CPP14ParserVolatile:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1268)
			p.Cvqualifier()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ITypespecifierseqContext is an interface to support dynamic dispatch.
type ITypespecifierseqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypespecifierseqContext differentiates from other interfaces.
	IsTypespecifierseqContext()
}

type TypespecifierseqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypespecifierseqContext() *TypespecifierseqContext {
	var p = new(TypespecifierseqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_typespecifierseq
	return p
}

func (*TypespecifierseqContext) IsTypespecifierseqContext() {}

func NewTypespecifierseqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypespecifierseqContext {
	var p = new(TypespecifierseqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typespecifierseq

	return p
}

func (s *TypespecifierseqContext) GetParser() antlr.Parser { return s.parser }

func (s *TypespecifierseqContext) Typespecifier() ITypespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypespecifierContext)
}

func (s *TypespecifierseqContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *TypespecifierseqContext) Typespecifierseq() ITypespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypespecifierseqContext)
}

func (s *TypespecifierseqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypespecifierseqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TypespecifierseqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTypespecifierseq(s)
	}
}

func (s *TypespecifierseqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTypespecifierseq(s)
	}
}

func (s *TypespecifierseqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTypespecifierseq(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Typespecifierseq() (localctx ITypespecifierseqContext) {
	localctx = NewTypespecifierseqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, CPP14ParserRULE_typespecifierseq)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1278)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1271)
			p.Typespecifier()
		}
		p.SetState(1273)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 113, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1272)
				p.attributespecifierseq(0)
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1275)
			p.Typespecifier()
		}
		{
			p.SetState(1276)
			p.Typespecifierseq()
		}

	}


	return localctx
}


// ITrailingtypespecifierseqContext is an interface to support dynamic dispatch.
type ITrailingtypespecifierseqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrailingtypespecifierseqContext differentiates from other interfaces.
	IsTrailingtypespecifierseqContext()
}

type TrailingtypespecifierseqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrailingtypespecifierseqContext() *TrailingtypespecifierseqContext {
	var p = new(TrailingtypespecifierseqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_trailingtypespecifierseq
	return p
}

func (*TrailingtypespecifierseqContext) IsTrailingtypespecifierseqContext() {}

func NewTrailingtypespecifierseqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TrailingtypespecifierseqContext {
	var p = new(TrailingtypespecifierseqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_trailingtypespecifierseq

	return p
}

func (s *TrailingtypespecifierseqContext) GetParser() antlr.Parser { return s.parser }

func (s *TrailingtypespecifierseqContext) Trailingtypespecifier() ITrailingtypespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrailingtypespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrailingtypespecifierContext)
}

func (s *TrailingtypespecifierseqContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *TrailingtypespecifierseqContext) Trailingtypespecifierseq() ITrailingtypespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrailingtypespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrailingtypespecifierseqContext)
}

func (s *TrailingtypespecifierseqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TrailingtypespecifierseqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TrailingtypespecifierseqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTrailingtypespecifierseq(s)
	}
}

func (s *TrailingtypespecifierseqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTrailingtypespecifierseq(s)
	}
}

func (s *TrailingtypespecifierseqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTrailingtypespecifierseq(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Trailingtypespecifierseq() (localctx ITrailingtypespecifierseqContext) {
	localctx = NewTrailingtypespecifierseqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, CPP14ParserRULE_trailingtypespecifierseq)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1287)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 116, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1280)
			p.Trailingtypespecifier()
		}
		p.SetState(1282)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 115, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1281)
				p.attributespecifierseq(0)
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1284)
			p.Trailingtypespecifier()
		}
		{
			p.SetState(1285)
			p.Trailingtypespecifierseq()
		}

	}


	return localctx
}


// ISimpletypespecifierContext is an interface to support dynamic dispatch.
type ISimpletypespecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpletypespecifierContext differentiates from other interfaces.
	IsSimpletypespecifierContext()
}

type SimpletypespecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpletypespecifierContext() *SimpletypespecifierContext {
	var p = new(SimpletypespecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpletypespecifier
	return p
}

func (*SimpletypespecifierContext) IsSimpletypespecifierContext() {}

func NewSimpletypespecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpletypespecifierContext {
	var p = new(SimpletypespecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_simpletypespecifier

	return p
}

func (s *SimpletypespecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpletypespecifierContext) Thetypename() IThetypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThetypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThetypenameContext)
}

func (s *SimpletypespecifierContext) Nestednamespecifier() INestednamespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestednamespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestednamespecifierContext)
}

func (s *SimpletypespecifierContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *SimpletypespecifierContext) Simpletemplateid() ISimpletemplateidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpletemplateidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpletemplateidContext)
}

func (s *SimpletypespecifierContext) Char() antlr.TerminalNode {
	return s.GetToken(CPP14ParserChar, 0)
}

func (s *SimpletypespecifierContext) Char16() antlr.TerminalNode {
	return s.GetToken(CPP14ParserChar16, 0)
}

func (s *SimpletypespecifierContext) Char32() antlr.TerminalNode {
	return s.GetToken(CPP14ParserChar32, 0)
}

func (s *SimpletypespecifierContext) Wchar() antlr.TerminalNode {
	return s.GetToken(CPP14ParserWchar, 0)
}

func (s *SimpletypespecifierContext) Bool() antlr.TerminalNode {
	return s.GetToken(CPP14ParserBool, 0)
}

func (s *SimpletypespecifierContext) Short() antlr.TerminalNode {
	return s.GetToken(CPP14ParserShort, 0)
}

func (s *SimpletypespecifierContext) Int() antlr.TerminalNode {
	return s.GetToken(CPP14ParserInt, 0)
}

func (s *SimpletypespecifierContext) Long() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLong, 0)
}

func (s *SimpletypespecifierContext) Signed() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSigned, 0)
}

func (s *SimpletypespecifierContext) Unsigned() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUnsigned, 0)
}

func (s *SimpletypespecifierContext) Float() antlr.TerminalNode {
	return s.GetToken(CPP14ParserFloat, 0)
}

func (s *SimpletypespecifierContext) Double() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDouble, 0)
}

func (s *SimpletypespecifierContext) Void() antlr.TerminalNode {
	return s.GetToken(CPP14ParserVoid, 0)
}

func (s *SimpletypespecifierContext) Auto() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAuto, 0)
}

func (s *SimpletypespecifierContext) Decltypespecifier() IDecltypespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecltypespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecltypespecifierContext)
}

func (s *SimpletypespecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpletypespecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *SimpletypespecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterSimpletypespecifier(s)
	}
}

func (s *SimpletypespecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitSimpletypespecifier(s)
	}
}

func (s *SimpletypespecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitSimpletypespecifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Simpletypespecifier() (localctx ISimpletypespecifierContext) {
	localctx = NewSimpletypespecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, CPP14ParserRULE_simpletypespecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1312)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1290)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 117, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1289)
				p.nestednamespecifier(0)
			}


		}
		{
			p.SetState(1292)
			p.Thetypename()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1293)
			p.nestednamespecifier(0)
		}
		{
			p.SetState(1294)
			p.Match(CPP14ParserTemplate)
		}
		{
			p.SetState(1295)
			p.Simpletemplateid()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1297)
			p.Match(CPP14ParserChar)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1298)
			p.Match(CPP14ParserChar16)
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1299)
			p.Match(CPP14ParserChar32)
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1300)
			p.Match(CPP14ParserWchar)
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1301)
			p.Match(CPP14ParserBool)
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1302)
			p.Match(CPP14ParserShort)
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1303)
			p.Match(CPP14ParserInt)
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1304)
			p.Match(CPP14ParserLong)
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1305)
			p.Match(CPP14ParserSigned)
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1306)
			p.Match(CPP14ParserUnsigned)
		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1307)
			p.Match(CPP14ParserFloat)
		}


	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1308)
			p.Match(CPP14ParserDouble)
		}


	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1309)
			p.Match(CPP14ParserVoid)
		}


	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1310)
			p.Match(CPP14ParserAuto)
		}


	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1311)
			p.Decltypespecifier()
		}

	}


	return localctx
}


// IThetypenameContext is an interface to support dynamic dispatch.
type IThetypenameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThetypenameContext differentiates from other interfaces.
	IsThetypenameContext()
}

type ThetypenameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThetypenameContext() *ThetypenameContext {
	var p = new(ThetypenameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_thetypename
	return p
}

func (*ThetypenameContext) IsThetypenameContext() {}

func NewThetypenameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThetypenameContext {
	var p = new(ThetypenameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_thetypename

	return p
}

func (s *ThetypenameContext) GetParser() antlr.Parser { return s.parser }

func (s *ThetypenameContext) Classname() IClassnameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassnameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassnameContext)
}

func (s *ThetypenameContext) Enumname() IEnumnameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumnameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumnameContext)
}

func (s *ThetypenameContext) Typedefname() ITypedefnameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypedefnameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypedefnameContext)
}

func (s *ThetypenameContext) Simpletemplateid() ISimpletemplateidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpletemplateidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpletemplateidContext)
}

func (s *ThetypenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThetypenameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ThetypenameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterThetypename(s)
	}
}

func (s *ThetypenameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitThetypename(s)
	}
}

func (s *ThetypenameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitThetypename(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Thetypename() (localctx IThetypenameContext) {
	localctx = NewThetypenameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, CPP14ParserRULE_thetypename)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1318)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1314)
			p.Classname()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1315)
			p.Enumname()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1316)
			p.Typedefname()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1317)
			p.Simpletemplateid()
		}

	}


	return localctx
}


// IDecltypespecifierContext is an interface to support dynamic dispatch.
type IDecltypespecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDecltypespecifierContext differentiates from other interfaces.
	IsDecltypespecifierContext()
}

type DecltypespecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecltypespecifierContext() *DecltypespecifierContext {
	var p = new(DecltypespecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_decltypespecifier
	return p
}

func (*DecltypespecifierContext) IsDecltypespecifierContext() {}

func NewDecltypespecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecltypespecifierContext {
	var p = new(DecltypespecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_decltypespecifier

	return p
}

func (s *DecltypespecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *DecltypespecifierContext) Decltype() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDecltype, 0)
}

func (s *DecltypespecifierContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *DecltypespecifierContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DecltypespecifierContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *DecltypespecifierContext) Auto() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAuto, 0)
}

func (s *DecltypespecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecltypespecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *DecltypespecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterDecltypespecifier(s)
	}
}

func (s *DecltypespecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitDecltypespecifier(s)
	}
}

func (s *DecltypespecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitDecltypespecifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Decltypespecifier() (localctx IDecltypespecifierContext) {
	localctx = NewDecltypespecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, CPP14ParserRULE_decltypespecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1329)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 120, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1320)
			p.Match(CPP14ParserDecltype)
		}
		{
			p.SetState(1321)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(1322)
			p.expression(0)
		}
		{
			p.SetState(1323)
			p.Match(CPP14ParserRightParen)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1325)
			p.Match(CPP14ParserDecltype)
		}
		{
			p.SetState(1326)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(1327)
			p.Match(CPP14ParserAuto)
		}
		{
			p.SetState(1328)
			p.Match(CPP14ParserRightParen)
		}

	}


	return localctx
}


// IElaboratedtypespecifierContext is an interface to support dynamic dispatch.
type IElaboratedtypespecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElaboratedtypespecifierContext differentiates from other interfaces.
	IsElaboratedtypespecifierContext()
}

type ElaboratedtypespecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElaboratedtypespecifierContext() *ElaboratedtypespecifierContext {
	var p = new(ElaboratedtypespecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_elaboratedtypespecifier
	return p
}

func (*ElaboratedtypespecifierContext) IsElaboratedtypespecifierContext() {}

func NewElaboratedtypespecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElaboratedtypespecifierContext {
	var p = new(ElaboratedtypespecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_elaboratedtypespecifier

	return p
}

func (s *ElaboratedtypespecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ElaboratedtypespecifierContext) Classkey() IClasskeyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClasskeyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClasskeyContext)
}

func (s *ElaboratedtypespecifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *ElaboratedtypespecifierContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *ElaboratedtypespecifierContext) Nestednamespecifier() INestednamespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestednamespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestednamespecifierContext)
}

func (s *ElaboratedtypespecifierContext) Simpletemplateid() ISimpletemplateidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpletemplateidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpletemplateidContext)
}

func (s *ElaboratedtypespecifierContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *ElaboratedtypespecifierContext) Enum() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEnum, 0)
}

func (s *ElaboratedtypespecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElaboratedtypespecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ElaboratedtypespecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterElaboratedtypespecifier(s)
	}
}

func (s *ElaboratedtypespecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitElaboratedtypespecifier(s)
	}
}

func (s *ElaboratedtypespecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitElaboratedtypespecifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Elaboratedtypespecifier() (localctx IElaboratedtypespecifierContext) {
	localctx = NewElaboratedtypespecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, CPP14ParserRULE_elaboratedtypespecifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1355)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 125, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1331)
			p.Classkey()
		}
		p.SetState(1333)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1332)
				p.attributespecifierseq(0)
			}

		}
		p.SetState(1336)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1335)
				p.nestednamespecifier(0)
			}


		}
		{
			p.SetState(1338)
			p.Match(CPP14ParserIdentifier)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1340)
			p.Classkey()
		}
		{
			p.SetState(1341)
			p.Simpletemplateid()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1343)
			p.Classkey()
		}
		{
			p.SetState(1344)
			p.nestednamespecifier(0)
		}
		p.SetState(1346)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserTemplate {
			{
				p.SetState(1345)
				p.Match(CPP14ParserTemplate)
			}

		}
		{
			p.SetState(1348)
			p.Simpletemplateid()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1350)
			p.Match(CPP14ParserEnum)
		}
		p.SetState(1352)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1351)
				p.nestednamespecifier(0)
			}


		}
		{
			p.SetState(1354)
			p.Match(CPP14ParserIdentifier)
		}

	}


	return localctx
}


// IEnumnameContext is an interface to support dynamic dispatch.
type IEnumnameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumnameContext differentiates from other interfaces.
	IsEnumnameContext()
}

type EnumnameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumnameContext() *EnumnameContext {
	var p = new(EnumnameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumname
	return p
}

func (*EnumnameContext) IsEnumnameContext() {}

func NewEnumnameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumnameContext {
	var p = new(EnumnameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumname

	return p
}

func (s *EnumnameContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumnameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *EnumnameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumnameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *EnumnameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterEnumname(s)
	}
}

func (s *EnumnameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitEnumname(s)
	}
}

func (s *EnumnameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitEnumname(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Enumname() (localctx IEnumnameContext) {
	localctx = NewEnumnameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, CPP14ParserRULE_enumname)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1357)
		p.Match(CPP14ParserIdentifier)
	}



	return localctx
}


// IEnumspecifierContext is an interface to support dynamic dispatch.
type IEnumspecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumspecifierContext differentiates from other interfaces.
	IsEnumspecifierContext()
}

type EnumspecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumspecifierContext() *EnumspecifierContext {
	var p = new(EnumspecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumspecifier
	return p
}

func (*EnumspecifierContext) IsEnumspecifierContext() {}

func NewEnumspecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumspecifierContext {
	var p = new(EnumspecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumspecifier

	return p
}

func (s *EnumspecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumspecifierContext) Enumhead() IEnumheadContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumheadContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumheadContext)
}

func (s *EnumspecifierContext) LeftBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, 0)
}

func (s *EnumspecifierContext) RightBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, 0)
}

func (s *EnumspecifierContext) Enumeratorlist() IEnumeratorlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumeratorlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumeratorlistContext)
}

func (s *EnumspecifierContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *EnumspecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumspecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *EnumspecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterEnumspecifier(s)
	}
}

func (s *EnumspecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitEnumspecifier(s)
	}
}

func (s *EnumspecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitEnumspecifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Enumspecifier() (localctx IEnumspecifierContext) {
	localctx = NewEnumspecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, CPP14ParserRULE_enumspecifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1372)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 127, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1359)
			p.Enumhead()
		}
		{
			p.SetState(1360)
			p.Match(CPP14ParserLeftBrace)
		}
		p.SetState(1362)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserIdentifier {
			{
				p.SetState(1361)
				p.enumeratorlist(0)
			}

		}
		{
			p.SetState(1364)
			p.Match(CPP14ParserRightBrace)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1366)
			p.Enumhead()
		}
		{
			p.SetState(1367)
			p.Match(CPP14ParserLeftBrace)
		}
		{
			p.SetState(1368)
			p.enumeratorlist(0)
		}
		{
			p.SetState(1369)
			p.Match(CPP14ParserComma)
		}
		{
			p.SetState(1370)
			p.Match(CPP14ParserRightBrace)
		}

	}


	return localctx
}


// IEnumheadContext is an interface to support dynamic dispatch.
type IEnumheadContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumheadContext differentiates from other interfaces.
	IsEnumheadContext()
}

type EnumheadContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumheadContext() *EnumheadContext {
	var p = new(EnumheadContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumhead
	return p
}

func (*EnumheadContext) IsEnumheadContext() {}

func NewEnumheadContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumheadContext {
	var p = new(EnumheadContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumhead

	return p
}

func (s *EnumheadContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumheadContext) Enumkey() IEnumkeyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumkeyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumkeyContext)
}

func (s *EnumheadContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *EnumheadContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *EnumheadContext) Enumbase() IEnumbaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumbaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumbaseContext)
}

func (s *EnumheadContext) Nestednamespecifier() INestednamespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestednamespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestednamespecifierContext)
}

func (s *EnumheadContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumheadContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *EnumheadContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterEnumhead(s)
	}
}

func (s *EnumheadContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitEnumhead(s)
	}
}

func (s *EnumheadContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitEnumhead(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Enumhead() (localctx IEnumheadContext) {
	localctx = NewEnumheadContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, CPP14ParserRULE_enumhead)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1393)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 133, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1374)
			p.Enumkey()
		}
		p.SetState(1376)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1375)
				p.attributespecifierseq(0)
			}

		}
		p.SetState(1379)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserIdentifier {
			{
				p.SetState(1378)
				p.Match(CPP14ParserIdentifier)
			}

		}
		p.SetState(1382)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserColon {
			{
				p.SetState(1381)
				p.Enumbase()
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1384)
			p.Enumkey()
		}
		p.SetState(1386)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1385)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(1388)
			p.nestednamespecifier(0)
		}
		{
			p.SetState(1389)
			p.Match(CPP14ParserIdentifier)
		}
		p.SetState(1391)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserColon {
			{
				p.SetState(1390)
				p.Enumbase()
			}

		}

	}


	return localctx
}


// IOpaqueenumdeclarationContext is an interface to support dynamic dispatch.
type IOpaqueenumdeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOpaqueenumdeclarationContext differentiates from other interfaces.
	IsOpaqueenumdeclarationContext()
}

type OpaqueenumdeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpaqueenumdeclarationContext() *OpaqueenumdeclarationContext {
	var p = new(OpaqueenumdeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_opaqueenumdeclaration
	return p
}

func (*OpaqueenumdeclarationContext) IsOpaqueenumdeclarationContext() {}

func NewOpaqueenumdeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OpaqueenumdeclarationContext {
	var p = new(OpaqueenumdeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_opaqueenumdeclaration

	return p
}

func (s *OpaqueenumdeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *OpaqueenumdeclarationContext) Enumkey() IEnumkeyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumkeyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumkeyContext)
}

func (s *OpaqueenumdeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *OpaqueenumdeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *OpaqueenumdeclarationContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *OpaqueenumdeclarationContext) Enumbase() IEnumbaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumbaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumbaseContext)
}

func (s *OpaqueenumdeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OpaqueenumdeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *OpaqueenumdeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterOpaqueenumdeclaration(s)
	}
}

func (s *OpaqueenumdeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitOpaqueenumdeclaration(s)
	}
}

func (s *OpaqueenumdeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitOpaqueenumdeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Opaqueenumdeclaration() (localctx IOpaqueenumdeclarationContext) {
	localctx = NewOpaqueenumdeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, CPP14ParserRULE_opaqueenumdeclaration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1395)
		p.Enumkey()
	}
	p.SetState(1397)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(1396)
			p.attributespecifierseq(0)
		}

	}
	{
		p.SetState(1399)
		p.Match(CPP14ParserIdentifier)
	}
	p.SetState(1401)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == CPP14ParserColon {
		{
			p.SetState(1400)
			p.Enumbase()
		}

	}
	{
		p.SetState(1403)
		p.Match(CPP14ParserSemi)
	}



	return localctx
}


// IEnumkeyContext is an interface to support dynamic dispatch.
type IEnumkeyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumkeyContext differentiates from other interfaces.
	IsEnumkeyContext()
}

type EnumkeyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumkeyContext() *EnumkeyContext {
	var p = new(EnumkeyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumkey
	return p
}

func (*EnumkeyContext) IsEnumkeyContext() {}

func NewEnumkeyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumkeyContext {
	var p = new(EnumkeyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumkey

	return p
}

func (s *EnumkeyContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumkeyContext) Enum() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEnum, 0)
}

func (s *EnumkeyContext) Class() antlr.TerminalNode {
	return s.GetToken(CPP14ParserClass, 0)
}

func (s *EnumkeyContext) Struct() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStruct, 0)
}

func (s *EnumkeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumkeyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *EnumkeyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterEnumkey(s)
	}
}

func (s *EnumkeyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitEnumkey(s)
	}
}

func (s *EnumkeyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitEnumkey(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Enumkey() (localctx IEnumkeyContext) {
	localctx = NewEnumkeyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, CPP14ParserRULE_enumkey)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1410)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 136, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1405)
			p.Match(CPP14ParserEnum)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1406)
			p.Match(CPP14ParserEnum)
		}
		{
			p.SetState(1407)
			p.Match(CPP14ParserClass)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1408)
			p.Match(CPP14ParserEnum)
		}
		{
			p.SetState(1409)
			p.Match(CPP14ParserStruct)
		}

	}


	return localctx
}


// IEnumbaseContext is an interface to support dynamic dispatch.
type IEnumbaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumbaseContext differentiates from other interfaces.
	IsEnumbaseContext()
}

type EnumbaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumbaseContext() *EnumbaseContext {
	var p = new(EnumbaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumbase
	return p
}

func (*EnumbaseContext) IsEnumbaseContext() {}

func NewEnumbaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumbaseContext {
	var p = new(EnumbaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumbase

	return p
}

func (s *EnumbaseContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumbaseContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *EnumbaseContext) Typespecifierseq() ITypespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypespecifierseqContext)
}

func (s *EnumbaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumbaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *EnumbaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterEnumbase(s)
	}
}

func (s *EnumbaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitEnumbase(s)
	}
}

func (s *EnumbaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitEnumbase(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Enumbase() (localctx IEnumbaseContext) {
	localctx = NewEnumbaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, CPP14ParserRULE_enumbase)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1412)
		p.Match(CPP14ParserColon)
	}
	{
		p.SetState(1413)
		p.Typespecifierseq()
	}



	return localctx
}


// IEnumeratorlistContext is an interface to support dynamic dispatch.
type IEnumeratorlistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumeratorlistContext differentiates from other interfaces.
	IsEnumeratorlistContext()
}

type EnumeratorlistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumeratorlistContext() *EnumeratorlistContext {
	var p = new(EnumeratorlistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumeratorlist
	return p
}

func (*EnumeratorlistContext) IsEnumeratorlistContext() {}

func NewEnumeratorlistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumeratorlistContext {
	var p = new(EnumeratorlistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumeratorlist

	return p
}

func (s *EnumeratorlistContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumeratorlistContext) Enumeratordefinition() IEnumeratordefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumeratordefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumeratordefinitionContext)
}

func (s *EnumeratorlistContext) Enumeratorlist() IEnumeratorlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumeratorlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumeratorlistContext)
}

func (s *EnumeratorlistContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *EnumeratorlistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumeratorlistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *EnumeratorlistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterEnumeratorlist(s)
	}
}

func (s *EnumeratorlistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitEnumeratorlist(s)
	}
}

func (s *EnumeratorlistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitEnumeratorlist(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Enumeratorlist() (localctx IEnumeratorlistContext) {
	return p.enumeratorlist(0)
}

func (p *CPP14Parser) enumeratorlist(_p int) (localctx IEnumeratorlistContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewEnumeratorlistContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IEnumeratorlistContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 176
	p.EnterRecursionRule(localctx, 176, CPP14ParserRULE_enumeratorlist, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1416)
		p.Enumeratordefinition()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1423)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewEnumeratorlistContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_enumeratorlist)
			p.SetState(1418)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(1419)
				p.Match(CPP14ParserComma)
			}
			{
				p.SetState(1420)
				p.Enumeratordefinition()
			}


		}
		p.SetState(1425)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext())
	}



	return localctx
}


// IEnumeratordefinitionContext is an interface to support dynamic dispatch.
type IEnumeratordefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumeratordefinitionContext differentiates from other interfaces.
	IsEnumeratordefinitionContext()
}

type EnumeratordefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumeratordefinitionContext() *EnumeratordefinitionContext {
	var p = new(EnumeratordefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumeratordefinition
	return p
}

func (*EnumeratordefinitionContext) IsEnumeratordefinitionContext() {}

func NewEnumeratordefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumeratordefinitionContext {
	var p = new(EnumeratordefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumeratordefinition

	return p
}

func (s *EnumeratordefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumeratordefinitionContext) Enumerator() IEnumeratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumeratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumeratorContext)
}

func (s *EnumeratordefinitionContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *EnumeratordefinitionContext) Constantexpression() IConstantexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantexpressionContext)
}

func (s *EnumeratordefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumeratordefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *EnumeratordefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterEnumeratordefinition(s)
	}
}

func (s *EnumeratordefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitEnumeratordefinition(s)
	}
}

func (s *EnumeratordefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitEnumeratordefinition(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Enumeratordefinition() (localctx IEnumeratordefinitionContext) {
	localctx = NewEnumeratordefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, CPP14ParserRULE_enumeratordefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1431)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1426)
			p.Enumerator()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1427)
			p.Enumerator()
		}
		{
			p.SetState(1428)
			p.Match(CPP14ParserAssign)
		}
		{
			p.SetState(1429)
			p.Constantexpression()
		}

	}


	return localctx
}


// IEnumeratorContext is an interface to support dynamic dispatch.
type IEnumeratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumeratorContext differentiates from other interfaces.
	IsEnumeratorContext()
}

type EnumeratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumeratorContext() *EnumeratorContext {
	var p = new(EnumeratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumerator
	return p
}

func (*EnumeratorContext) IsEnumeratorContext() {}

func NewEnumeratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumeratorContext {
	var p = new(EnumeratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumerator

	return p
}

func (s *EnumeratorContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumeratorContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *EnumeratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumeratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *EnumeratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterEnumerator(s)
	}
}

func (s *EnumeratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitEnumerator(s)
	}
}

func (s *EnumeratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitEnumerator(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Enumerator() (localctx IEnumeratorContext) {
	localctx = NewEnumeratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, CPP14ParserRULE_enumerator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1433)
		p.Match(CPP14ParserIdentifier)
	}



	return localctx
}


// INamespacenameContext is an interface to support dynamic dispatch.
type INamespacenameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespacenameContext differentiates from other interfaces.
	IsNamespacenameContext()
}

type NamespacenameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespacenameContext() *NamespacenameContext {
	var p = new(NamespacenameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_namespacename
	return p
}

func (*NamespacenameContext) IsNamespacenameContext() {}

func NewNamespacenameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespacenameContext {
	var p = new(NamespacenameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_namespacename

	return p
}

func (s *NamespacenameContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespacenameContext) Originalnamespacename() IOriginalnamespacenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOriginalnamespacenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOriginalnamespacenameContext)
}

func (s *NamespacenameContext) Namespacealias() INamespacealiasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespacealiasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespacealiasContext)
}

func (s *NamespacenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespacenameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NamespacenameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterNamespacename(s)
	}
}

func (s *NamespacenameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitNamespacename(s)
	}
}

func (s *NamespacenameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitNamespacename(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Namespacename() (localctx INamespacenameContext) {
	localctx = NewNamespacenameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, CPP14ParserRULE_namespacename)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1437)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 139, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1435)
			p.Originalnamespacename()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1436)
			p.Namespacealias()
		}

	}


	return localctx
}


// IOriginalnamespacenameContext is an interface to support dynamic dispatch.
type IOriginalnamespacenameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOriginalnamespacenameContext differentiates from other interfaces.
	IsOriginalnamespacenameContext()
}

type OriginalnamespacenameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOriginalnamespacenameContext() *OriginalnamespacenameContext {
	var p = new(OriginalnamespacenameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_originalnamespacename
	return p
}

func (*OriginalnamespacenameContext) IsOriginalnamespacenameContext() {}

func NewOriginalnamespacenameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OriginalnamespacenameContext {
	var p = new(OriginalnamespacenameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_originalnamespacename

	return p
}

func (s *OriginalnamespacenameContext) GetParser() antlr.Parser { return s.parser }

func (s *OriginalnamespacenameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *OriginalnamespacenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OriginalnamespacenameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *OriginalnamespacenameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterOriginalnamespacename(s)
	}
}

func (s *OriginalnamespacenameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitOriginalnamespacename(s)
	}
}

func (s *OriginalnamespacenameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitOriginalnamespacename(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Originalnamespacename() (localctx IOriginalnamespacenameContext) {
	localctx = NewOriginalnamespacenameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, CPP14ParserRULE_originalnamespacename)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1439)
		p.Match(CPP14ParserIdentifier)
	}



	return localctx
}


// INamespacedefinitionContext is an interface to support dynamic dispatch.
type INamespacedefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespacedefinitionContext differentiates from other interfaces.
	IsNamespacedefinitionContext()
}

type NamespacedefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespacedefinitionContext() *NamespacedefinitionContext {
	var p = new(NamespacedefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_namespacedefinition
	return p
}

func (*NamespacedefinitionContext) IsNamespacedefinitionContext() {}

func NewNamespacedefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespacedefinitionContext {
	var p = new(NamespacedefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_namespacedefinition

	return p
}

func (s *NamespacedefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespacedefinitionContext) Namednamespacedefinition() INamednamespacedefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamednamespacedefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamednamespacedefinitionContext)
}

func (s *NamespacedefinitionContext) Unnamednamespacedefinition() IUnnamednamespacedefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnnamednamespacedefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnnamednamespacedefinitionContext)
}

func (s *NamespacedefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespacedefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NamespacedefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterNamespacedefinition(s)
	}
}

func (s *NamespacedefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitNamespacedefinition(s)
	}
}

func (s *NamespacedefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitNamespacedefinition(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Namespacedefinition() (localctx INamespacedefinitionContext) {
	localctx = NewNamespacedefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, CPP14ParserRULE_namespacedefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1443)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 140, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1441)
			p.Namednamespacedefinition()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1442)
			p.Unnamednamespacedefinition()
		}

	}


	return localctx
}


// INamednamespacedefinitionContext is an interface to support dynamic dispatch.
type INamednamespacedefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamednamespacedefinitionContext differentiates from other interfaces.
	IsNamednamespacedefinitionContext()
}

type NamednamespacedefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamednamespacedefinitionContext() *NamednamespacedefinitionContext {
	var p = new(NamednamespacedefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_namednamespacedefinition
	return p
}

func (*NamednamespacedefinitionContext) IsNamednamespacedefinitionContext() {}

func NewNamednamespacedefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamednamespacedefinitionContext {
	var p = new(NamednamespacedefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_namednamespacedefinition

	return p
}

func (s *NamednamespacedefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *NamednamespacedefinitionContext) Originalnamespacedefinition() IOriginalnamespacedefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOriginalnamespacedefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOriginalnamespacedefinitionContext)
}

func (s *NamednamespacedefinitionContext) Extensionnamespacedefinition() IExtensionnamespacedefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExtensionnamespacedefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExtensionnamespacedefinitionContext)
}

func (s *NamednamespacedefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamednamespacedefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NamednamespacedefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterNamednamespacedefinition(s)
	}
}

func (s *NamednamespacedefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitNamednamespacedefinition(s)
	}
}

func (s *NamednamespacedefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitNamednamespacedefinition(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Namednamespacedefinition() (localctx INamednamespacedefinitionContext) {
	localctx = NewNamednamespacedefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, CPP14ParserRULE_namednamespacedefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1447)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 141, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1445)
			p.Originalnamespacedefinition()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1446)
			p.Extensionnamespacedefinition()
		}

	}


	return localctx
}


// IOriginalnamespacedefinitionContext is an interface to support dynamic dispatch.
type IOriginalnamespacedefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOriginalnamespacedefinitionContext differentiates from other interfaces.
	IsOriginalnamespacedefinitionContext()
}

type OriginalnamespacedefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOriginalnamespacedefinitionContext() *OriginalnamespacedefinitionContext {
	var p = new(OriginalnamespacedefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_originalnamespacedefinition
	return p
}

func (*OriginalnamespacedefinitionContext) IsOriginalnamespacedefinitionContext() {}

func NewOriginalnamespacedefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OriginalnamespacedefinitionContext {
	var p = new(OriginalnamespacedefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_originalnamespacedefinition

	return p
}

func (s *OriginalnamespacedefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *OriginalnamespacedefinitionContext) Namespace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNamespace, 0)
}

func (s *OriginalnamespacedefinitionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *OriginalnamespacedefinitionContext) LeftBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, 0)
}

func (s *OriginalnamespacedefinitionContext) Namespacebody() INamespacebodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespacebodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespacebodyContext)
}

func (s *OriginalnamespacedefinitionContext) RightBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, 0)
}

func (s *OriginalnamespacedefinitionContext) Inline() antlr.TerminalNode {
	return s.GetToken(CPP14ParserInline, 0)
}

func (s *OriginalnamespacedefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OriginalnamespacedefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *OriginalnamespacedefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterOriginalnamespacedefinition(s)
	}
}

func (s *OriginalnamespacedefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitOriginalnamespacedefinition(s)
	}
}

func (s *OriginalnamespacedefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitOriginalnamespacedefinition(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Originalnamespacedefinition() (localctx IOriginalnamespacedefinitionContext) {
	localctx = NewOriginalnamespacedefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, CPP14ParserRULE_originalnamespacedefinition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1450)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == CPP14ParserInline {
		{
			p.SetState(1449)
			p.Match(CPP14ParserInline)
		}

	}
	{
		p.SetState(1452)
		p.Match(CPP14ParserNamespace)
	}
	{
		p.SetState(1453)
		p.Match(CPP14ParserIdentifier)
	}
	{
		p.SetState(1454)
		p.Match(CPP14ParserLeftBrace)
	}
	{
		p.SetState(1455)
		p.Namespacebody()
	}
	{
		p.SetState(1456)
		p.Match(CPP14ParserRightBrace)
	}



	return localctx
}


// IExtensionnamespacedefinitionContext is an interface to support dynamic dispatch.
type IExtensionnamespacedefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExtensionnamespacedefinitionContext differentiates from other interfaces.
	IsExtensionnamespacedefinitionContext()
}

type ExtensionnamespacedefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtensionnamespacedefinitionContext() *ExtensionnamespacedefinitionContext {
	var p = new(ExtensionnamespacedefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_extensionnamespacedefinition
	return p
}

func (*ExtensionnamespacedefinitionContext) IsExtensionnamespacedefinitionContext() {}

func NewExtensionnamespacedefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExtensionnamespacedefinitionContext {
	var p = new(ExtensionnamespacedefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_extensionnamespacedefinition

	return p
}

func (s *ExtensionnamespacedefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExtensionnamespacedefinitionContext) Namespace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNamespace, 0)
}

func (s *ExtensionnamespacedefinitionContext) Originalnamespacename() IOriginalnamespacenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOriginalnamespacenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOriginalnamespacenameContext)
}

func (s *ExtensionnamespacedefinitionContext) LeftBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, 0)
}

func (s *ExtensionnamespacedefinitionContext) Namespacebody() INamespacebodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespacebodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespacebodyContext)
}

func (s *ExtensionnamespacedefinitionContext) RightBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, 0)
}

func (s *ExtensionnamespacedefinitionContext) Inline() antlr.TerminalNode {
	return s.GetToken(CPP14ParserInline, 0)
}

func (s *ExtensionnamespacedefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExtensionnamespacedefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ExtensionnamespacedefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterExtensionnamespacedefinition(s)
	}
}

func (s *ExtensionnamespacedefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitExtensionnamespacedefinition(s)
	}
}

func (s *ExtensionnamespacedefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitExtensionnamespacedefinition(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Extensionnamespacedefinition() (localctx IExtensionnamespacedefinitionContext) {
	localctx = NewExtensionnamespacedefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, CPP14ParserRULE_extensionnamespacedefinition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1459)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == CPP14ParserInline {
		{
			p.SetState(1458)
			p.Match(CPP14ParserInline)
		}

	}
	{
		p.SetState(1461)
		p.Match(CPP14ParserNamespace)
	}
	{
		p.SetState(1462)
		p.Originalnamespacename()
	}
	{
		p.SetState(1463)
		p.Match(CPP14ParserLeftBrace)
	}
	{
		p.SetState(1464)
		p.Namespacebody()
	}
	{
		p.SetState(1465)
		p.Match(CPP14ParserRightBrace)
	}



	return localctx
}


// IUnnamednamespacedefinitionContext is an interface to support dynamic dispatch.
type IUnnamednamespacedefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnnamednamespacedefinitionContext differentiates from other interfaces.
	IsUnnamednamespacedefinitionContext()
}

type UnnamednamespacedefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnnamednamespacedefinitionContext() *UnnamednamespacedefinitionContext {
	var p = new(UnnamednamespacedefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_unnamednamespacedefinition
	return p
}

func (*UnnamednamespacedefinitionContext) IsUnnamednamespacedefinitionContext() {}

func NewUnnamednamespacedefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnnamednamespacedefinitionContext {
	var p = new(UnnamednamespacedefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_unnamednamespacedefinition

	return p
}

func (s *UnnamednamespacedefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *UnnamednamespacedefinitionContext) Namespace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNamespace, 0)
}

func (s *UnnamednamespacedefinitionContext) LeftBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, 0)
}

func (s *UnnamednamespacedefinitionContext) Namespacebody() INamespacebodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespacebodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespacebodyContext)
}

func (s *UnnamednamespacedefinitionContext) RightBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, 0)
}

func (s *UnnamednamespacedefinitionContext) Inline() antlr.TerminalNode {
	return s.GetToken(CPP14ParserInline, 0)
}

func (s *UnnamednamespacedefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnnamednamespacedefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *UnnamednamespacedefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterUnnamednamespacedefinition(s)
	}
}

func (s *UnnamednamespacedefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitUnnamednamespacedefinition(s)
	}
}

func (s *UnnamednamespacedefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitUnnamednamespacedefinition(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Unnamednamespacedefinition() (localctx IUnnamednamespacedefinitionContext) {
	localctx = NewUnnamednamespacedefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, CPP14ParserRULE_unnamednamespacedefinition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1468)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == CPP14ParserInline {
		{
			p.SetState(1467)
			p.Match(CPP14ParserInline)
		}

	}
	{
		p.SetState(1470)
		p.Match(CPP14ParserNamespace)
	}
	{
		p.SetState(1471)
		p.Match(CPP14ParserLeftBrace)
	}
	{
		p.SetState(1472)
		p.Namespacebody()
	}
	{
		p.SetState(1473)
		p.Match(CPP14ParserRightBrace)
	}



	return localctx
}


// INamespacebodyContext is an interface to support dynamic dispatch.
type INamespacebodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespacebodyContext differentiates from other interfaces.
	IsNamespacebodyContext()
}

type NamespacebodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespacebodyContext() *NamespacebodyContext {
	var p = new(NamespacebodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_namespacebody
	return p
}

func (*NamespacebodyContext) IsNamespacebodyContext() {}

func NewNamespacebodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespacebodyContext {
	var p = new(NamespacebodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_namespacebody

	return p
}

func (s *NamespacebodyContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespacebodyContext) Declarationseq() IDeclarationseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationseqContext)
}

func (s *NamespacebodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespacebodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NamespacebodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterNamespacebody(s)
	}
}

func (s *NamespacebodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitNamespacebody(s)
	}
}

func (s *NamespacebodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitNamespacebody(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Namespacebody() (localctx INamespacebodyContext) {
	localctx = NewNamespacebodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, CPP14ParserRULE_namespacebody)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1476)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if ((((_la - 3)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 3))) & ((1 << (CPP14ParserT__2 - 3)) | (1 << (CPP14ParserAlignas - 3)) | (1 << (CPP14ParserAsm - 3)) | (1 << (CPP14ParserAuto - 3)) | (1 << (CPP14ParserBool - 3)) | (1 << (CPP14ParserChar - 3)) | (1 << (CPP14ParserChar16 - 3)) | (1 << (CPP14ParserChar32 - 3)) | (1 << (CPP14ParserClass - 3)) | (1 << (CPP14ParserConst - 3)) | (1 << (CPP14ParserConstexpr - 3)) | (1 << (CPP14ParserDecltype - 3)) | (1 << (CPP14ParserDouble - 3)) | (1 << (CPP14ParserEnum - 3)) | (1 << (CPP14ParserExplicit - 3)))) != 0) || ((((_la - 35)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 35))) & ((1 << (CPP14ParserExtern - 35)) | (1 << (CPP14ParserFloat - 35)) | (1 << (CPP14ParserFriend - 35)) | (1 << (CPP14ParserInline - 35)) | (1 << (CPP14ParserInt - 35)) | (1 << (CPP14ParserLong - 35)) | (1 << (CPP14ParserMutable - 35)) | (1 << (CPP14ParserNamespace - 35)) | (1 << (CPP14ParserOperator - 35)) | (1 << (CPP14ParserRegister - 35)) | (1 << (CPP14ParserShort - 35)) | (1 << (CPP14ParserSigned - 35)) | (1 << (CPP14ParserStatic - 35)) | (1 << (CPP14ParserStatic_assert - 35)) | (1 << (CPP14ParserStruct - 35)))) != 0) || ((((_la - 67)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 67))) & ((1 << (CPP14ParserTemplate - 67)) | (1 << (CPP14ParserThread_local - 67)) | (1 << (CPP14ParserTypedef - 67)) | (1 << (CPP14ParserTypename_ - 67)) | (1 << (CPP14ParserUnion - 67)) | (1 << (CPP14ParserUnsigned - 67)) | (1 << (CPP14ParserUsing - 67)) | (1 << (CPP14ParserVirtual - 67)) | (1 << (CPP14ParserVoid - 67)) | (1 << (CPP14ParserVolatile - 67)) | (1 << (CPP14ParserWchar - 67)) | (1 << (CPP14ParserLeftParen - 67)) | (1 << (CPP14ParserLeftBracket - 67)) | (1 << (CPP14ParserStar - 67)) | (1 << (CPP14ParserAnd - 67)) | (1 << (CPP14ParserTilde - 67)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (CPP14ParserDoublecolon - 128)) | (1 << (CPP14ParserSemi - 128)) | (1 << (CPP14ParserEllipsis - 128)) | (1 << (CPP14ParserIdentifier - 128)))) != 0) {
		{
			p.SetState(1475)
			p.declarationseq(0)
		}

	}



	return localctx
}


// INamespacealiasContext is an interface to support dynamic dispatch.
type INamespacealiasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespacealiasContext differentiates from other interfaces.
	IsNamespacealiasContext()
}

type NamespacealiasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespacealiasContext() *NamespacealiasContext {
	var p = new(NamespacealiasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_namespacealias
	return p
}

func (*NamespacealiasContext) IsNamespacealiasContext() {}

func NewNamespacealiasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespacealiasContext {
	var p = new(NamespacealiasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_namespacealias

	return p
}

func (s *NamespacealiasContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespacealiasContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *NamespacealiasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespacealiasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NamespacealiasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterNamespacealias(s)
	}
}

func (s *NamespacealiasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitNamespacealias(s)
	}
}

func (s *NamespacealiasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitNamespacealias(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Namespacealias() (localctx INamespacealiasContext) {
	localctx = NewNamespacealiasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, CPP14ParserRULE_namespacealias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1478)
		p.Match(CPP14ParserIdentifier)
	}



	return localctx
}


// INamespacealiasdefinitionContext is an interface to support dynamic dispatch.
type INamespacealiasdefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespacealiasdefinitionContext differentiates from other interfaces.
	IsNamespacealiasdefinitionContext()
}

type NamespacealiasdefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespacealiasdefinitionContext() *NamespacealiasdefinitionContext {
	var p = new(NamespacealiasdefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_namespacealiasdefinition
	return p
}

func (*NamespacealiasdefinitionContext) IsNamespacealiasdefinitionContext() {}

func NewNamespacealiasdefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespacealiasdefinitionContext {
	var p = new(NamespacealiasdefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_namespacealiasdefinition

	return p
}

func (s *NamespacealiasdefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespacealiasdefinitionContext) Namespace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNamespace, 0)
}

func (s *NamespacealiasdefinitionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *NamespacealiasdefinitionContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *NamespacealiasdefinitionContext) Qualifiednamespacespecifier() IQualifiednamespacespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiednamespacespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiednamespacespecifierContext)
}

func (s *NamespacealiasdefinitionContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *NamespacealiasdefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespacealiasdefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NamespacealiasdefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterNamespacealiasdefinition(s)
	}
}

func (s *NamespacealiasdefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitNamespacealiasdefinition(s)
	}
}

func (s *NamespacealiasdefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitNamespacealiasdefinition(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Namespacealiasdefinition() (localctx INamespacealiasdefinitionContext) {
	localctx = NewNamespacealiasdefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, CPP14ParserRULE_namespacealiasdefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1480)
		p.Match(CPP14ParserNamespace)
	}
	{
		p.SetState(1481)
		p.Match(CPP14ParserIdentifier)
	}
	{
		p.SetState(1482)
		p.Match(CPP14ParserAssign)
	}
	{
		p.SetState(1483)
		p.Qualifiednamespacespecifier()
	}
	{
		p.SetState(1484)
		p.Match(CPP14ParserSemi)
	}



	return localctx
}


// IQualifiednamespacespecifierContext is an interface to support dynamic dispatch.
type IQualifiednamespacespecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQualifiednamespacespecifierContext differentiates from other interfaces.
	IsQualifiednamespacespecifierContext()
}

type QualifiednamespacespecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualifiednamespacespecifierContext() *QualifiednamespacespecifierContext {
	var p = new(QualifiednamespacespecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_qualifiednamespacespecifier
	return p
}

func (*QualifiednamespacespecifierContext) IsQualifiednamespacespecifierContext() {}

func NewQualifiednamespacespecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifiednamespacespecifierContext {
	var p = new(QualifiednamespacespecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_qualifiednamespacespecifier

	return p
}

func (s *QualifiednamespacespecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifiednamespacespecifierContext) Namespacename() INamespacenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespacenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespacenameContext)
}

func (s *QualifiednamespacespecifierContext) Nestednamespecifier() INestednamespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestednamespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestednamespecifierContext)
}

func (s *QualifiednamespacespecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifiednamespacespecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *QualifiednamespacespecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterQualifiednamespacespecifier(s)
	}
}

func (s *QualifiednamespacespecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitQualifiednamespacespecifier(s)
	}
}

func (s *QualifiednamespacespecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitQualifiednamespacespecifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Qualifiednamespacespecifier() (localctx IQualifiednamespacespecifierContext) {
	localctx = NewQualifiednamespacespecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, CPP14ParserRULE_qualifiednamespacespecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1487)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1486)
			p.nestednamespecifier(0)
		}


	}
	{
		p.SetState(1489)
		p.Namespacename()
	}



	return localctx
}


// IUsingdeclarationContext is an interface to support dynamic dispatch.
type IUsingdeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUsingdeclarationContext differentiates from other interfaces.
	IsUsingdeclarationContext()
}

type UsingdeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsingdeclarationContext() *UsingdeclarationContext {
	var p = new(UsingdeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_usingdeclaration
	return p
}

func (*UsingdeclarationContext) IsUsingdeclarationContext() {}

func NewUsingdeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UsingdeclarationContext {
	var p = new(UsingdeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_usingdeclaration

	return p
}

func (s *UsingdeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *UsingdeclarationContext) Using() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUsing, 0)
}

func (s *UsingdeclarationContext) Nestednamespecifier() INestednamespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestednamespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestednamespecifierContext)
}

func (s *UsingdeclarationContext) Unqualifiedid() IUnqualifiedidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnqualifiedidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnqualifiedidContext)
}

func (s *UsingdeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *UsingdeclarationContext) Typename_() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTypename_, 0)
}

func (s *UsingdeclarationContext) Doublecolon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDoublecolon, 0)
}

func (s *UsingdeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UsingdeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *UsingdeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterUsingdeclaration(s)
	}
}

func (s *UsingdeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitUsingdeclaration(s)
	}
}

func (s *UsingdeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitUsingdeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Usingdeclaration() (localctx IUsingdeclarationContext) {
	localctx = NewUsingdeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, CPP14ParserRULE_usingdeclaration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1504)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1491)
			p.Match(CPP14ParserUsing)
		}
		p.SetState(1493)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserTypename_ {
			{
				p.SetState(1492)
				p.Match(CPP14ParserTypename_)
			}

		}
		{
			p.SetState(1495)
			p.nestednamespecifier(0)
		}
		{
			p.SetState(1496)
			p.Unqualifiedid()
		}
		{
			p.SetState(1497)
			p.Match(CPP14ParserSemi)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1499)
			p.Match(CPP14ParserUsing)
		}
		{
			p.SetState(1500)
			p.Match(CPP14ParserDoublecolon)
		}
		{
			p.SetState(1501)
			p.Unqualifiedid()
		}
		{
			p.SetState(1502)
			p.Match(CPP14ParserSemi)
		}

	}


	return localctx
}


// IUsingdirectiveContext is an interface to support dynamic dispatch.
type IUsingdirectiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUsingdirectiveContext differentiates from other interfaces.
	IsUsingdirectiveContext()
}

type UsingdirectiveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsingdirectiveContext() *UsingdirectiveContext {
	var p = new(UsingdirectiveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_usingdirective
	return p
}

func (*UsingdirectiveContext) IsUsingdirectiveContext() {}

func NewUsingdirectiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UsingdirectiveContext {
	var p = new(UsingdirectiveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_usingdirective

	return p
}

func (s *UsingdirectiveContext) GetParser() antlr.Parser { return s.parser }

func (s *UsingdirectiveContext) Using() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUsing, 0)
}

func (s *UsingdirectiveContext) Namespace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNamespace, 0)
}

func (s *UsingdirectiveContext) Namespacename() INamespacenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespacenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespacenameContext)
}

func (s *UsingdirectiveContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *UsingdirectiveContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *UsingdirectiveContext) Nestednamespecifier() INestednamespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestednamespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestednamespecifierContext)
}

func (s *UsingdirectiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UsingdirectiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *UsingdirectiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterUsingdirective(s)
	}
}

func (s *UsingdirectiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitUsingdirective(s)
	}
}

func (s *UsingdirectiveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitUsingdirective(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Usingdirective() (localctx IUsingdirectiveContext) {
	localctx = NewUsingdirectiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, CPP14ParserRULE_usingdirective)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1507)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(1506)
			p.attributespecifierseq(0)
		}

	}
	{
		p.SetState(1509)
		p.Match(CPP14ParserUsing)
	}
	{
		p.SetState(1510)
		p.Match(CPP14ParserNamespace)
	}
	p.SetState(1512)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 150, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1511)
			p.nestednamespecifier(0)
		}


	}
	{
		p.SetState(1514)
		p.Namespacename()
	}
	{
		p.SetState(1515)
		p.Match(CPP14ParserSemi)
	}



	return localctx
}


// IAsmdefinitionContext is an interface to support dynamic dispatch.
type IAsmdefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsmdefinitionContext differentiates from other interfaces.
	IsAsmdefinitionContext()
}

type AsmdefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsmdefinitionContext() *AsmdefinitionContext {
	var p = new(AsmdefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_asmdefinition
	return p
}

func (*AsmdefinitionContext) IsAsmdefinitionContext() {}

func NewAsmdefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsmdefinitionContext {
	var p = new(AsmdefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_asmdefinition

	return p
}

func (s *AsmdefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *AsmdefinitionContext) Asm() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAsm, 0)
}

func (s *AsmdefinitionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *AsmdefinitionContext) Stringliteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStringliteral, 0)
}

func (s *AsmdefinitionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *AsmdefinitionContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *AsmdefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsmdefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AsmdefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterAsmdefinition(s)
	}
}

func (s *AsmdefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitAsmdefinition(s)
	}
}

func (s *AsmdefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitAsmdefinition(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Asmdefinition() (localctx IAsmdefinitionContext) {
	localctx = NewAsmdefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, CPP14ParserRULE_asmdefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1517)
		p.Match(CPP14ParserAsm)
	}
	{
		p.SetState(1518)
		p.Match(CPP14ParserLeftParen)
	}
	{
		p.SetState(1519)
		p.Match(CPP14ParserStringliteral)
	}
	{
		p.SetState(1520)
		p.Match(CPP14ParserRightParen)
	}
	{
		p.SetState(1521)
		p.Match(CPP14ParserSemi)
	}



	return localctx
}


// ILinkagespecificationContext is an interface to support dynamic dispatch.
type ILinkagespecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLinkagespecificationContext differentiates from other interfaces.
	IsLinkagespecificationContext()
}

type LinkagespecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLinkagespecificationContext() *LinkagespecificationContext {
	var p = new(LinkagespecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_linkagespecification
	return p
}

func (*LinkagespecificationContext) IsLinkagespecificationContext() {}

func NewLinkagespecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LinkagespecificationContext {
	var p = new(LinkagespecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_linkagespecification

	return p
}

func (s *LinkagespecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *LinkagespecificationContext) Extern() antlr.TerminalNode {
	return s.GetToken(CPP14ParserExtern, 0)
}

func (s *LinkagespecificationContext) Stringliteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStringliteral, 0)
}

func (s *LinkagespecificationContext) LeftBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, 0)
}

func (s *LinkagespecificationContext) RightBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, 0)
}

func (s *LinkagespecificationContext) Declarationseq() IDeclarationseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationseqContext)
}

func (s *LinkagespecificationContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *LinkagespecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LinkagespecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *LinkagespecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterLinkagespecification(s)
	}
}

func (s *LinkagespecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitLinkagespecification(s)
	}
}

func (s *LinkagespecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitLinkagespecification(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Linkagespecification() (localctx ILinkagespecificationContext) {
	localctx = NewLinkagespecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, CPP14ParserRULE_linkagespecification)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1533)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1523)
			p.Match(CPP14ParserExtern)
		}
		{
			p.SetState(1524)
			p.Match(CPP14ParserStringliteral)
		}
		{
			p.SetState(1525)
			p.Match(CPP14ParserLeftBrace)
		}
		p.SetState(1527)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if ((((_la - 3)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 3))) & ((1 << (CPP14ParserT__2 - 3)) | (1 << (CPP14ParserAlignas - 3)) | (1 << (CPP14ParserAsm - 3)) | (1 << (CPP14ParserAuto - 3)) | (1 << (CPP14ParserBool - 3)) | (1 << (CPP14ParserChar - 3)) | (1 << (CPP14ParserChar16 - 3)) | (1 << (CPP14ParserChar32 - 3)) | (1 << (CPP14ParserClass - 3)) | (1 << (CPP14ParserConst - 3)) | (1 << (CPP14ParserConstexpr - 3)) | (1 << (CPP14ParserDecltype - 3)) | (1 << (CPP14ParserDouble - 3)) | (1 << (CPP14ParserEnum - 3)) | (1 << (CPP14ParserExplicit - 3)))) != 0) || ((((_la - 35)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 35))) & ((1 << (CPP14ParserExtern - 35)) | (1 << (CPP14ParserFloat - 35)) | (1 << (CPP14ParserFriend - 35)) | (1 << (CPP14ParserInline - 35)) | (1 << (CPP14ParserInt - 35)) | (1 << (CPP14ParserLong - 35)) | (1 << (CPP14ParserMutable - 35)) | (1 << (CPP14ParserNamespace - 35)) | (1 << (CPP14ParserOperator - 35)) | (1 << (CPP14ParserRegister - 35)) | (1 << (CPP14ParserShort - 35)) | (1 << (CPP14ParserSigned - 35)) | (1 << (CPP14ParserStatic - 35)) | (1 << (CPP14ParserStatic_assert - 35)) | (1 << (CPP14ParserStruct - 35)))) != 0) || ((((_la - 67)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 67))) & ((1 << (CPP14ParserTemplate - 67)) | (1 << (CPP14ParserThread_local - 67)) | (1 << (CPP14ParserTypedef - 67)) | (1 << (CPP14ParserTypename_ - 67)) | (1 << (CPP14ParserUnion - 67)) | (1 << (CPP14ParserUnsigned - 67)) | (1 << (CPP14ParserUsing - 67)) | (1 << (CPP14ParserVirtual - 67)) | (1 << (CPP14ParserVoid - 67)) | (1 << (CPP14ParserVolatile - 67)) | (1 << (CPP14ParserWchar - 67)) | (1 << (CPP14ParserLeftParen - 67)) | (1 << (CPP14ParserLeftBracket - 67)) | (1 << (CPP14ParserStar - 67)) | (1 << (CPP14ParserAnd - 67)) | (1 << (CPP14ParserTilde - 67)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (CPP14ParserDoublecolon - 128)) | (1 << (CPP14ParserSemi - 128)) | (1 << (CPP14ParserEllipsis - 128)) | (1 << (CPP14ParserIdentifier - 128)))) != 0) {
			{
				p.SetState(1526)
				p.declarationseq(0)
			}

		}
		{
			p.SetState(1529)
			p.Match(CPP14ParserRightBrace)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1530)
			p.Match(CPP14ParserExtern)
		}
		{
			p.SetState(1531)
			p.Match(CPP14ParserStringliteral)
		}
		{
			p.SetState(1532)
			p.Declaration()
		}

	}


	return localctx
}


// IAttributespecifierseqContext is an interface to support dynamic dispatch.
type IAttributespecifierseqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributespecifierseqContext differentiates from other interfaces.
	IsAttributespecifierseqContext()
}

type AttributespecifierseqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributespecifierseqContext() *AttributespecifierseqContext {
	var p = new(AttributespecifierseqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributespecifierseq
	return p
}

func (*AttributespecifierseqContext) IsAttributespecifierseqContext() {}

func NewAttributespecifierseqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributespecifierseqContext {
	var p = new(AttributespecifierseqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attributespecifierseq

	return p
}

func (s *AttributespecifierseqContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributespecifierseqContext) Attributespecifier() IAttributespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierContext)
}

func (s *AttributespecifierseqContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *AttributespecifierseqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributespecifierseqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AttributespecifierseqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterAttributespecifierseq(s)
	}
}

func (s *AttributespecifierseqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitAttributespecifierseq(s)
	}
}

func (s *AttributespecifierseqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitAttributespecifierseq(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Attributespecifierseq() (localctx IAttributespecifierseqContext) {
	return p.attributespecifierseq(0)
}

func (p *CPP14Parser) attributespecifierseq(_p int) (localctx IAttributespecifierseqContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewAttributespecifierseqContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAttributespecifierseqContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 212
	p.EnterRecursionRule(localctx, 212, CPP14ParserRULE_attributespecifierseq, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1536)
		p.Attributespecifier()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1542)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewAttributespecifierseqContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_attributespecifierseq)
			p.SetState(1538)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(1539)
				p.Attributespecifier()
			}


		}
		p.SetState(1544)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext())
	}



	return localctx
}


// IAttributespecifierContext is an interface to support dynamic dispatch.
type IAttributespecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributespecifierContext differentiates from other interfaces.
	IsAttributespecifierContext()
}

type AttributespecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributespecifierContext() *AttributespecifierContext {
	var p = new(AttributespecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributespecifier
	return p
}

func (*AttributespecifierContext) IsAttributespecifierContext() {}

func NewAttributespecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributespecifierContext {
	var p = new(AttributespecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attributespecifier

	return p
}

func (s *AttributespecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributespecifierContext) AllLeftBracket() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserLeftBracket)
}

func (s *AttributespecifierContext) LeftBracket(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, i)
}

func (s *AttributespecifierContext) Attributelist() IAttributelistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributelistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributelistContext)
}

func (s *AttributespecifierContext) AllRightBracket() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserRightBracket)
}

func (s *AttributespecifierContext) RightBracket(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, i)
}

func (s *AttributespecifierContext) Alignmentspecifier() IAlignmentspecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlignmentspecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlignmentspecifierContext)
}

func (s *AttributespecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributespecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AttributespecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterAttributespecifier(s)
	}
}

func (s *AttributespecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitAttributespecifier(s)
	}
}

func (s *AttributespecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitAttributespecifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Attributespecifier() (localctx IAttributespecifierContext) {
	localctx = NewAttributespecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, CPP14ParserRULE_attributespecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1552)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftBracket:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1545)
			p.Match(CPP14ParserLeftBracket)
		}
		{
			p.SetState(1546)
			p.Match(CPP14ParserLeftBracket)
		}
		{
			p.SetState(1547)
			p.attributelist(0)
		}
		{
			p.SetState(1548)
			p.Match(CPP14ParserRightBracket)
		}
		{
			p.SetState(1549)
			p.Match(CPP14ParserRightBracket)
		}


	case CPP14ParserAlignas:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1551)
			p.Alignmentspecifier()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IAlignmentspecifierContext is an interface to support dynamic dispatch.
type IAlignmentspecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlignmentspecifierContext differentiates from other interfaces.
	IsAlignmentspecifierContext()
}

type AlignmentspecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlignmentspecifierContext() *AlignmentspecifierContext {
	var p = new(AlignmentspecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_alignmentspecifier
	return p
}

func (*AlignmentspecifierContext) IsAlignmentspecifierContext() {}

func NewAlignmentspecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlignmentspecifierContext {
	var p = new(AlignmentspecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_alignmentspecifier

	return p
}

func (s *AlignmentspecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *AlignmentspecifierContext) Alignas() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAlignas, 0)
}

func (s *AlignmentspecifierContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *AlignmentspecifierContext) Thetypeid() IThetypeidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThetypeidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThetypeidContext)
}

func (s *AlignmentspecifierContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *AlignmentspecifierContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *AlignmentspecifierContext) Constantexpression() IConstantexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantexpressionContext)
}

func (s *AlignmentspecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlignmentspecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AlignmentspecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterAlignmentspecifier(s)
	}
}

func (s *AlignmentspecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitAlignmentspecifier(s)
	}
}

func (s *AlignmentspecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitAlignmentspecifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Alignmentspecifier() (localctx IAlignmentspecifierContext) {
	localctx = NewAlignmentspecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, CPP14ParserRULE_alignmentspecifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1570)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 157, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1554)
			p.Match(CPP14ParserAlignas)
		}
		{
			p.SetState(1555)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(1556)
			p.Thetypeid()
		}
		p.SetState(1558)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserEllipsis {
			{
				p.SetState(1557)
				p.Match(CPP14ParserEllipsis)
			}

		}
		{
			p.SetState(1560)
			p.Match(CPP14ParserRightParen)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1562)
			p.Match(CPP14ParserAlignas)
		}
		{
			p.SetState(1563)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(1564)
			p.Constantexpression()
		}
		p.SetState(1566)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserEllipsis {
			{
				p.SetState(1565)
				p.Match(CPP14ParserEllipsis)
			}

		}
		{
			p.SetState(1568)
			p.Match(CPP14ParserRightParen)
		}

	}


	return localctx
}


// IAttributelistContext is an interface to support dynamic dispatch.
type IAttributelistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributelistContext differentiates from other interfaces.
	IsAttributelistContext()
}

type AttributelistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributelistContext() *AttributelistContext {
	var p = new(AttributelistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributelist
	return p
}

func (*AttributelistContext) IsAttributelistContext() {}

func NewAttributelistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributelistContext {
	var p = new(AttributelistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attributelist

	return p
}

func (s *AttributelistContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributelistContext) Attribute() IAttributeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeContext)
}

func (s *AttributelistContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *AttributelistContext) Attributelist() IAttributelistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributelistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributelistContext)
}

func (s *AttributelistContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *AttributelistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributelistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AttributelistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterAttributelist(s)
	}
}

func (s *AttributelistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitAttributelist(s)
	}
}

func (s *AttributelistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitAttributelist(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Attributelist() (localctx IAttributelistContext) {
	return p.attributelist(0)
}

func (p *CPP14Parser) attributelist(_p int) (localctx IAttributelistContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewAttributelistContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAttributelistContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 218
	p.EnterRecursionRule(localctx, 218, CPP14ParserRULE_attributelist, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1579)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 159, p.GetParserRuleContext()) {
	case 1:
		p.SetState(1574)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1573)
				p.Attribute()
			}


		}


	case 2:
		{
			p.SetState(1576)
			p.Attribute()
		}
		{
			p.SetState(1577)
			p.Match(CPP14ParserEllipsis)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1593)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 162, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1591)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 161, p.GetParserRuleContext()) {
			case 1:
				localctx = NewAttributelistContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_attributelist)
				p.SetState(1581)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(1582)
					p.Match(CPP14ParserComma)
				}
				p.SetState(1584)
				p.GetErrorHandler().Sync(p)


				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 160, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1583)
						p.Attribute()
					}


				}


			case 2:
				localctx = NewAttributelistContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_attributelist)
				p.SetState(1586)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(1587)
					p.Match(CPP14ParserComma)
				}
				{
					p.SetState(1588)
					p.Attribute()
				}
				{
					p.SetState(1589)
					p.Match(CPP14ParserEllipsis)
				}

			}

		}
		p.SetState(1595)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 162, p.GetParserRuleContext())
	}



	return localctx
}


// IAttributeContext is an interface to support dynamic dispatch.
type IAttributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeContext differentiates from other interfaces.
	IsAttributeContext()
}

type AttributeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeContext() *AttributeContext {
	var p = new(AttributeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_attribute
	return p
}

func (*AttributeContext) IsAttributeContext() {}

func NewAttributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeContext {
	var p = new(AttributeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attribute

	return p
}

func (s *AttributeContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeContext) Attributetoken() IAttributetokenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributetokenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributetokenContext)
}

func (s *AttributeContext) Attributeargumentclause() IAttributeargumentclauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeargumentclauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeargumentclauseContext)
}

func (s *AttributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AttributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterAttribute(s)
	}
}

func (s *AttributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitAttribute(s)
	}
}

func (s *AttributeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitAttribute(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Attribute() (localctx IAttributeContext) {
	localctx = NewAttributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, CPP14ParserRULE_attribute)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1596)
		p.Attributetoken()
	}
	p.SetState(1598)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 163, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1597)
			p.Attributeargumentclause()
		}


	}



	return localctx
}


// IAttributetokenContext is an interface to support dynamic dispatch.
type IAttributetokenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributetokenContext differentiates from other interfaces.
	IsAttributetokenContext()
}

type AttributetokenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributetokenContext() *AttributetokenContext {
	var p = new(AttributetokenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributetoken
	return p
}

func (*AttributetokenContext) IsAttributetokenContext() {}

func NewAttributetokenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributetokenContext {
	var p = new(AttributetokenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attributetoken

	return p
}

func (s *AttributetokenContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributetokenContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *AttributetokenContext) Attributescopedtoken() IAttributescopedtokenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributescopedtokenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributescopedtokenContext)
}

func (s *AttributetokenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributetokenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AttributetokenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterAttributetoken(s)
	}
}

func (s *AttributetokenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitAttributetoken(s)
	}
}

func (s *AttributetokenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitAttributetoken(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Attributetoken() (localctx IAttributetokenContext) {
	localctx = NewAttributetokenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, CPP14ParserRULE_attributetoken)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1602)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 164, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1600)
			p.Match(CPP14ParserIdentifier)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1601)
			p.Attributescopedtoken()
		}

	}


	return localctx
}


// IAttributescopedtokenContext is an interface to support dynamic dispatch.
type IAttributescopedtokenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributescopedtokenContext differentiates from other interfaces.
	IsAttributescopedtokenContext()
}

type AttributescopedtokenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributescopedtokenContext() *AttributescopedtokenContext {
	var p = new(AttributescopedtokenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributescopedtoken
	return p
}

func (*AttributescopedtokenContext) IsAttributescopedtokenContext() {}

func NewAttributescopedtokenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributescopedtokenContext {
	var p = new(AttributescopedtokenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attributescopedtoken

	return p
}

func (s *AttributescopedtokenContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributescopedtokenContext) Attributenamespace() IAttributenamespaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributenamespaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributenamespaceContext)
}

func (s *AttributescopedtokenContext) Doublecolon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDoublecolon, 0)
}

func (s *AttributescopedtokenContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *AttributescopedtokenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributescopedtokenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AttributescopedtokenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterAttributescopedtoken(s)
	}
}

func (s *AttributescopedtokenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitAttributescopedtoken(s)
	}
}

func (s *AttributescopedtokenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitAttributescopedtoken(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Attributescopedtoken() (localctx IAttributescopedtokenContext) {
	localctx = NewAttributescopedtokenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, CPP14ParserRULE_attributescopedtoken)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1604)
		p.Attributenamespace()
	}
	{
		p.SetState(1605)
		p.Match(CPP14ParserDoublecolon)
	}
	{
		p.SetState(1606)
		p.Match(CPP14ParserIdentifier)
	}



	return localctx
}


// IAttributenamespaceContext is an interface to support dynamic dispatch.
type IAttributenamespaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributenamespaceContext differentiates from other interfaces.
	IsAttributenamespaceContext()
}

type AttributenamespaceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributenamespaceContext() *AttributenamespaceContext {
	var p = new(AttributenamespaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributenamespace
	return p
}

func (*AttributenamespaceContext) IsAttributenamespaceContext() {}

func NewAttributenamespaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributenamespaceContext {
	var p = new(AttributenamespaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attributenamespace

	return p
}

func (s *AttributenamespaceContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributenamespaceContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *AttributenamespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributenamespaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AttributenamespaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterAttributenamespace(s)
	}
}

func (s *AttributenamespaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitAttributenamespace(s)
	}
}

func (s *AttributenamespaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitAttributenamespace(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Attributenamespace() (localctx IAttributenamespaceContext) {
	localctx = NewAttributenamespaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, CPP14ParserRULE_attributenamespace)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1608)
		p.Match(CPP14ParserIdentifier)
	}



	return localctx
}


// IAttributeargumentclauseContext is an interface to support dynamic dispatch.
type IAttributeargumentclauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeargumentclauseContext differentiates from other interfaces.
	IsAttributeargumentclauseContext()
}

type AttributeargumentclauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeargumentclauseContext() *AttributeargumentclauseContext {
	var p = new(AttributeargumentclauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributeargumentclause
	return p
}

func (*AttributeargumentclauseContext) IsAttributeargumentclauseContext() {}

func NewAttributeargumentclauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeargumentclauseContext {
	var p = new(AttributeargumentclauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attributeargumentclause

	return p
}

func (s *AttributeargumentclauseContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeargumentclauseContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *AttributeargumentclauseContext) Balancedtokenseq() IBalancedtokenseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBalancedtokenseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBalancedtokenseqContext)
}

func (s *AttributeargumentclauseContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *AttributeargumentclauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeargumentclauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AttributeargumentclauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterAttributeargumentclause(s)
	}
}

func (s *AttributeargumentclauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitAttributeargumentclause(s)
	}
}

func (s *AttributeargumentclauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitAttributeargumentclause(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Attributeargumentclause() (localctx IAttributeargumentclauseContext) {
	localctx = NewAttributeargumentclauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, CPP14ParserRULE_attributeargumentclause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1610)
		p.Match(CPP14ParserLeftParen)
	}
	{
		p.SetState(1611)
		p.balancedtokenseq(0)
	}
	{
		p.SetState(1612)
		p.Match(CPP14ParserRightParen)
	}



	return localctx
}


// IBalancedtokenseqContext is an interface to support dynamic dispatch.
type IBalancedtokenseqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBalancedtokenseqContext differentiates from other interfaces.
	IsBalancedtokenseqContext()
}

type BalancedtokenseqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBalancedtokenseqContext() *BalancedtokenseqContext {
	var p = new(BalancedtokenseqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_balancedtokenseq
	return p
}

func (*BalancedtokenseqContext) IsBalancedtokenseqContext() {}

func NewBalancedtokenseqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BalancedtokenseqContext {
	var p = new(BalancedtokenseqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_balancedtokenseq

	return p
}

func (s *BalancedtokenseqContext) GetParser() antlr.Parser { return s.parser }

func (s *BalancedtokenseqContext) Balancedtoken() IBalancedtokenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBalancedtokenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBalancedtokenContext)
}

func (s *BalancedtokenseqContext) Balancedtokenseq() IBalancedtokenseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBalancedtokenseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBalancedtokenseqContext)
}

func (s *BalancedtokenseqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BalancedtokenseqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *BalancedtokenseqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterBalancedtokenseq(s)
	}
}

func (s *BalancedtokenseqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitBalancedtokenseq(s)
	}
}

func (s *BalancedtokenseqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitBalancedtokenseq(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Balancedtokenseq() (localctx IBalancedtokenseqContext) {
	return p.balancedtokenseq(0)
}

func (p *CPP14Parser) balancedtokenseq(_p int) (localctx IBalancedtokenseqContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBalancedtokenseqContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBalancedtokenseqContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 230
	p.EnterRecursionRule(localctx, 230, CPP14ParserRULE_balancedtokenseq, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1616)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 165, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1615)
			p.Balancedtoken()
		}


	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1622)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 166, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBalancedtokenseqContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_balancedtokenseq)
			p.SetState(1618)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(1619)
				p.Balancedtoken()
			}


		}
		p.SetState(1624)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 166, p.GetParserRuleContext())
	}



	return localctx
}


// IBalancedtokenContext is an interface to support dynamic dispatch.
type IBalancedtokenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBalancedtokenContext differentiates from other interfaces.
	IsBalancedtokenContext()
}

type BalancedtokenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBalancedtokenContext() *BalancedtokenContext {
	var p = new(BalancedtokenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_balancedtoken
	return p
}

func (*BalancedtokenContext) IsBalancedtokenContext() {}

func NewBalancedtokenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BalancedtokenContext {
	var p = new(BalancedtokenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_balancedtoken

	return p
}

func (s *BalancedtokenContext) GetParser() antlr.Parser { return s.parser }

func (s *BalancedtokenContext) AllLeftParen() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserLeftParen)
}

func (s *BalancedtokenContext) LeftParen(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, i)
}

func (s *BalancedtokenContext) Balancedtokenseq() IBalancedtokenseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBalancedtokenseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBalancedtokenseqContext)
}

func (s *BalancedtokenContext) AllRightParen() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserRightParen)
}

func (s *BalancedtokenContext) RightParen(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, i)
}

func (s *BalancedtokenContext) AllLeftBracket() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserLeftBracket)
}

func (s *BalancedtokenContext) LeftBracket(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, i)
}

func (s *BalancedtokenContext) AllRightBracket() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserRightBracket)
}

func (s *BalancedtokenContext) RightBracket(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, i)
}

func (s *BalancedtokenContext) AllLeftBrace() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserLeftBrace)
}

func (s *BalancedtokenContext) LeftBrace(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, i)
}

func (s *BalancedtokenContext) AllRightBrace() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserRightBrace)
}

func (s *BalancedtokenContext) RightBrace(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, i)
}

func (s *BalancedtokenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BalancedtokenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *BalancedtokenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterBalancedtoken(s)
	}
}

func (s *BalancedtokenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitBalancedtoken(s)
	}
}

func (s *BalancedtokenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitBalancedtoken(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Balancedtoken() (localctx IBalancedtokenContext) {
	localctx = NewBalancedtokenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, CPP14ParserRULE_balancedtoken)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1642)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftParen:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1625)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(1626)
			p.balancedtokenseq(0)
		}
		{
			p.SetState(1627)
			p.Match(CPP14ParserRightParen)
		}


	case CPP14ParserLeftBracket:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1629)
			p.Match(CPP14ParserLeftBracket)
		}
		{
			p.SetState(1630)
			p.balancedtokenseq(0)
		}
		{
			p.SetState(1631)
			p.Match(CPP14ParserRightBracket)
		}


	case CPP14ParserLeftBrace:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1633)
			p.Match(CPP14ParserLeftBrace)
		}
		{
			p.SetState(1634)
			p.balancedtokenseq(0)
		}
		{
			p.SetState(1635)
			p.Match(CPP14ParserRightBrace)
		}


	case CPP14ParserT__0, CPP14ParserT__1, CPP14ParserT__2, CPP14ParserT__3, CPP14ParserT__4, CPP14ParserT__5, CPP14ParserMultiLineMacro, CPP14ParserDirective, CPP14ParserAlignas, CPP14ParserAlignof, CPP14ParserAsm, CPP14ParserAuto, CPP14ParserBool, CPP14ParserBreak, CPP14ParserCase, CPP14ParserCatch, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserClass, CPP14ParserConst, CPP14ParserConstexpr, CPP14ParserConst_cast, CPP14ParserContinue, CPP14ParserDecltype, CPP14ParserDefault, CPP14ParserDelete, CPP14ParserDo, CPP14ParserDouble, CPP14ParserDynamic_cast, CPP14ParserElse, CPP14ParserEnum, CPP14ParserExplicit, CPP14ParserExport, CPP14ParserExtern, CPP14ParserFalse, CPP14ParserFinal, CPP14ParserFloat, CPP14ParserFor, CPP14ParserFriend, CPP14ParserGoto, CPP14ParserIf, CPP14ParserInline, CPP14ParserInt, CPP14ParserLong, CPP14ParserMutable, CPP14ParserNamespace, CPP14ParserNew, CPP14ParserNoexcept, CPP14ParserNullptr, CPP14ParserOperator, CPP14ParserOverride, CPP14ParserPrivate, CPP14ParserProtected, CPP14ParserPublic, CPP14ParserRegister, CPP14ParserReinterpret_cast, CPP14ParserReturn, CPP14ParserShort, CPP14ParserSigned, CPP14ParserSizeof, CPP14ParserStatic, CPP14ParserStatic_assert, CPP14ParserStatic_cast, CPP14ParserStruct, CPP14ParserSwitch, CPP14ParserTemplate, CPP14ParserThis, CPP14ParserThread_local, CPP14ParserThrow, CPP14ParserTrue, CPP14ParserTry, CPP14ParserTypedef, CPP14ParserTypeid_, CPP14ParserTypename_, CPP14ParserUnion, CPP14ParserUnsigned, CPP14ParserUsing, CPP14ParserVirtual, CPP14ParserVoid, CPP14ParserVolatile, CPP14ParserWchar, CPP14ParserWhile, CPP14ParserPlus, CPP14ParserMinus, CPP14ParserStar, CPP14ParserDiv, CPP14ParserMod, CPP14ParserCaret, CPP14ParserAnd, CPP14ParserOr, CPP14ParserTilde, CPP14ParserNot, CPP14ParserAssign, CPP14ParserLess, CPP14ParserGreater, CPP14ParserPlusAssign, CPP14ParserMinusAssign, CPP14ParserStarAssign, CPP14ParserDivAssign, CPP14ParserModAssign, CPP14ParserXorAssign, CPP14ParserAndAssign, CPP14ParserOrAssign, CPP14ParserLeftShift, CPP14ParserRightShift, CPP14ParserLeftShiftAssign, CPP14ParserRightShiftAssign, CPP14ParserEqual, CPP14ParserNotEqual, CPP14ParserLessEqual, CPP14ParserGreaterEqual, CPP14ParserAndAnd, CPP14ParserOrOr, CPP14ParserPlusPlus, CPP14ParserMinusMinus, CPP14ParserComma, CPP14ParserArrowStar, CPP14ParserArrow, CPP14ParserQuestion, CPP14ParserColon, CPP14ParserDoublecolon, CPP14ParserSemi, CPP14ParserDot, CPP14ParserDotStar, CPP14ParserEllipsis, CPP14ParserIdentifier, CPP14ParserIntegerliteral, CPP14ParserDecimalliteral, CPP14ParserOctalliteral, CPP14ParserHexadecimalliteral, CPP14ParserBinaryliteral, CPP14ParserIntegersuffix, CPP14ParserCharacterliteral, CPP14ParserFloatingliteral, CPP14ParserStringliteral, CPP14ParserUserdefinedintegerliteral, CPP14ParserUserdefinedfloatingliteral, CPP14ParserUserdefinedstringliteral, CPP14ParserUserdefinedcharacterliteral, CPP14ParserWhitespace, CPP14ParserNewline, CPP14ParserBlockComment, CPP14ParserLineComment:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(1638)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
					{
						p.SetState(1637)
						_la = p.GetTokenStream().LA(1)

						if _la <= 0 || ((((_la - 84)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 84))) & ((1 << (CPP14ParserLeftParen - 84)) | (1 << (CPP14ParserRightParen - 84)) | (1 << (CPP14ParserLeftBracket - 84)) | (1 << (CPP14ParserRightBracket - 84)) | (1 << (CPP14ParserLeftBrace - 84)) | (1 << (CPP14ParserRightBrace - 84)))) != 0)  {
							p.GetErrorHandler().RecoverInline(p)
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}
					}




			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(1640)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 167, p.GetParserRuleContext())
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IInitdeclaratorlistContext is an interface to support dynamic dispatch.
type IInitdeclaratorlistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitdeclaratorlistContext differentiates from other interfaces.
	IsInitdeclaratorlistContext()
}

type InitdeclaratorlistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitdeclaratorlistContext() *InitdeclaratorlistContext {
	var p = new(InitdeclaratorlistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_initdeclaratorlist
	return p
}

func (*InitdeclaratorlistContext) IsInitdeclaratorlistContext() {}

func NewInitdeclaratorlistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitdeclaratorlistContext {
	var p = new(InitdeclaratorlistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_initdeclaratorlist

	return p
}

func (s *InitdeclaratorlistContext) GetParser() antlr.Parser { return s.parser }

func (s *InitdeclaratorlistContext) Initdeclarator() IInitdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitdeclaratorContext)
}

func (s *InitdeclaratorlistContext) Initdeclaratorlist() IInitdeclaratorlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitdeclaratorlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitdeclaratorlistContext)
}

func (s *InitdeclaratorlistContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *InitdeclaratorlistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitdeclaratorlistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *InitdeclaratorlistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterInitdeclaratorlist(s)
	}
}

func (s *InitdeclaratorlistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitInitdeclaratorlist(s)
	}
}

func (s *InitdeclaratorlistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitInitdeclaratorlist(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Initdeclaratorlist() (localctx IInitdeclaratorlistContext) {
	return p.initdeclaratorlist(0)
}

func (p *CPP14Parser) initdeclaratorlist(_p int) (localctx IInitdeclaratorlistContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewInitdeclaratorlistContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IInitdeclaratorlistContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 234
	p.EnterRecursionRule(localctx, 234, CPP14ParserRULE_initdeclaratorlist, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1645)
		p.Initdeclarator()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1652)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 169, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewInitdeclaratorlistContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_initdeclaratorlist)
			p.SetState(1647)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(1648)
				p.Match(CPP14ParserComma)
			}
			{
				p.SetState(1649)
				p.Initdeclarator()
			}


		}
		p.SetState(1654)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 169, p.GetParserRuleContext())
	}



	return localctx
}


// IInitdeclaratorContext is an interface to support dynamic dispatch.
type IInitdeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitdeclaratorContext differentiates from other interfaces.
	IsInitdeclaratorContext()
}

type InitdeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitdeclaratorContext() *InitdeclaratorContext {
	var p = new(InitdeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_initdeclarator
	return p
}

func (*InitdeclaratorContext) IsInitdeclaratorContext() {}

func NewInitdeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitdeclaratorContext {
	var p = new(InitdeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_initdeclarator

	return p
}

func (s *InitdeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *InitdeclaratorContext) Declarator() IDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *InitdeclaratorContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *InitdeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitdeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *InitdeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterInitdeclarator(s)
	}
}

func (s *InitdeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitInitdeclarator(s)
	}
}

func (s *InitdeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitInitdeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Initdeclarator() (localctx IInitdeclaratorContext) {
	localctx = NewInitdeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, CPP14ParserRULE_initdeclarator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1655)
		p.Declarator()
	}
	p.SetState(1657)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 170, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1656)
			p.Initializer()
		}


	}



	return localctx
}


// IDeclaratorContext is an interface to support dynamic dispatch.
type IDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclaratorContext differentiates from other interfaces.
	IsDeclaratorContext()
}

type DeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclaratorContext() *DeclaratorContext {
	var p = new(DeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_declarator
	return p
}

func (*DeclaratorContext) IsDeclaratorContext() {}

func NewDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclaratorContext {
	var p = new(DeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declarator

	return p
}

func (s *DeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclaratorContext) Ptrdeclarator() IPtrdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPtrdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPtrdeclaratorContext)
}

func (s *DeclaratorContext) Noptrdeclarator() INoptrdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoptrdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoptrdeclaratorContext)
}

func (s *DeclaratorContext) Parametersandqualifiers() IParametersandqualifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametersandqualifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametersandqualifiersContext)
}

func (s *DeclaratorContext) Trailingreturntype() ITrailingreturntypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrailingreturntypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrailingreturntypeContext)
}

func (s *DeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *DeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterDeclarator(s)
	}
}

func (s *DeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitDeclarator(s)
	}
}

func (s *DeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitDeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Declarator() (localctx IDeclaratorContext) {
	localctx = NewDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, CPP14ParserRULE_declarator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1664)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 171, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1659)
			p.Ptrdeclarator()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1660)
			p.noptrdeclarator(0)
		}
		{
			p.SetState(1661)
			p.Parametersandqualifiers()
		}
		{
			p.SetState(1662)
			p.Trailingreturntype()
		}

	}


	return localctx
}


// IPtrdeclaratorContext is an interface to support dynamic dispatch.
type IPtrdeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPtrdeclaratorContext differentiates from other interfaces.
	IsPtrdeclaratorContext()
}

type PtrdeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPtrdeclaratorContext() *PtrdeclaratorContext {
	var p = new(PtrdeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_ptrdeclarator
	return p
}

func (*PtrdeclaratorContext) IsPtrdeclaratorContext() {}

func NewPtrdeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PtrdeclaratorContext {
	var p = new(PtrdeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_ptrdeclarator

	return p
}

func (s *PtrdeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *PtrdeclaratorContext) Noptrdeclarator() INoptrdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoptrdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoptrdeclaratorContext)
}

func (s *PtrdeclaratorContext) Ptroperator() IPtroperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPtroperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPtroperatorContext)
}

func (s *PtrdeclaratorContext) Ptrdeclarator() IPtrdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPtrdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPtrdeclaratorContext)
}

func (s *PtrdeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PtrdeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PtrdeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterPtrdeclarator(s)
	}
}

func (s *PtrdeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitPtrdeclarator(s)
	}
}

func (s *PtrdeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitPtrdeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Ptrdeclarator() (localctx IPtrdeclaratorContext) {
	localctx = NewPtrdeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, CPP14ParserRULE_ptrdeclarator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1670)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 172, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1666)
			p.noptrdeclarator(0)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1667)
			p.Ptroperator()
		}
		{
			p.SetState(1668)
			p.Ptrdeclarator()
		}

	}


	return localctx
}


// INoptrdeclaratorContext is an interface to support dynamic dispatch.
type INoptrdeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNoptrdeclaratorContext differentiates from other interfaces.
	IsNoptrdeclaratorContext()
}

type NoptrdeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoptrdeclaratorContext() *NoptrdeclaratorContext {
	var p = new(NoptrdeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_noptrdeclarator
	return p
}

func (*NoptrdeclaratorContext) IsNoptrdeclaratorContext() {}

func NewNoptrdeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoptrdeclaratorContext {
	var p = new(NoptrdeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_noptrdeclarator

	return p
}

func (s *NoptrdeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *NoptrdeclaratorContext) Declaratorid() IDeclaratoridContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratoridContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratoridContext)
}

func (s *NoptrdeclaratorContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *NoptrdeclaratorContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NoptrdeclaratorContext) Ptrdeclarator() IPtrdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPtrdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPtrdeclaratorContext)
}

func (s *NoptrdeclaratorContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NoptrdeclaratorContext) Noptrdeclarator() INoptrdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoptrdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoptrdeclaratorContext)
}

func (s *NoptrdeclaratorContext) Parametersandqualifiers() IParametersandqualifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametersandqualifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametersandqualifiersContext)
}

func (s *NoptrdeclaratorContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *NoptrdeclaratorContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *NoptrdeclaratorContext) Constantexpression() IConstantexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantexpressionContext)
}

func (s *NoptrdeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoptrdeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NoptrdeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterNoptrdeclarator(s)
	}
}

func (s *NoptrdeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitNoptrdeclarator(s)
	}
}

func (s *NoptrdeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitNoptrdeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Noptrdeclarator() (localctx INoptrdeclaratorContext) {
	return p.noptrdeclarator(0)
}

func (p *CPP14Parser) noptrdeclarator(_p int) (localctx INoptrdeclaratorContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewNoptrdeclaratorContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx INoptrdeclaratorContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 242
	p.EnterRecursionRule(localctx, 242, CPP14ParserRULE_noptrdeclarator, _p)
	var _la int


	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1681)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserDecltype, CPP14ParserOperator, CPP14ParserTilde, CPP14ParserDoublecolon, CPP14ParserEllipsis, CPP14ParserIdentifier:
		{
			p.SetState(1673)
			p.Declaratorid()
		}
		p.SetState(1675)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1674)
				p.attributespecifierseq(0)
			}


		}


	case CPP14ParserLeftParen:
		{
			p.SetState(1677)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(1678)
			p.Ptrdeclarator()
		}
		{
			p.SetState(1679)
			p.Match(CPP14ParserRightParen)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1696)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1694)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 177, p.GetParserRuleContext()) {
			case 1:
				localctx = NewNoptrdeclaratorContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_noptrdeclarator)
				p.SetState(1683)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(1684)
					p.Parametersandqualifiers()
				}


			case 2:
				localctx = NewNoptrdeclaratorContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_noptrdeclarator)
				p.SetState(1685)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1686)
					p.Match(CPP14ParserLeftBracket)
				}
				p.SetState(1688)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << CPP14ParserT__0) | (1 << CPP14ParserT__1) | (1 << CPP14ParserAlignof) | (1 << CPP14ParserAuto) | (1 << CPP14ParserBool) | (1 << CPP14ParserChar) | (1 << CPP14ParserChar16) | (1 << CPP14ParserChar32) | (1 << CPP14ParserConst_cast) | (1 << CPP14ParserDecltype) | (1 << CPP14ParserDelete) | (1 << CPP14ParserDouble) | (1 << CPP14ParserDynamic_cast))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (CPP14ParserFalse - 36)) | (1 << (CPP14ParserFloat - 36)) | (1 << (CPP14ParserInt - 36)) | (1 << (CPP14ParserLong - 36)) | (1 << (CPP14ParserNew - 36)) | (1 << (CPP14ParserNoexcept - 36)) | (1 << (CPP14ParserNullptr - 36)) | (1 << (CPP14ParserOperator - 36)) | (1 << (CPP14ParserReinterpret_cast - 36)) | (1 << (CPP14ParserShort - 36)) | (1 << (CPP14ParserSigned - 36)) | (1 << (CPP14ParserSizeof - 36)) | (1 << (CPP14ParserStatic_cast - 36)))) != 0) || ((((_la - 68)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 68))) & ((1 << (CPP14ParserThis - 68)) | (1 << (CPP14ParserTrue - 68)) | (1 << (CPP14ParserTypeid_ - 68)) | (1 << (CPP14ParserTypename_ - 68)) | (1 << (CPP14ParserUnsigned - 68)) | (1 << (CPP14ParserVoid - 68)) | (1 << (CPP14ParserWchar - 68)) | (1 << (CPP14ParserLeftParen - 68)) | (1 << (CPP14ParserLeftBracket - 68)) | (1 << (CPP14ParserPlus - 68)) | (1 << (CPP14ParserMinus - 68)) | (1 << (CPP14ParserStar - 68)) | (1 << (CPP14ParserAnd - 68)) | (1 << (CPP14ParserOr - 68)) | (1 << (CPP14ParserTilde - 68)))) != 0) || ((((_la - 121)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 121))) & ((1 << (CPP14ParserPlusPlus - 121)) | (1 << (CPP14ParserMinusMinus - 121)) | (1 << (CPP14ParserDoublecolon - 121)) | (1 << (CPP14ParserIdentifier - 121)) | (1 << (CPP14ParserIntegerliteral - 121)) | (1 << (CPP14ParserCharacterliteral - 121)) | (1 << (CPP14ParserFloatingliteral - 121)) | (1 << (CPP14ParserStringliteral - 121)) | (1 << (CPP14ParserUserdefinedintegerliteral - 121)) | (1 << (CPP14ParserUserdefinedfloatingliteral - 121)) | (1 << (CPP14ParserUserdefinedstringliteral - 121)) | (1 << (CPP14ParserUserdefinedcharacterliteral - 121)))) != 0) {
					{
						p.SetState(1687)
						p.Constantexpression()
					}

				}
				{
					p.SetState(1690)
					p.Match(CPP14ParserRightBracket)
				}
				p.SetState(1692)
				p.GetErrorHandler().Sync(p)


				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 176, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1691)
						p.attributespecifierseq(0)
					}


				}

			}

		}
		p.SetState(1698)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext())
	}



	return localctx
}


// IParametersandqualifiersContext is an interface to support dynamic dispatch.
type IParametersandqualifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParametersandqualifiersContext differentiates from other interfaces.
	IsParametersandqualifiersContext()
}

type ParametersandqualifiersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParametersandqualifiersContext() *ParametersandqualifiersContext {
	var p = new(ParametersandqualifiersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_parametersandqualifiers
	return p
}

func (*ParametersandqualifiersContext) IsParametersandqualifiersContext() {}

func NewParametersandqualifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParametersandqualifiersContext {
	var p = new(ParametersandqualifiersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_parametersandqualifiers

	return p
}

func (s *ParametersandqualifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *ParametersandqualifiersContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *ParametersandqualifiersContext) Parameterdeclarationclause() IParameterdeclarationclauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterdeclarationclauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterdeclarationclauseContext)
}

func (s *ParametersandqualifiersContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *ParametersandqualifiersContext) Cvqualifierseq() ICvqualifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICvqualifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICvqualifierseqContext)
}

func (s *ParametersandqualifiersContext) Refqualifier() IRefqualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRefqualifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRefqualifierContext)
}

func (s *ParametersandqualifiersContext) Exceptionspecification() IExceptionspecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExceptionspecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExceptionspecificationContext)
}

func (s *ParametersandqualifiersContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *ParametersandqualifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParametersandqualifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ParametersandqualifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterParametersandqualifiers(s)
	}
}

func (s *ParametersandqualifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitParametersandqualifiers(s)
	}
}

func (s *ParametersandqualifiersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitParametersandqualifiers(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Parametersandqualifiers() (localctx IParametersandqualifiersContext) {
	localctx = NewParametersandqualifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, CPP14ParserRULE_parametersandqualifiers)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1699)
		p.Match(CPP14ParserLeftParen)
	}
	{
		p.SetState(1700)
		p.Parameterdeclarationclause()
	}
	{
		p.SetState(1701)
		p.Match(CPP14ParserRightParen)
	}
	p.SetState(1703)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 179, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1702)
			p.Cvqualifierseq()
		}


	}
	p.SetState(1706)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 180, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1705)
			p.Refqualifier()
		}


	}
	p.SetState(1709)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 181, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1708)
			p.Exceptionspecification()
		}


	}
	p.SetState(1712)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 182, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1711)
			p.attributespecifierseq(0)
		}


	}



	return localctx
}


// ITrailingreturntypeContext is an interface to support dynamic dispatch.
type ITrailingreturntypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrailingreturntypeContext differentiates from other interfaces.
	IsTrailingreturntypeContext()
}

type TrailingreturntypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrailingreturntypeContext() *TrailingreturntypeContext {
	var p = new(TrailingreturntypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_trailingreturntype
	return p
}

func (*TrailingreturntypeContext) IsTrailingreturntypeContext() {}

func NewTrailingreturntypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TrailingreturntypeContext {
	var p = new(TrailingreturntypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_trailingreturntype

	return p
}

func (s *TrailingreturntypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TrailingreturntypeContext) Arrow() antlr.TerminalNode {
	return s.GetToken(CPP14ParserArrow, 0)
}

func (s *TrailingreturntypeContext) Trailingtypespecifierseq() ITrailingtypespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrailingtypespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrailingtypespecifierseqContext)
}

func (s *TrailingreturntypeContext) Abstractdeclarator() IAbstractdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAbstractdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAbstractdeclaratorContext)
}

func (s *TrailingreturntypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TrailingreturntypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TrailingreturntypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTrailingreturntype(s)
	}
}

func (s *TrailingreturntypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTrailingreturntype(s)
	}
}

func (s *TrailingreturntypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTrailingreturntype(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Trailingreturntype() (localctx ITrailingreturntypeContext) {
	localctx = NewTrailingreturntypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, CPP14ParserRULE_trailingreturntype)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1714)
		p.Match(CPP14ParserArrow)
	}
	{
		p.SetState(1715)
		p.Trailingtypespecifierseq()
	}
	p.SetState(1717)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 183, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1716)
			p.Abstractdeclarator()
		}


	}



	return localctx
}


// IPtroperatorContext is an interface to support dynamic dispatch.
type IPtroperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPtroperatorContext differentiates from other interfaces.
	IsPtroperatorContext()
}

type PtroperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPtroperatorContext() *PtroperatorContext {
	var p = new(PtroperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_ptroperator
	return p
}

func (*PtroperatorContext) IsPtroperatorContext() {}

func NewPtroperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PtroperatorContext {
	var p = new(PtroperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_ptroperator

	return p
}

func (s *PtroperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PtroperatorContext) Star() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStar, 0)
}

func (s *PtroperatorContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *PtroperatorContext) Cvqualifierseq() ICvqualifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICvqualifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICvqualifierseqContext)
}

func (s *PtroperatorContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *PtroperatorContext) Nestednamespecifier() INestednamespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestednamespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestednamespecifierContext)
}

func (s *PtroperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PtroperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PtroperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterPtroperator(s)
	}
}

func (s *PtroperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitPtroperator(s)
	}
}

func (s *PtroperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitPtroperator(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Ptroperator() (localctx IPtroperatorContext) {
	localctx = NewPtroperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, CPP14ParserRULE_ptroperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1742)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserStar:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1719)
			p.Match(CPP14ParserStar)
		}
		p.SetState(1721)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1720)
				p.attributespecifierseq(0)
			}


		}
		p.SetState(1724)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 185, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1723)
				p.Cvqualifierseq()
			}


		}


	case CPP14ParserAnd:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1726)
			p.Match(CPP14ParserAnd)
		}
		p.SetState(1728)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1727)
				p.attributespecifierseq(0)
			}


		}


	case CPP14ParserT__2:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1730)
			p.Match(CPP14ParserT__2)
		}
		p.SetState(1732)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 187, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1731)
				p.attributespecifierseq(0)
			}


		}


	case CPP14ParserDecltype, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1734)
			p.nestednamespecifier(0)
		}
		{
			p.SetState(1735)
			p.Match(CPP14ParserStar)
		}
		p.SetState(1737)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 188, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1736)
				p.attributespecifierseq(0)
			}


		}
		p.SetState(1740)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1739)
				p.Cvqualifierseq()
			}


		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ICvqualifierseqContext is an interface to support dynamic dispatch.
type ICvqualifierseqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCvqualifierseqContext differentiates from other interfaces.
	IsCvqualifierseqContext()
}

type CvqualifierseqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCvqualifierseqContext() *CvqualifierseqContext {
	var p = new(CvqualifierseqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_cvqualifierseq
	return p
}

func (*CvqualifierseqContext) IsCvqualifierseqContext() {}

func NewCvqualifierseqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CvqualifierseqContext {
	var p = new(CvqualifierseqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_cvqualifierseq

	return p
}

func (s *CvqualifierseqContext) GetParser() antlr.Parser { return s.parser }

func (s *CvqualifierseqContext) Cvqualifier() ICvqualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICvqualifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICvqualifierContext)
}

func (s *CvqualifierseqContext) Cvqualifierseq() ICvqualifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICvqualifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICvqualifierseqContext)
}

func (s *CvqualifierseqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CvqualifierseqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *CvqualifierseqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterCvqualifierseq(s)
	}
}

func (s *CvqualifierseqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitCvqualifierseq(s)
	}
}

func (s *CvqualifierseqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitCvqualifierseq(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Cvqualifierseq() (localctx ICvqualifierseqContext) {
	localctx = NewCvqualifierseqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, CPP14ParserRULE_cvqualifierseq)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1744)
		p.Cvqualifier()
	}
	p.SetState(1746)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 191, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1745)
			p.Cvqualifierseq()
		}


	}



	return localctx
}


// ICvqualifierContext is an interface to support dynamic dispatch.
type ICvqualifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCvqualifierContext differentiates from other interfaces.
	IsCvqualifierContext()
}

type CvqualifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCvqualifierContext() *CvqualifierContext {
	var p = new(CvqualifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_cvqualifier
	return p
}

func (*CvqualifierContext) IsCvqualifierContext() {}

func NewCvqualifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CvqualifierContext {
	var p = new(CvqualifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_cvqualifier

	return p
}

func (s *CvqualifierContext) GetParser() antlr.Parser { return s.parser }

func (s *CvqualifierContext) Const() antlr.TerminalNode {
	return s.GetToken(CPP14ParserConst, 0)
}

func (s *CvqualifierContext) Volatile() antlr.TerminalNode {
	return s.GetToken(CPP14ParserVolatile, 0)
}

func (s *CvqualifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CvqualifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *CvqualifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterCvqualifier(s)
	}
}

func (s *CvqualifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitCvqualifier(s)
	}
}

func (s *CvqualifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitCvqualifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Cvqualifier() (localctx ICvqualifierContext) {
	localctx = NewCvqualifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, CPP14ParserRULE_cvqualifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1748)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserConst || _la == CPP14ParserVolatile) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IRefqualifierContext is an interface to support dynamic dispatch.
type IRefqualifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRefqualifierContext differentiates from other interfaces.
	IsRefqualifierContext()
}

type RefqualifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRefqualifierContext() *RefqualifierContext {
	var p = new(RefqualifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_refqualifier
	return p
}

func (*RefqualifierContext) IsRefqualifierContext() {}

func NewRefqualifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RefqualifierContext {
	var p = new(RefqualifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_refqualifier

	return p
}

func (s *RefqualifierContext) GetParser() antlr.Parser { return s.parser }

func (s *RefqualifierContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *RefqualifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RefqualifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *RefqualifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterRefqualifier(s)
	}
}

func (s *RefqualifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitRefqualifier(s)
	}
}

func (s *RefqualifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitRefqualifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Refqualifier() (localctx IRefqualifierContext) {
	localctx = NewRefqualifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, CPP14ParserRULE_refqualifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1750)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserT__2 || _la == CPP14ParserAnd) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IDeclaratoridContext is an interface to support dynamic dispatch.
type IDeclaratoridContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclaratoridContext differentiates from other interfaces.
	IsDeclaratoridContext()
}

type DeclaratoridContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclaratoridContext() *DeclaratoridContext {
	var p = new(DeclaratoridContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_declaratorid
	return p
}

func (*DeclaratoridContext) IsDeclaratoridContext() {}

func NewDeclaratoridContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclaratoridContext {
	var p = new(DeclaratoridContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declaratorid

	return p
}

func (s *DeclaratoridContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclaratoridContext) Idexpression() IIdexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdexpressionContext)
}

func (s *DeclaratoridContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *DeclaratoridContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclaratoridContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *DeclaratoridContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterDeclaratorid(s)
	}
}

func (s *DeclaratoridContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitDeclaratorid(s)
	}
}

func (s *DeclaratoridContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitDeclaratorid(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Declaratorid() (localctx IDeclaratoridContext) {
	localctx = NewDeclaratoridContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, CPP14ParserRULE_declaratorid)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1753)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == CPP14ParserEllipsis {
		{
			p.SetState(1752)
			p.Match(CPP14ParserEllipsis)
		}

	}
	{
		p.SetState(1755)
		p.Idexpression()
	}



	return localctx
}


// IThetypeidContext is an interface to support dynamic dispatch.
type IThetypeidContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThetypeidContext differentiates from other interfaces.
	IsThetypeidContext()
}

type ThetypeidContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThetypeidContext() *ThetypeidContext {
	var p = new(ThetypeidContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_thetypeid
	return p
}

func (*ThetypeidContext) IsThetypeidContext() {}

func NewThetypeidContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThetypeidContext {
	var p = new(ThetypeidContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_thetypeid

	return p
}

func (s *ThetypeidContext) GetParser() antlr.Parser { return s.parser }

func (s *ThetypeidContext) Typespecifierseq() ITypespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypespecifierseqContext)
}

func (s *ThetypeidContext) Abstractdeclarator() IAbstractdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAbstractdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAbstractdeclaratorContext)
}

func (s *ThetypeidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThetypeidContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ThetypeidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterThetypeid(s)
	}
}

func (s *ThetypeidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitThetypeid(s)
	}
}

func (s *ThetypeidContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitThetypeid(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Thetypeid() (localctx IThetypeidContext) {
	localctx = NewThetypeidContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, CPP14ParserRULE_thetypeid)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1757)
		p.Typespecifierseq()
	}
	p.SetState(1759)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 193, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1758)
			p.Abstractdeclarator()
		}


	}



	return localctx
}


// IAbstractdeclaratorContext is an interface to support dynamic dispatch.
type IAbstractdeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAbstractdeclaratorContext differentiates from other interfaces.
	IsAbstractdeclaratorContext()
}

type AbstractdeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAbstractdeclaratorContext() *AbstractdeclaratorContext {
	var p = new(AbstractdeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_abstractdeclarator
	return p
}

func (*AbstractdeclaratorContext) IsAbstractdeclaratorContext() {}

func NewAbstractdeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AbstractdeclaratorContext {
	var p = new(AbstractdeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_abstractdeclarator

	return p
}

func (s *AbstractdeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *AbstractdeclaratorContext) Ptrabstractdeclarator() IPtrabstractdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPtrabstractdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPtrabstractdeclaratorContext)
}

func (s *AbstractdeclaratorContext) Parametersandqualifiers() IParametersandqualifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametersandqualifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametersandqualifiersContext)
}

func (s *AbstractdeclaratorContext) Trailingreturntype() ITrailingreturntypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrailingreturntypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrailingreturntypeContext)
}

func (s *AbstractdeclaratorContext) Noptrabstractdeclarator() INoptrabstractdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoptrabstractdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoptrabstractdeclaratorContext)
}

func (s *AbstractdeclaratorContext) Abstractpackdeclarator() IAbstractpackdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAbstractpackdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAbstractpackdeclaratorContext)
}

func (s *AbstractdeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AbstractdeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AbstractdeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterAbstractdeclarator(s)
	}
}

func (s *AbstractdeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitAbstractdeclarator(s)
	}
}

func (s *AbstractdeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitAbstractdeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Abstractdeclarator() (localctx IAbstractdeclaratorContext) {
	localctx = NewAbstractdeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, CPP14ParserRULE_abstractdeclarator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1769)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 195, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1761)
			p.Ptrabstractdeclarator()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1763)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1762)
				p.noptrabstractdeclarator(0)
			}


		}
		{
			p.SetState(1765)
			p.Parametersandqualifiers()
		}
		{
			p.SetState(1766)
			p.Trailingreturntype()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1768)
			p.Abstractpackdeclarator()
		}

	}


	return localctx
}


// IPtrabstractdeclaratorContext is an interface to support dynamic dispatch.
type IPtrabstractdeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPtrabstractdeclaratorContext differentiates from other interfaces.
	IsPtrabstractdeclaratorContext()
}

type PtrabstractdeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPtrabstractdeclaratorContext() *PtrabstractdeclaratorContext {
	var p = new(PtrabstractdeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_ptrabstractdeclarator
	return p
}

func (*PtrabstractdeclaratorContext) IsPtrabstractdeclaratorContext() {}

func NewPtrabstractdeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PtrabstractdeclaratorContext {
	var p = new(PtrabstractdeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_ptrabstractdeclarator

	return p
}

func (s *PtrabstractdeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *PtrabstractdeclaratorContext) Noptrabstractdeclarator() INoptrabstractdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoptrabstractdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoptrabstractdeclaratorContext)
}

func (s *PtrabstractdeclaratorContext) Ptroperator() IPtroperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPtroperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPtroperatorContext)
}

func (s *PtrabstractdeclaratorContext) Ptrabstractdeclarator() IPtrabstractdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPtrabstractdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPtrabstractdeclaratorContext)
}

func (s *PtrabstractdeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PtrabstractdeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PtrabstractdeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterPtrabstractdeclarator(s)
	}
}

func (s *PtrabstractdeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitPtrabstractdeclarator(s)
	}
}

func (s *PtrabstractdeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitPtrabstractdeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Ptrabstractdeclarator() (localctx IPtrabstractdeclaratorContext) {
	localctx = NewPtrabstractdeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, CPP14ParserRULE_ptrabstractdeclarator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1776)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftParen, CPP14ParserLeftBracket:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1771)
			p.noptrabstractdeclarator(0)
		}


	case CPP14ParserT__2, CPP14ParserDecltype, CPP14ParserStar, CPP14ParserAnd, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1772)
			p.Ptroperator()
		}
		p.SetState(1774)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 196, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1773)
				p.Ptrabstractdeclarator()
			}


		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// INoptrabstractdeclaratorContext is an interface to support dynamic dispatch.
type INoptrabstractdeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNoptrabstractdeclaratorContext differentiates from other interfaces.
	IsNoptrabstractdeclaratorContext()
}

type NoptrabstractdeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoptrabstractdeclaratorContext() *NoptrabstractdeclaratorContext {
	var p = new(NoptrabstractdeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_noptrabstractdeclarator
	return p
}

func (*NoptrabstractdeclaratorContext) IsNoptrabstractdeclaratorContext() {}

func NewNoptrabstractdeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoptrabstractdeclaratorContext {
	var p = new(NoptrabstractdeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_noptrabstractdeclarator

	return p
}

func (s *NoptrabstractdeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *NoptrabstractdeclaratorContext) Parametersandqualifiers() IParametersandqualifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametersandqualifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametersandqualifiersContext)
}

func (s *NoptrabstractdeclaratorContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *NoptrabstractdeclaratorContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *NoptrabstractdeclaratorContext) Constantexpression() IConstantexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantexpressionContext)
}

func (s *NoptrabstractdeclaratorContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *NoptrabstractdeclaratorContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NoptrabstractdeclaratorContext) Ptrabstractdeclarator() IPtrabstractdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPtrabstractdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPtrabstractdeclaratorContext)
}

func (s *NoptrabstractdeclaratorContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NoptrabstractdeclaratorContext) Noptrabstractdeclarator() INoptrabstractdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoptrabstractdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoptrabstractdeclaratorContext)
}

func (s *NoptrabstractdeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoptrabstractdeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NoptrabstractdeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterNoptrabstractdeclarator(s)
	}
}

func (s *NoptrabstractdeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitNoptrabstractdeclarator(s)
	}
}

func (s *NoptrabstractdeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitNoptrabstractdeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Noptrabstractdeclarator() (localctx INoptrabstractdeclaratorContext) {
	return p.noptrabstractdeclarator(0)
}

func (p *CPP14Parser) noptrabstractdeclarator(_p int) (localctx INoptrabstractdeclaratorContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewNoptrabstractdeclaratorContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx INoptrabstractdeclaratorContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 264
	p.EnterRecursionRule(localctx, 264, CPP14ParserRULE_noptrabstractdeclarator, _p)
	var _la int


	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1792)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 200, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1779)
			p.Parametersandqualifiers()
		}


	case 2:
		{
			p.SetState(1780)
			p.Match(CPP14ParserLeftBracket)
		}
		p.SetState(1782)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << CPP14ParserT__0) | (1 << CPP14ParserT__1) | (1 << CPP14ParserAlignof) | (1 << CPP14ParserAuto) | (1 << CPP14ParserBool) | (1 << CPP14ParserChar) | (1 << CPP14ParserChar16) | (1 << CPP14ParserChar32) | (1 << CPP14ParserConst_cast) | (1 << CPP14ParserDecltype) | (1 << CPP14ParserDelete) | (1 << CPP14ParserDouble) | (1 << CPP14ParserDynamic_cast))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (CPP14ParserFalse - 36)) | (1 << (CPP14ParserFloat - 36)) | (1 << (CPP14ParserInt - 36)) | (1 << (CPP14ParserLong - 36)) | (1 << (CPP14ParserNew - 36)) | (1 << (CPP14ParserNoexcept - 36)) | (1 << (CPP14ParserNullptr - 36)) | (1 << (CPP14ParserOperator - 36)) | (1 << (CPP14ParserReinterpret_cast - 36)) | (1 << (CPP14ParserShort - 36)) | (1 << (CPP14ParserSigned - 36)) | (1 << (CPP14ParserSizeof - 36)) | (1 << (CPP14ParserStatic_cast - 36)))) != 0) || ((((_la - 68)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 68))) & ((1 << (CPP14ParserThis - 68)) | (1 << (CPP14ParserTrue - 68)) | (1 << (CPP14ParserTypeid_ - 68)) | (1 << (CPP14ParserTypename_ - 68)) | (1 << (CPP14ParserUnsigned - 68)) | (1 << (CPP14ParserVoid - 68)) | (1 << (CPP14ParserWchar - 68)) | (1 << (CPP14ParserLeftParen - 68)) | (1 << (CPP14ParserLeftBracket - 68)) | (1 << (CPP14ParserPlus - 68)) | (1 << (CPP14ParserMinus - 68)) | (1 << (CPP14ParserStar - 68)) | (1 << (CPP14ParserAnd - 68)) | (1 << (CPP14ParserOr - 68)) | (1 << (CPP14ParserTilde - 68)))) != 0) || ((((_la - 121)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 121))) & ((1 << (CPP14ParserPlusPlus - 121)) | (1 << (CPP14ParserMinusMinus - 121)) | (1 << (CPP14ParserDoublecolon - 121)) | (1 << (CPP14ParserIdentifier - 121)) | (1 << (CPP14ParserIntegerliteral - 121)) | (1 << (CPP14ParserCharacterliteral - 121)) | (1 << (CPP14ParserFloatingliteral - 121)) | (1 << (CPP14ParserStringliteral - 121)) | (1 << (CPP14ParserUserdefinedintegerliteral - 121)) | (1 << (CPP14ParserUserdefinedfloatingliteral - 121)) | (1 << (CPP14ParserUserdefinedstringliteral - 121)) | (1 << (CPP14ParserUserdefinedcharacterliteral - 121)))) != 0) {
			{
				p.SetState(1781)
				p.Constantexpression()
			}

		}
		{
			p.SetState(1784)
			p.Match(CPP14ParserRightBracket)
		}
		p.SetState(1786)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 199, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1785)
				p.attributespecifierseq(0)
			}


		}


	case 3:
		{
			p.SetState(1788)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(1789)
			p.Ptrabstractdeclarator()
		}
		{
			p.SetState(1790)
			p.Match(CPP14ParserRightParen)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1807)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 204, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1805)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 203, p.GetParserRuleContext()) {
			case 1:
				localctx = NewNoptrabstractdeclaratorContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_noptrabstractdeclarator)
				p.SetState(1794)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(1795)
					p.Parametersandqualifiers()
				}


			case 2:
				localctx = NewNoptrabstractdeclaratorContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_noptrabstractdeclarator)
				p.SetState(1796)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(1797)
					p.Match(CPP14ParserLeftBracket)
				}
				p.SetState(1799)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << CPP14ParserT__0) | (1 << CPP14ParserT__1) | (1 << CPP14ParserAlignof) | (1 << CPP14ParserAuto) | (1 << CPP14ParserBool) | (1 << CPP14ParserChar) | (1 << CPP14ParserChar16) | (1 << CPP14ParserChar32) | (1 << CPP14ParserConst_cast) | (1 << CPP14ParserDecltype) | (1 << CPP14ParserDelete) | (1 << CPP14ParserDouble) | (1 << CPP14ParserDynamic_cast))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (CPP14ParserFalse - 36)) | (1 << (CPP14ParserFloat - 36)) | (1 << (CPP14ParserInt - 36)) | (1 << (CPP14ParserLong - 36)) | (1 << (CPP14ParserNew - 36)) | (1 << (CPP14ParserNoexcept - 36)) | (1 << (CPP14ParserNullptr - 36)) | (1 << (CPP14ParserOperator - 36)) | (1 << (CPP14ParserReinterpret_cast - 36)) | (1 << (CPP14ParserShort - 36)) | (1 << (CPP14ParserSigned - 36)) | (1 << (CPP14ParserSizeof - 36)) | (1 << (CPP14ParserStatic_cast - 36)))) != 0) || ((((_la - 68)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 68))) & ((1 << (CPP14ParserThis - 68)) | (1 << (CPP14ParserTrue - 68)) | (1 << (CPP14ParserTypeid_ - 68)) | (1 << (CPP14ParserTypename_ - 68)) | (1 << (CPP14ParserUnsigned - 68)) | (1 << (CPP14ParserVoid - 68)) | (1 << (CPP14ParserWchar - 68)) | (1 << (CPP14ParserLeftParen - 68)) | (1 << (CPP14ParserLeftBracket - 68)) | (1 << (CPP14ParserPlus - 68)) | (1 << (CPP14ParserMinus - 68)) | (1 << (CPP14ParserStar - 68)) | (1 << (CPP14ParserAnd - 68)) | (1 << (CPP14ParserOr - 68)) | (1 << (CPP14ParserTilde - 68)))) != 0) || ((((_la - 121)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 121))) & ((1 << (CPP14ParserPlusPlus - 121)) | (1 << (CPP14ParserMinusMinus - 121)) | (1 << (CPP14ParserDoublecolon - 121)) | (1 << (CPP14ParserIdentifier - 121)) | (1 << (CPP14ParserIntegerliteral - 121)) | (1 << (CPP14ParserCharacterliteral - 121)) | (1 << (CPP14ParserFloatingliteral - 121)) | (1 << (CPP14ParserStringliteral - 121)) | (1 << (CPP14ParserUserdefinedintegerliteral - 121)) | (1 << (CPP14ParserUserdefinedfloatingliteral - 121)) | (1 << (CPP14ParserUserdefinedstringliteral - 121)) | (1 << (CPP14ParserUserdefinedcharacterliteral - 121)))) != 0) {
					{
						p.SetState(1798)
						p.Constantexpression()
					}

				}
				{
					p.SetState(1801)
					p.Match(CPP14ParserRightBracket)
				}
				p.SetState(1803)
				p.GetErrorHandler().Sync(p)


				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 202, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1802)
						p.attributespecifierseq(0)
					}


				}

			}

		}
		p.SetState(1809)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 204, p.GetParserRuleContext())
	}



	return localctx
}


// IAbstractpackdeclaratorContext is an interface to support dynamic dispatch.
type IAbstractpackdeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAbstractpackdeclaratorContext differentiates from other interfaces.
	IsAbstractpackdeclaratorContext()
}

type AbstractpackdeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAbstractpackdeclaratorContext() *AbstractpackdeclaratorContext {
	var p = new(AbstractpackdeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_abstractpackdeclarator
	return p
}

func (*AbstractpackdeclaratorContext) IsAbstractpackdeclaratorContext() {}

func NewAbstractpackdeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AbstractpackdeclaratorContext {
	var p = new(AbstractpackdeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_abstractpackdeclarator

	return p
}

func (s *AbstractpackdeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *AbstractpackdeclaratorContext) Noptrabstractpackdeclarator() INoptrabstractpackdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoptrabstractpackdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoptrabstractpackdeclaratorContext)
}

func (s *AbstractpackdeclaratorContext) Ptroperator() IPtroperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPtroperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPtroperatorContext)
}

func (s *AbstractpackdeclaratorContext) Abstractpackdeclarator() IAbstractpackdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAbstractpackdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAbstractpackdeclaratorContext)
}

func (s *AbstractpackdeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AbstractpackdeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AbstractpackdeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterAbstractpackdeclarator(s)
	}
}

func (s *AbstractpackdeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitAbstractpackdeclarator(s)
	}
}

func (s *AbstractpackdeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitAbstractpackdeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Abstractpackdeclarator() (localctx IAbstractpackdeclaratorContext) {
	localctx = NewAbstractpackdeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, CPP14ParserRULE_abstractpackdeclarator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1814)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserEllipsis:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1810)
			p.noptrabstractpackdeclarator(0)
		}


	case CPP14ParserT__2, CPP14ParserDecltype, CPP14ParserStar, CPP14ParserAnd, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1811)
			p.Ptroperator()
		}
		{
			p.SetState(1812)
			p.Abstractpackdeclarator()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// INoptrabstractpackdeclaratorContext is an interface to support dynamic dispatch.
type INoptrabstractpackdeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNoptrabstractpackdeclaratorContext differentiates from other interfaces.
	IsNoptrabstractpackdeclaratorContext()
}

type NoptrabstractpackdeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoptrabstractpackdeclaratorContext() *NoptrabstractpackdeclaratorContext {
	var p = new(NoptrabstractpackdeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_noptrabstractpackdeclarator
	return p
}

func (*NoptrabstractpackdeclaratorContext) IsNoptrabstractpackdeclaratorContext() {}

func NewNoptrabstractpackdeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoptrabstractpackdeclaratorContext {
	var p = new(NoptrabstractpackdeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_noptrabstractpackdeclarator

	return p
}

func (s *NoptrabstractpackdeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *NoptrabstractpackdeclaratorContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *NoptrabstractpackdeclaratorContext) Noptrabstractpackdeclarator() INoptrabstractpackdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoptrabstractpackdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoptrabstractpackdeclaratorContext)
}

func (s *NoptrabstractpackdeclaratorContext) Parametersandqualifiers() IParametersandqualifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametersandqualifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametersandqualifiersContext)
}

func (s *NoptrabstractpackdeclaratorContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *NoptrabstractpackdeclaratorContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *NoptrabstractpackdeclaratorContext) Constantexpression() IConstantexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantexpressionContext)
}

func (s *NoptrabstractpackdeclaratorContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *NoptrabstractpackdeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoptrabstractpackdeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NoptrabstractpackdeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterNoptrabstractpackdeclarator(s)
	}
}

func (s *NoptrabstractpackdeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitNoptrabstractpackdeclarator(s)
	}
}

func (s *NoptrabstractpackdeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitNoptrabstractpackdeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Noptrabstractpackdeclarator() (localctx INoptrabstractpackdeclaratorContext) {
	return p.noptrabstractpackdeclarator(0)
}

func (p *CPP14Parser) noptrabstractpackdeclarator(_p int) (localctx INoptrabstractpackdeclaratorContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewNoptrabstractpackdeclaratorContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx INoptrabstractpackdeclaratorContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 268
	p.EnterRecursionRule(localctx, 268, CPP14ParserRULE_noptrabstractpackdeclarator, _p)
	var _la int


	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1817)
		p.Match(CPP14ParserEllipsis)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1832)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 209, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1830)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 208, p.GetParserRuleContext()) {
			case 1:
				localctx = NewNoptrabstractpackdeclaratorContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_noptrabstractpackdeclarator)
				p.SetState(1819)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(1820)
					p.Parametersandqualifiers()
				}


			case 2:
				localctx = NewNoptrabstractpackdeclaratorContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_noptrabstractpackdeclarator)
				p.SetState(1821)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1822)
					p.Match(CPP14ParserLeftBracket)
				}
				p.SetState(1824)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << CPP14ParserT__0) | (1 << CPP14ParserT__1) | (1 << CPP14ParserAlignof) | (1 << CPP14ParserAuto) | (1 << CPP14ParserBool) | (1 << CPP14ParserChar) | (1 << CPP14ParserChar16) | (1 << CPP14ParserChar32) | (1 << CPP14ParserConst_cast) | (1 << CPP14ParserDecltype) | (1 << CPP14ParserDelete) | (1 << CPP14ParserDouble) | (1 << CPP14ParserDynamic_cast))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (CPP14ParserFalse - 36)) | (1 << (CPP14ParserFloat - 36)) | (1 << (CPP14ParserInt - 36)) | (1 << (CPP14ParserLong - 36)) | (1 << (CPP14ParserNew - 36)) | (1 << (CPP14ParserNoexcept - 36)) | (1 << (CPP14ParserNullptr - 36)) | (1 << (CPP14ParserOperator - 36)) | (1 << (CPP14ParserReinterpret_cast - 36)) | (1 << (CPP14ParserShort - 36)) | (1 << (CPP14ParserSigned - 36)) | (1 << (CPP14ParserSizeof - 36)) | (1 << (CPP14ParserStatic_cast - 36)))) != 0) || ((((_la - 68)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 68))) & ((1 << (CPP14ParserThis - 68)) | (1 << (CPP14ParserTrue - 68)) | (1 << (CPP14ParserTypeid_ - 68)) | (1 << (CPP14ParserTypename_ - 68)) | (1 << (CPP14ParserUnsigned - 68)) | (1 << (CPP14ParserVoid - 68)) | (1 << (CPP14ParserWchar - 68)) | (1 << (CPP14ParserLeftParen - 68)) | (1 << (CPP14ParserLeftBracket - 68)) | (1 << (CPP14ParserPlus - 68)) | (1 << (CPP14ParserMinus - 68)) | (1 << (CPP14ParserStar - 68)) | (1 << (CPP14ParserAnd - 68)) | (1 << (CPP14ParserOr - 68)) | (1 << (CPP14ParserTilde - 68)))) != 0) || ((((_la - 121)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 121))) & ((1 << (CPP14ParserPlusPlus - 121)) | (1 << (CPP14ParserMinusMinus - 121)) | (1 << (CPP14ParserDoublecolon - 121)) | (1 << (CPP14ParserIdentifier - 121)) | (1 << (CPP14ParserIntegerliteral - 121)) | (1 << (CPP14ParserCharacterliteral - 121)) | (1 << (CPP14ParserFloatingliteral - 121)) | (1 << (CPP14ParserStringliteral - 121)) | (1 << (CPP14ParserUserdefinedintegerliteral - 121)) | (1 << (CPP14ParserUserdefinedfloatingliteral - 121)) | (1 << (CPP14ParserUserdefinedstringliteral - 121)) | (1 << (CPP14ParserUserdefinedcharacterliteral - 121)))) != 0) {
					{
						p.SetState(1823)
						p.Constantexpression()
					}

				}
				{
					p.SetState(1826)
					p.Match(CPP14ParserRightBracket)
				}
				p.SetState(1828)
				p.GetErrorHandler().Sync(p)


				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 207, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1827)
						p.attributespecifierseq(0)
					}


				}

			}

		}
		p.SetState(1834)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 209, p.GetParserRuleContext())
	}



	return localctx
}


// IParameterdeclarationclauseContext is an interface to support dynamic dispatch.
type IParameterdeclarationclauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterdeclarationclauseContext differentiates from other interfaces.
	IsParameterdeclarationclauseContext()
}

type ParameterdeclarationclauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterdeclarationclauseContext() *ParameterdeclarationclauseContext {
	var p = new(ParameterdeclarationclauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_parameterdeclarationclause
	return p
}

func (*ParameterdeclarationclauseContext) IsParameterdeclarationclauseContext() {}

func NewParameterdeclarationclauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterdeclarationclauseContext {
	var p = new(ParameterdeclarationclauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_parameterdeclarationclause

	return p
}

func (s *ParameterdeclarationclauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterdeclarationclauseContext) Parameterdeclarationlist() IParameterdeclarationlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterdeclarationlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterdeclarationlistContext)
}

func (s *ParameterdeclarationclauseContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *ParameterdeclarationclauseContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *ParameterdeclarationclauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterdeclarationclauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ParameterdeclarationclauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterParameterdeclarationclause(s)
	}
}

func (s *ParameterdeclarationclauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitParameterdeclarationclause(s)
	}
}

func (s *ParameterdeclarationclauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitParameterdeclarationclause(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Parameterdeclarationclause() (localctx IParameterdeclarationclauseContext) {
	localctx = NewParameterdeclarationclauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, CPP14ParserRULE_parameterdeclarationclause)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1845)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 212, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1836)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << CPP14ParserAlignas) | (1 << CPP14ParserAuto) | (1 << CPP14ParserBool) | (1 << CPP14ParserChar) | (1 << CPP14ParserChar16) | (1 << CPP14ParserChar32) | (1 << CPP14ParserClass) | (1 << CPP14ParserConst) | (1 << CPP14ParserConstexpr) | (1 << CPP14ParserDecltype) | (1 << CPP14ParserDouble))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (CPP14ParserEnum - 32)) | (1 << (CPP14ParserExplicit - 32)) | (1 << (CPP14ParserExtern - 32)) | (1 << (CPP14ParserFloat - 32)) | (1 << (CPP14ParserFriend - 32)) | (1 << (CPP14ParserInline - 32)) | (1 << (CPP14ParserInt - 32)) | (1 << (CPP14ParserLong - 32)) | (1 << (CPP14ParserMutable - 32)) | (1 << (CPP14ParserRegister - 32)) | (1 << (CPP14ParserShort - 32)) | (1 << (CPP14ParserSigned - 32)) | (1 << (CPP14ParserStatic - 32)))) != 0) || ((((_la - 65)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 65))) & ((1 << (CPP14ParserStruct - 65)) | (1 << (CPP14ParserThread_local - 65)) | (1 << (CPP14ParserTypedef - 65)) | (1 << (CPP14ParserTypename_ - 65)) | (1 << (CPP14ParserUnion - 65)) | (1 << (CPP14ParserUnsigned - 65)) | (1 << (CPP14ParserVirtual - 65)) | (1 << (CPP14ParserVoid - 65)) | (1 << (CPP14ParserVolatile - 65)) | (1 << (CPP14ParserWchar - 65)) | (1 << (CPP14ParserLeftBracket - 65)))) != 0) || _la == CPP14ParserDoublecolon || _la == CPP14ParserIdentifier {
			{
				p.SetState(1835)
				p.parameterdeclarationlist(0)
			}

		}
		p.SetState(1839)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserEllipsis {
			{
				p.SetState(1838)
				p.Match(CPP14ParserEllipsis)
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1841)
			p.parameterdeclarationlist(0)
		}
		{
			p.SetState(1842)
			p.Match(CPP14ParserComma)
		}
		{
			p.SetState(1843)
			p.Match(CPP14ParserEllipsis)
		}

	}


	return localctx
}


// IParameterdeclarationlistContext is an interface to support dynamic dispatch.
type IParameterdeclarationlistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterdeclarationlistContext differentiates from other interfaces.
	IsParameterdeclarationlistContext()
}

type ParameterdeclarationlistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterdeclarationlistContext() *ParameterdeclarationlistContext {
	var p = new(ParameterdeclarationlistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_parameterdeclarationlist
	return p
}

func (*ParameterdeclarationlistContext) IsParameterdeclarationlistContext() {}

func NewParameterdeclarationlistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterdeclarationlistContext {
	var p = new(ParameterdeclarationlistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_parameterdeclarationlist

	return p
}

func (s *ParameterdeclarationlistContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterdeclarationlistContext) Parameterdeclaration() IParameterdeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterdeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterdeclarationContext)
}

func (s *ParameterdeclarationlistContext) Parameterdeclarationlist() IParameterdeclarationlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterdeclarationlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterdeclarationlistContext)
}

func (s *ParameterdeclarationlistContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *ParameterdeclarationlistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterdeclarationlistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ParameterdeclarationlistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterParameterdeclarationlist(s)
	}
}

func (s *ParameterdeclarationlistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitParameterdeclarationlist(s)
	}
}

func (s *ParameterdeclarationlistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitParameterdeclarationlist(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Parameterdeclarationlist() (localctx IParameterdeclarationlistContext) {
	return p.parameterdeclarationlist(0)
}

func (p *CPP14Parser) parameterdeclarationlist(_p int) (localctx IParameterdeclarationlistContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewParameterdeclarationlistContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IParameterdeclarationlistContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 272
	p.EnterRecursionRule(localctx, 272, CPP14ParserRULE_parameterdeclarationlist, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1848)
		p.Parameterdeclaration()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1855)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 213, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewParameterdeclarationlistContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_parameterdeclarationlist)
			p.SetState(1850)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(1851)
				p.Match(CPP14ParserComma)
			}
			{
				p.SetState(1852)
				p.Parameterdeclaration()
			}


		}
		p.SetState(1857)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 213, p.GetParserRuleContext())
	}



	return localctx
}


// IParameterdeclarationContext is an interface to support dynamic dispatch.
type IParameterdeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterdeclarationContext differentiates from other interfaces.
	IsParameterdeclarationContext()
}

type ParameterdeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterdeclarationContext() *ParameterdeclarationContext {
	var p = new(ParameterdeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_parameterdeclaration
	return p
}

func (*ParameterdeclarationContext) IsParameterdeclarationContext() {}

func NewParameterdeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterdeclarationContext {
	var p = new(ParameterdeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_parameterdeclaration

	return p
}

func (s *ParameterdeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterdeclarationContext) Declspecifierseq() IDeclspecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclspecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclspecifierseqContext)
}

func (s *ParameterdeclarationContext) Declarator() IDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *ParameterdeclarationContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *ParameterdeclarationContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *ParameterdeclarationContext) Initializerclause() IInitializerclauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerclauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerclauseContext)
}

func (s *ParameterdeclarationContext) Abstractdeclarator() IAbstractdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAbstractdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAbstractdeclaratorContext)
}

func (s *ParameterdeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterdeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ParameterdeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterParameterdeclaration(s)
	}
}

func (s *ParameterdeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitParameterdeclaration(s)
	}
}

func (s *ParameterdeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitParameterdeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Parameterdeclaration() (localctx IParameterdeclarationContext) {
	localctx = NewParameterdeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, CPP14ParserRULE_parameterdeclaration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1889)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 220, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1859)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1858)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(1861)
			p.Declspecifierseq()
		}
		{
			p.SetState(1862)
			p.Declarator()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1865)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1864)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(1867)
			p.Declspecifierseq()
		}
		{
			p.SetState(1868)
			p.Declarator()
		}
		{
			p.SetState(1869)
			p.Match(CPP14ParserAssign)
		}
		{
			p.SetState(1870)
			p.Initializerclause()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1873)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1872)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(1875)
			p.Declspecifierseq()
		}
		p.SetState(1877)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 217, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1876)
				p.Abstractdeclarator()
			}


		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(1880)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1879)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(1882)
			p.Declspecifierseq()
		}
		p.SetState(1884)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserT__2 || _la == CPP14ParserDecltype || ((((_la - 84)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 84))) & ((1 << (CPP14ParserLeftParen - 84)) | (1 << (CPP14ParserLeftBracket - 84)) | (1 << (CPP14ParserStar - 84)) | (1 << (CPP14ParserAnd - 84)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (CPP14ParserDoublecolon - 128)) | (1 << (CPP14ParserEllipsis - 128)) | (1 << (CPP14ParserIdentifier - 128)))) != 0) {
			{
				p.SetState(1883)
				p.Abstractdeclarator()
			}

		}
		{
			p.SetState(1886)
			p.Match(CPP14ParserAssign)
		}
		{
			p.SetState(1887)
			p.Initializerclause()
		}

	}


	return localctx
}


// IFunctiondefinitionContext is an interface to support dynamic dispatch.
type IFunctiondefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctiondefinitionContext differentiates from other interfaces.
	IsFunctiondefinitionContext()
}

type FunctiondefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctiondefinitionContext() *FunctiondefinitionContext {
	var p = new(FunctiondefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_functiondefinition
	return p
}

func (*FunctiondefinitionContext) IsFunctiondefinitionContext() {}

func NewFunctiondefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctiondefinitionContext {
	var p = new(FunctiondefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_functiondefinition

	return p
}

func (s *FunctiondefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctiondefinitionContext) Declarator() IDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *FunctiondefinitionContext) Functionbody() IFunctionbodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionbodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionbodyContext)
}

func (s *FunctiondefinitionContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *FunctiondefinitionContext) Declspecifierseq() IDeclspecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclspecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclspecifierseqContext)
}

func (s *FunctiondefinitionContext) Virtspecifierseq() IVirtspecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVirtspecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVirtspecifierseqContext)
}

func (s *FunctiondefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctiondefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *FunctiondefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterFunctiondefinition(s)
	}
}

func (s *FunctiondefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitFunctiondefinition(s)
	}
}

func (s *FunctiondefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitFunctiondefinition(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Functiondefinition() (localctx IFunctiondefinitionContext) {
	localctx = NewFunctiondefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, CPP14ParserRULE_functiondefinition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1892)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(1891)
			p.attributespecifierseq(0)
		}

	}
	p.SetState(1895)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 222, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1894)
			p.Declspecifierseq()
		}


	}
	{
		p.SetState(1897)
		p.Declarator()
	}
	p.SetState(1899)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == CPP14ParserFinal || _la == CPP14ParserOverride {
		{
			p.SetState(1898)
			p.virtspecifierseq(0)
		}

	}
	{
		p.SetState(1901)
		p.Functionbody()
	}



	return localctx
}


// IFunctionbodyContext is an interface to support dynamic dispatch.
type IFunctionbodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionbodyContext differentiates from other interfaces.
	IsFunctionbodyContext()
}

type FunctionbodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionbodyContext() *FunctionbodyContext {
	var p = new(FunctionbodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_functionbody
	return p
}

func (*FunctionbodyContext) IsFunctionbodyContext() {}

func NewFunctionbodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionbodyContext {
	var p = new(FunctionbodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_functionbody

	return p
}

func (s *FunctionbodyContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionbodyContext) Compoundstatement() ICompoundstatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompoundstatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompoundstatementContext)
}

func (s *FunctionbodyContext) Ctorinitializer() ICtorinitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICtorinitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICtorinitializerContext)
}

func (s *FunctionbodyContext) Functiontryblock() IFunctiontryblockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctiontryblockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctiontryblockContext)
}

func (s *FunctionbodyContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *FunctionbodyContext) Default() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDefault, 0)
}

func (s *FunctionbodyContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *FunctionbodyContext) Delete() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDelete, 0)
}

func (s *FunctionbodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionbodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *FunctionbodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterFunctionbody(s)
	}
}

func (s *FunctionbodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitFunctionbody(s)
	}
}

func (s *FunctionbodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitFunctionbody(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Functionbody() (localctx IFunctionbodyContext) {
	localctx = NewFunctionbodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, CPP14ParserRULE_functionbody)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1914)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 225, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1904)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserColon {
			{
				p.SetState(1903)
				p.Ctorinitializer()
			}

		}
		{
			p.SetState(1906)
			p.Compoundstatement()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1907)
			p.Functiontryblock()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1908)
			p.Match(CPP14ParserAssign)
		}
		{
			p.SetState(1909)
			p.Match(CPP14ParserDefault)
		}
		{
			p.SetState(1910)
			p.Match(CPP14ParserSemi)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1911)
			p.Match(CPP14ParserAssign)
		}
		{
			p.SetState(1912)
			p.Match(CPP14ParserDelete)
		}
		{
			p.SetState(1913)
			p.Match(CPP14ParserSemi)
		}

	}


	return localctx
}


// IInitializerContext is an interface to support dynamic dispatch.
type IInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializerContext differentiates from other interfaces.
	IsInitializerContext()
}

type InitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializerContext() *InitializerContext {
	var p = new(InitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_initializer
	return p
}

func (*InitializerContext) IsInitializerContext() {}

func NewInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializerContext {
	var p = new(InitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_initializer

	return p
}

func (s *InitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializerContext) Braceorequalinitializer() IBraceorequalinitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBraceorequalinitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBraceorequalinitializerContext)
}

func (s *InitializerContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *InitializerContext) Expressionlist() IExpressionlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionlistContext)
}

func (s *InitializerContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *InitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *InitializerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterInitializer(s)
	}
}

func (s *InitializerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitInitializer(s)
	}
}

func (s *InitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitInitializer(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Initializer() (localctx IInitializerContext) {
	localctx = NewInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, CPP14ParserRULE_initializer)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1921)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftBrace, CPP14ParserAssign:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1916)
			p.Braceorequalinitializer()
		}


	case CPP14ParserLeftParen:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1917)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(1918)
			p.Expressionlist()
		}
		{
			p.SetState(1919)
			p.Match(CPP14ParserRightParen)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IBraceorequalinitializerContext is an interface to support dynamic dispatch.
type IBraceorequalinitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBraceorequalinitializerContext differentiates from other interfaces.
	IsBraceorequalinitializerContext()
}

type BraceorequalinitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBraceorequalinitializerContext() *BraceorequalinitializerContext {
	var p = new(BraceorequalinitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_braceorequalinitializer
	return p
}

func (*BraceorequalinitializerContext) IsBraceorequalinitializerContext() {}

func NewBraceorequalinitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BraceorequalinitializerContext {
	var p = new(BraceorequalinitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_braceorequalinitializer

	return p
}

func (s *BraceorequalinitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *BraceorequalinitializerContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *BraceorequalinitializerContext) Initializerclause() IInitializerclauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerclauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerclauseContext)
}

func (s *BraceorequalinitializerContext) Bracedinitlist() IBracedinitlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBracedinitlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBracedinitlistContext)
}

func (s *BraceorequalinitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BraceorequalinitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *BraceorequalinitializerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterBraceorequalinitializer(s)
	}
}

func (s *BraceorequalinitializerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitBraceorequalinitializer(s)
	}
}

func (s *BraceorequalinitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitBraceorequalinitializer(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Braceorequalinitializer() (localctx IBraceorequalinitializerContext) {
	localctx = NewBraceorequalinitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, CPP14ParserRULE_braceorequalinitializer)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1926)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserAssign:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1923)
			p.Match(CPP14ParserAssign)
		}
		{
			p.SetState(1924)
			p.Initializerclause()
		}


	case CPP14ParserLeftBrace:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1925)
			p.Bracedinitlist()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IInitializerclauseContext is an interface to support dynamic dispatch.
type IInitializerclauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializerclauseContext differentiates from other interfaces.
	IsInitializerclauseContext()
}

type InitializerclauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializerclauseContext() *InitializerclauseContext {
	var p = new(InitializerclauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_initializerclause
	return p
}

func (*InitializerclauseContext) IsInitializerclauseContext() {}

func NewInitializerclauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializerclauseContext {
	var p = new(InitializerclauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_initializerclause

	return p
}

func (s *InitializerclauseContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializerclauseContext) Assignmentexpression() IAssignmentexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentexpressionContext)
}

func (s *InitializerclauseContext) Bracedinitlist() IBracedinitlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBracedinitlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBracedinitlistContext)
}

func (s *InitializerclauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializerclauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *InitializerclauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterInitializerclause(s)
	}
}

func (s *InitializerclauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitInitializerclause(s)
	}
}

func (s *InitializerclauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitInitializerclause(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Initializerclause() (localctx IInitializerclauseContext) {
	localctx = NewInitializerclauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, CPP14ParserRULE_initializerclause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1930)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserT__0, CPP14ParserT__1, CPP14ParserAlignof, CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserConst_cast, CPP14ParserDecltype, CPP14ParserDelete, CPP14ParserDouble, CPP14ParserDynamic_cast, CPP14ParserFalse, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserNew, CPP14ParserNoexcept, CPP14ParserNullptr, CPP14ParserOperator, CPP14ParserReinterpret_cast, CPP14ParserShort, CPP14ParserSigned, CPP14ParserSizeof, CPP14ParserStatic_cast, CPP14ParserThis, CPP14ParserThrow, CPP14ParserTrue, CPP14ParserTypeid_, CPP14ParserTypename_, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserWchar, CPP14ParserLeftParen, CPP14ParserLeftBracket, CPP14ParserPlus, CPP14ParserMinus, CPP14ParserStar, CPP14ParserAnd, CPP14ParserOr, CPP14ParserTilde, CPP14ParserPlusPlus, CPP14ParserMinusMinus, CPP14ParserDoublecolon, CPP14ParserIdentifier, CPP14ParserIntegerliteral, CPP14ParserCharacterliteral, CPP14ParserFloatingliteral, CPP14ParserStringliteral, CPP14ParserUserdefinedintegerliteral, CPP14ParserUserdefinedfloatingliteral, CPP14ParserUserdefinedstringliteral, CPP14ParserUserdefinedcharacterliteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1928)
			p.Assignmentexpression()
		}


	case CPP14ParserLeftBrace:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1929)
			p.Bracedinitlist()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IInitializerlistContext is an interface to support dynamic dispatch.
type IInitializerlistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializerlistContext differentiates from other interfaces.
	IsInitializerlistContext()
}

type InitializerlistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializerlistContext() *InitializerlistContext {
	var p = new(InitializerlistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_initializerlist
	return p
}

func (*InitializerlistContext) IsInitializerlistContext() {}

func NewInitializerlistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializerlistContext {
	var p = new(InitializerlistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_initializerlist

	return p
}

func (s *InitializerlistContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializerlistContext) Initializerclause() IInitializerclauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerclauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerclauseContext)
}

func (s *InitializerlistContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *InitializerlistContext) Initializerlist() IInitializerlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerlistContext)
}

func (s *InitializerlistContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *InitializerlistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializerlistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *InitializerlistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterInitializerlist(s)
	}
}

func (s *InitializerlistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitInitializerlist(s)
	}
}

func (s *InitializerlistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitInitializerlist(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Initializerlist() (localctx IInitializerlistContext) {
	return p.initializerlist(0)
}

func (p *CPP14Parser) initializerlist(_p int) (localctx IInitializerlistContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewInitializerlistContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IInitializerlistContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 286
	p.EnterRecursionRule(localctx, 286, CPP14ParserRULE_initializerlist, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1933)
		p.Initializerclause()
	}
	p.SetState(1935)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 229, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1934)
			p.Match(CPP14ParserEllipsis)
		}


	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1945)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 231, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewInitializerlistContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_initializerlist)
			p.SetState(1937)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(1938)
				p.Match(CPP14ParserComma)
			}
			{
				p.SetState(1939)
				p.Initializerclause()
			}
			p.SetState(1941)
			p.GetErrorHandler().Sync(p)


			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 230, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1940)
					p.Match(CPP14ParserEllipsis)
				}


			}


		}
		p.SetState(1947)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 231, p.GetParserRuleContext())
	}



	return localctx
}


// IBracedinitlistContext is an interface to support dynamic dispatch.
type IBracedinitlistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBracedinitlistContext differentiates from other interfaces.
	IsBracedinitlistContext()
}

type BracedinitlistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBracedinitlistContext() *BracedinitlistContext {
	var p = new(BracedinitlistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_bracedinitlist
	return p
}

func (*BracedinitlistContext) IsBracedinitlistContext() {}

func NewBracedinitlistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BracedinitlistContext {
	var p = new(BracedinitlistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_bracedinitlist

	return p
}

func (s *BracedinitlistContext) GetParser() antlr.Parser { return s.parser }

func (s *BracedinitlistContext) LeftBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, 0)
}

func (s *BracedinitlistContext) Initializerlist() IInitializerlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerlistContext)
}

func (s *BracedinitlistContext) RightBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, 0)
}

func (s *BracedinitlistContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *BracedinitlistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BracedinitlistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *BracedinitlistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterBracedinitlist(s)
	}
}

func (s *BracedinitlistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitBracedinitlist(s)
	}
}

func (s *BracedinitlistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitBracedinitlist(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Bracedinitlist() (localctx IBracedinitlistContext) {
	localctx = NewBracedinitlistContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, CPP14ParserRULE_bracedinitlist)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1957)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 233, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1948)
			p.Match(CPP14ParserLeftBrace)
		}
		{
			p.SetState(1949)
			p.initializerlist(0)
		}
		p.SetState(1951)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserComma {
			{
				p.SetState(1950)
				p.Match(CPP14ParserComma)
			}

		}
		{
			p.SetState(1953)
			p.Match(CPP14ParserRightBrace)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1955)
			p.Match(CPP14ParserLeftBrace)
		}
		{
			p.SetState(1956)
			p.Match(CPP14ParserRightBrace)
		}

	}


	return localctx
}


// IClassnameContext is an interface to support dynamic dispatch.
type IClassnameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassnameContext differentiates from other interfaces.
	IsClassnameContext()
}

type ClassnameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassnameContext() *ClassnameContext {
	var p = new(ClassnameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_classname
	return p
}

func (*ClassnameContext) IsClassnameContext() {}

func NewClassnameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassnameContext {
	var p = new(ClassnameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_classname

	return p
}

func (s *ClassnameContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassnameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *ClassnameContext) Simpletemplateid() ISimpletemplateidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpletemplateidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpletemplateidContext)
}

func (s *ClassnameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassnameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ClassnameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterClassname(s)
	}
}

func (s *ClassnameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitClassname(s)
	}
}

func (s *ClassnameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitClassname(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Classname() (localctx IClassnameContext) {
	localctx = NewClassnameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, CPP14ParserRULE_classname)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1961)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 234, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1959)
			p.Match(CPP14ParserIdentifier)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1960)
			p.Simpletemplateid()
		}

	}


	return localctx
}


// IClassspecifierContext is an interface to support dynamic dispatch.
type IClassspecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassspecifierContext differentiates from other interfaces.
	IsClassspecifierContext()
}

type ClassspecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassspecifierContext() *ClassspecifierContext {
	var p = new(ClassspecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_classspecifier
	return p
}

func (*ClassspecifierContext) IsClassspecifierContext() {}

func NewClassspecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassspecifierContext {
	var p = new(ClassspecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_classspecifier

	return p
}

func (s *ClassspecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassspecifierContext) Classhead() IClassheadContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassheadContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassheadContext)
}

func (s *ClassspecifierContext) LeftBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, 0)
}

func (s *ClassspecifierContext) RightBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, 0)
}

func (s *ClassspecifierContext) Memberspecification() IMemberspecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberspecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberspecificationContext)
}

func (s *ClassspecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassspecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ClassspecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterClassspecifier(s)
	}
}

func (s *ClassspecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitClassspecifier(s)
	}
}

func (s *ClassspecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitClassspecifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Classspecifier() (localctx IClassspecifierContext) {
	localctx = NewClassspecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, CPP14ParserRULE_classspecifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1963)
		p.Classhead()
	}
	{
		p.SetState(1964)
		p.Match(CPP14ParserLeftBrace)
	}
	p.SetState(1966)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if ((((_la - 3)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 3))) & ((1 << (CPP14ParserT__2 - 3)) | (1 << (CPP14ParserAlignas - 3)) | (1 << (CPP14ParserAuto - 3)) | (1 << (CPP14ParserBool - 3)) | (1 << (CPP14ParserChar - 3)) | (1 << (CPP14ParserChar16 - 3)) | (1 << (CPP14ParserChar32 - 3)) | (1 << (CPP14ParserClass - 3)) | (1 << (CPP14ParserConst - 3)) | (1 << (CPP14ParserConstexpr - 3)) | (1 << (CPP14ParserDecltype - 3)) | (1 << (CPP14ParserDouble - 3)) | (1 << (CPP14ParserEnum - 3)) | (1 << (CPP14ParserExplicit - 3)))) != 0) || ((((_la - 35)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 35))) & ((1 << (CPP14ParserExtern - 35)) | (1 << (CPP14ParserFloat - 35)) | (1 << (CPP14ParserFriend - 35)) | (1 << (CPP14ParserInline - 35)) | (1 << (CPP14ParserInt - 35)) | (1 << (CPP14ParserLong - 35)) | (1 << (CPP14ParserMutable - 35)) | (1 << (CPP14ParserOperator - 35)) | (1 << (CPP14ParserPrivate - 35)) | (1 << (CPP14ParserProtected - 35)) | (1 << (CPP14ParserPublic - 35)) | (1 << (CPP14ParserRegister - 35)) | (1 << (CPP14ParserShort - 35)) | (1 << (CPP14ParserSigned - 35)) | (1 << (CPP14ParserStatic - 35)) | (1 << (CPP14ParserStatic_assert - 35)) | (1 << (CPP14ParserStruct - 35)))) != 0) || ((((_la - 67)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 67))) & ((1 << (CPP14ParserTemplate - 67)) | (1 << (CPP14ParserThread_local - 67)) | (1 << (CPP14ParserTypedef - 67)) | (1 << (CPP14ParserTypename_ - 67)) | (1 << (CPP14ParserUnion - 67)) | (1 << (CPP14ParserUnsigned - 67)) | (1 << (CPP14ParserUsing - 67)) | (1 << (CPP14ParserVirtual - 67)) | (1 << (CPP14ParserVoid - 67)) | (1 << (CPP14ParserVolatile - 67)) | (1 << (CPP14ParserWchar - 67)) | (1 << (CPP14ParserLeftParen - 67)) | (1 << (CPP14ParserLeftBracket - 67)) | (1 << (CPP14ParserStar - 67)) | (1 << (CPP14ParserAnd - 67)) | (1 << (CPP14ParserTilde - 67)))) != 0) || ((((_la - 127)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 127))) & ((1 << (CPP14ParserColon - 127)) | (1 << (CPP14ParserDoublecolon - 127)) | (1 << (CPP14ParserSemi - 127)) | (1 << (CPP14ParserEllipsis - 127)) | (1 << (CPP14ParserIdentifier - 127)))) != 0) {
		{
			p.SetState(1965)
			p.Memberspecification()
		}

	}
	{
		p.SetState(1968)
		p.Match(CPP14ParserRightBrace)
	}



	return localctx
}


// IClassheadContext is an interface to support dynamic dispatch.
type IClassheadContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassheadContext differentiates from other interfaces.
	IsClassheadContext()
}

type ClassheadContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassheadContext() *ClassheadContext {
	var p = new(ClassheadContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_classhead
	return p
}

func (*ClassheadContext) IsClassheadContext() {}

func NewClassheadContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassheadContext {
	var p = new(ClassheadContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_classhead

	return p
}

func (s *ClassheadContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassheadContext) Classkey() IClasskeyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClasskeyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClasskeyContext)
}

func (s *ClassheadContext) Classheadname() IClassheadnameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassheadnameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassheadnameContext)
}

func (s *ClassheadContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *ClassheadContext) Classvirtspecifier() IClassvirtspecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassvirtspecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassvirtspecifierContext)
}

func (s *ClassheadContext) Baseclause() IBaseclauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBaseclauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBaseclauseContext)
}

func (s *ClassheadContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassheadContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ClassheadContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterClasshead(s)
	}
}

func (s *ClassheadContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitClasshead(s)
	}
}

func (s *ClassheadContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitClasshead(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Classhead() (localctx IClassheadContext) {
	localctx = NewClassheadContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, CPP14ParserRULE_classhead)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1988)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 241, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1970)
			p.Classkey()
		}
		p.SetState(1972)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1971)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(1974)
			p.Classheadname()
		}
		p.SetState(1976)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserFinal {
			{
				p.SetState(1975)
				p.Classvirtspecifier()
			}

		}
		p.SetState(1979)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserColon {
			{
				p.SetState(1978)
				p.Baseclause()
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1981)
			p.Classkey()
		}
		p.SetState(1983)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1982)
				p.attributespecifierseq(0)
			}

		}
		p.SetState(1986)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserColon {
			{
				p.SetState(1985)
				p.Baseclause()
			}

		}

	}


	return localctx
}


// IClassheadnameContext is an interface to support dynamic dispatch.
type IClassheadnameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassheadnameContext differentiates from other interfaces.
	IsClassheadnameContext()
}

type ClassheadnameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassheadnameContext() *ClassheadnameContext {
	var p = new(ClassheadnameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_classheadname
	return p
}

func (*ClassheadnameContext) IsClassheadnameContext() {}

func NewClassheadnameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassheadnameContext {
	var p = new(ClassheadnameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_classheadname

	return p
}

func (s *ClassheadnameContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassheadnameContext) Classname() IClassnameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassnameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassnameContext)
}

func (s *ClassheadnameContext) Nestednamespecifier() INestednamespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestednamespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestednamespecifierContext)
}

func (s *ClassheadnameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassheadnameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ClassheadnameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterClassheadname(s)
	}
}

func (s *ClassheadnameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitClassheadname(s)
	}
}

func (s *ClassheadnameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitClassheadname(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Classheadname() (localctx IClassheadnameContext) {
	localctx = NewClassheadnameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, CPP14ParserRULE_classheadname)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1991)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 242, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1990)
			p.nestednamespecifier(0)
		}


	}
	{
		p.SetState(1993)
		p.Classname()
	}



	return localctx
}


// IClassvirtspecifierContext is an interface to support dynamic dispatch.
type IClassvirtspecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassvirtspecifierContext differentiates from other interfaces.
	IsClassvirtspecifierContext()
}

type ClassvirtspecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassvirtspecifierContext() *ClassvirtspecifierContext {
	var p = new(ClassvirtspecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_classvirtspecifier
	return p
}

func (*ClassvirtspecifierContext) IsClassvirtspecifierContext() {}

func NewClassvirtspecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassvirtspecifierContext {
	var p = new(ClassvirtspecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_classvirtspecifier

	return p
}

func (s *ClassvirtspecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassvirtspecifierContext) Final() antlr.TerminalNode {
	return s.GetToken(CPP14ParserFinal, 0)
}

func (s *ClassvirtspecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassvirtspecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ClassvirtspecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterClassvirtspecifier(s)
	}
}

func (s *ClassvirtspecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitClassvirtspecifier(s)
	}
}

func (s *ClassvirtspecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitClassvirtspecifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Classvirtspecifier() (localctx IClassvirtspecifierContext) {
	localctx = NewClassvirtspecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, CPP14ParserRULE_classvirtspecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1995)
		p.Match(CPP14ParserFinal)
	}



	return localctx
}


// IClasskeyContext is an interface to support dynamic dispatch.
type IClasskeyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClasskeyContext differentiates from other interfaces.
	IsClasskeyContext()
}

type ClasskeyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClasskeyContext() *ClasskeyContext {
	var p = new(ClasskeyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_classkey
	return p
}

func (*ClasskeyContext) IsClasskeyContext() {}

func NewClasskeyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClasskeyContext {
	var p = new(ClasskeyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_classkey

	return p
}

func (s *ClasskeyContext) GetParser() antlr.Parser { return s.parser }

func (s *ClasskeyContext) Class() antlr.TerminalNode {
	return s.GetToken(CPP14ParserClass, 0)
}

func (s *ClasskeyContext) Struct() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStruct, 0)
}

func (s *ClasskeyContext) Union() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUnion, 0)
}

func (s *ClasskeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClasskeyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ClasskeyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterClasskey(s)
	}
}

func (s *ClasskeyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitClasskey(s)
	}
}

func (s *ClasskeyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitClasskey(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Classkey() (localctx IClasskeyContext) {
	localctx = NewClasskeyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, CPP14ParserRULE_classkey)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1997)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserClass || _la == CPP14ParserStruct || _la == CPP14ParserUnion) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IMemberspecificationContext is an interface to support dynamic dispatch.
type IMemberspecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberspecificationContext differentiates from other interfaces.
	IsMemberspecificationContext()
}

type MemberspecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberspecificationContext() *MemberspecificationContext {
	var p = new(MemberspecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_memberspecification
	return p
}

func (*MemberspecificationContext) IsMemberspecificationContext() {}

func NewMemberspecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberspecificationContext {
	var p = new(MemberspecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_memberspecification

	return p
}

func (s *MemberspecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberspecificationContext) Memberdeclaration() IMemberdeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberdeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberdeclarationContext)
}

func (s *MemberspecificationContext) Memberspecification() IMemberspecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberspecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberspecificationContext)
}

func (s *MemberspecificationContext) Accessspecifier() IAccessspecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccessspecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccessspecifierContext)
}

func (s *MemberspecificationContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *MemberspecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberspecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *MemberspecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterMemberspecification(s)
	}
}

func (s *MemberspecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitMemberspecification(s)
	}
}

func (s *MemberspecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitMemberspecification(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Memberspecification() (localctx IMemberspecificationContext) {
	localctx = NewMemberspecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, CPP14ParserRULE_memberspecification)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2008)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserT__2, CPP14ParserAlignas, CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserClass, CPP14ParserConst, CPP14ParserConstexpr, CPP14ParserDecltype, CPP14ParserDouble, CPP14ParserEnum, CPP14ParserExplicit, CPP14ParserExtern, CPP14ParserFloat, CPP14ParserFriend, CPP14ParserInline, CPP14ParserInt, CPP14ParserLong, CPP14ParserMutable, CPP14ParserOperator, CPP14ParserRegister, CPP14ParserShort, CPP14ParserSigned, CPP14ParserStatic, CPP14ParserStatic_assert, CPP14ParserStruct, CPP14ParserTemplate, CPP14ParserThread_local, CPP14ParserTypedef, CPP14ParserTypename_, CPP14ParserUnion, CPP14ParserUnsigned, CPP14ParserUsing, CPP14ParserVirtual, CPP14ParserVoid, CPP14ParserVolatile, CPP14ParserWchar, CPP14ParserLeftParen, CPP14ParserLeftBracket, CPP14ParserStar, CPP14ParserAnd, CPP14ParserTilde, CPP14ParserColon, CPP14ParserDoublecolon, CPP14ParserSemi, CPP14ParserEllipsis, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1999)
			p.Memberdeclaration()
		}
		p.SetState(2001)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if ((((_la - 3)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 3))) & ((1 << (CPP14ParserT__2 - 3)) | (1 << (CPP14ParserAlignas - 3)) | (1 << (CPP14ParserAuto - 3)) | (1 << (CPP14ParserBool - 3)) | (1 << (CPP14ParserChar - 3)) | (1 << (CPP14ParserChar16 - 3)) | (1 << (CPP14ParserChar32 - 3)) | (1 << (CPP14ParserClass - 3)) | (1 << (CPP14ParserConst - 3)) | (1 << (CPP14ParserConstexpr - 3)) | (1 << (CPP14ParserDecltype - 3)) | (1 << (CPP14ParserDouble - 3)) | (1 << (CPP14ParserEnum - 3)) | (1 << (CPP14ParserExplicit - 3)))) != 0) || ((((_la - 35)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 35))) & ((1 << (CPP14ParserExtern - 35)) | (1 << (CPP14ParserFloat - 35)) | (1 << (CPP14ParserFriend - 35)) | (1 << (CPP14ParserInline - 35)) | (1 << (CPP14ParserInt - 35)) | (1 << (CPP14ParserLong - 35)) | (1 << (CPP14ParserMutable - 35)) | (1 << (CPP14ParserOperator - 35)) | (1 << (CPP14ParserPrivate - 35)) | (1 << (CPP14ParserProtected - 35)) | (1 << (CPP14ParserPublic - 35)) | (1 << (CPP14ParserRegister - 35)) | (1 << (CPP14ParserShort - 35)) | (1 << (CPP14ParserSigned - 35)) | (1 << (CPP14ParserStatic - 35)) | (1 << (CPP14ParserStatic_assert - 35)) | (1 << (CPP14ParserStruct - 35)))) != 0) || ((((_la - 67)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 67))) & ((1 << (CPP14ParserTemplate - 67)) | (1 << (CPP14ParserThread_local - 67)) | (1 << (CPP14ParserTypedef - 67)) | (1 << (CPP14ParserTypename_ - 67)) | (1 << (CPP14ParserUnion - 67)) | (1 << (CPP14ParserUnsigned - 67)) | (1 << (CPP14ParserUsing - 67)) | (1 << (CPP14ParserVirtual - 67)) | (1 << (CPP14ParserVoid - 67)) | (1 << (CPP14ParserVolatile - 67)) | (1 << (CPP14ParserWchar - 67)) | (1 << (CPP14ParserLeftParen - 67)) | (1 << (CPP14ParserLeftBracket - 67)) | (1 << (CPP14ParserStar - 67)) | (1 << (CPP14ParserAnd - 67)) | (1 << (CPP14ParserTilde - 67)))) != 0) || ((((_la - 127)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 127))) & ((1 << (CPP14ParserColon - 127)) | (1 << (CPP14ParserDoublecolon - 127)) | (1 << (CPP14ParserSemi - 127)) | (1 << (CPP14ParserEllipsis - 127)) | (1 << (CPP14ParserIdentifier - 127)))) != 0) {
			{
				p.SetState(2000)
				p.Memberspecification()
			}

		}


	case CPP14ParserPrivate, CPP14ParserProtected, CPP14ParserPublic:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2003)
			p.Accessspecifier()
		}
		{
			p.SetState(2004)
			p.Match(CPP14ParserColon)
		}
		p.SetState(2006)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if ((((_la - 3)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 3))) & ((1 << (CPP14ParserT__2 - 3)) | (1 << (CPP14ParserAlignas - 3)) | (1 << (CPP14ParserAuto - 3)) | (1 << (CPP14ParserBool - 3)) | (1 << (CPP14ParserChar - 3)) | (1 << (CPP14ParserChar16 - 3)) | (1 << (CPP14ParserChar32 - 3)) | (1 << (CPP14ParserClass - 3)) | (1 << (CPP14ParserConst - 3)) | (1 << (CPP14ParserConstexpr - 3)) | (1 << (CPP14ParserDecltype - 3)) | (1 << (CPP14ParserDouble - 3)) | (1 << (CPP14ParserEnum - 3)) | (1 << (CPP14ParserExplicit - 3)))) != 0) || ((((_la - 35)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 35))) & ((1 << (CPP14ParserExtern - 35)) | (1 << (CPP14ParserFloat - 35)) | (1 << (CPP14ParserFriend - 35)) | (1 << (CPP14ParserInline - 35)) | (1 << (CPP14ParserInt - 35)) | (1 << (CPP14ParserLong - 35)) | (1 << (CPP14ParserMutable - 35)) | (1 << (CPP14ParserOperator - 35)) | (1 << (CPP14ParserPrivate - 35)) | (1 << (CPP14ParserProtected - 35)) | (1 << (CPP14ParserPublic - 35)) | (1 << (CPP14ParserRegister - 35)) | (1 << (CPP14ParserShort - 35)) | (1 << (CPP14ParserSigned - 35)) | (1 << (CPP14ParserStatic - 35)) | (1 << (CPP14ParserStatic_assert - 35)) | (1 << (CPP14ParserStruct - 35)))) != 0) || ((((_la - 67)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 67))) & ((1 << (CPP14ParserTemplate - 67)) | (1 << (CPP14ParserThread_local - 67)) | (1 << (CPP14ParserTypedef - 67)) | (1 << (CPP14ParserTypename_ - 67)) | (1 << (CPP14ParserUnion - 67)) | (1 << (CPP14ParserUnsigned - 67)) | (1 << (CPP14ParserUsing - 67)) | (1 << (CPP14ParserVirtual - 67)) | (1 << (CPP14ParserVoid - 67)) | (1 << (CPP14ParserVolatile - 67)) | (1 << (CPP14ParserWchar - 67)) | (1 << (CPP14ParserLeftParen - 67)) | (1 << (CPP14ParserLeftBracket - 67)) | (1 << (CPP14ParserStar - 67)) | (1 << (CPP14ParserAnd - 67)) | (1 << (CPP14ParserTilde - 67)))) != 0) || ((((_la - 127)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 127))) & ((1 << (CPP14ParserColon - 127)) | (1 << (CPP14ParserDoublecolon - 127)) | (1 << (CPP14ParserSemi - 127)) | (1 << (CPP14ParserEllipsis - 127)) | (1 << (CPP14ParserIdentifier - 127)))) != 0) {
			{
				p.SetState(2005)
				p.Memberspecification()
			}

		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IMemberdeclarationContext is an interface to support dynamic dispatch.
type IMemberdeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberdeclarationContext differentiates from other interfaces.
	IsMemberdeclarationContext()
}

type MemberdeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberdeclarationContext() *MemberdeclarationContext {
	var p = new(MemberdeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_memberdeclaration
	return p
}

func (*MemberdeclarationContext) IsMemberdeclarationContext() {}

func NewMemberdeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberdeclarationContext {
	var p = new(MemberdeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_memberdeclaration

	return p
}

func (s *MemberdeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberdeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *MemberdeclarationContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *MemberdeclarationContext) Declspecifierseq() IDeclspecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclspecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclspecifierseqContext)
}

func (s *MemberdeclarationContext) Memberdeclaratorlist() IMemberdeclaratorlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberdeclaratorlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberdeclaratorlistContext)
}

func (s *MemberdeclarationContext) Functiondefinition() IFunctiondefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctiondefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctiondefinitionContext)
}

func (s *MemberdeclarationContext) Usingdeclaration() IUsingdeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingdeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsingdeclarationContext)
}

func (s *MemberdeclarationContext) Static_assertdeclaration() IStatic_assertdeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatic_assertdeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatic_assertdeclarationContext)
}

func (s *MemberdeclarationContext) Templatedeclaration() ITemplatedeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplatedeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplatedeclarationContext)
}

func (s *MemberdeclarationContext) Aliasdeclaration() IAliasdeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAliasdeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAliasdeclarationContext)
}

func (s *MemberdeclarationContext) Emptydeclaration() IEmptydeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEmptydeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEmptydeclarationContext)
}

func (s *MemberdeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberdeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *MemberdeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterMemberdeclaration(s)
	}
}

func (s *MemberdeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitMemberdeclaration(s)
	}
}

func (s *MemberdeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitMemberdeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Memberdeclaration() (localctx IMemberdeclarationContext) {
	localctx = NewMemberdeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, CPP14ParserRULE_memberdeclaration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2026)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 249, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2011)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 246, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2010)
				p.attributespecifierseq(0)
			}


		}
		p.SetState(2014)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 247, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2013)
				p.Declspecifierseq()
			}


		}
		p.SetState(2017)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << CPP14ParserT__2) | (1 << CPP14ParserAlignas) | (1 << CPP14ParserDecltype))) != 0) || _la == CPP14ParserOperator || ((((_la - 84)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 84))) & ((1 << (CPP14ParserLeftParen - 84)) | (1 << (CPP14ParserLeftBracket - 84)) | (1 << (CPP14ParserStar - 84)) | (1 << (CPP14ParserAnd - 84)) | (1 << (CPP14ParserTilde - 84)))) != 0) || ((((_la - 127)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 127))) & ((1 << (CPP14ParserColon - 127)) | (1 << (CPP14ParserDoublecolon - 127)) | (1 << (CPP14ParserEllipsis - 127)) | (1 << (CPP14ParserIdentifier - 127)))) != 0) {
			{
				p.SetState(2016)
				p.memberdeclaratorlist(0)
			}

		}
		{
			p.SetState(2019)
			p.Match(CPP14ParserSemi)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2020)
			p.Functiondefinition()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2021)
			p.Usingdeclaration()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2022)
			p.Static_assertdeclaration()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2023)
			p.Templatedeclaration()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2024)
			p.Aliasdeclaration()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2025)
			p.Emptydeclaration()
		}

	}


	return localctx
}


// IMemberdeclaratorlistContext is an interface to support dynamic dispatch.
type IMemberdeclaratorlistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberdeclaratorlistContext differentiates from other interfaces.
	IsMemberdeclaratorlistContext()
}

type MemberdeclaratorlistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberdeclaratorlistContext() *MemberdeclaratorlistContext {
	var p = new(MemberdeclaratorlistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_memberdeclaratorlist
	return p
}

func (*MemberdeclaratorlistContext) IsMemberdeclaratorlistContext() {}

func NewMemberdeclaratorlistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberdeclaratorlistContext {
	var p = new(MemberdeclaratorlistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_memberdeclaratorlist

	return p
}

func (s *MemberdeclaratorlistContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberdeclaratorlistContext) Memberdeclarator() IMemberdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberdeclaratorContext)
}

func (s *MemberdeclaratorlistContext) Memberdeclaratorlist() IMemberdeclaratorlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberdeclaratorlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberdeclaratorlistContext)
}

func (s *MemberdeclaratorlistContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *MemberdeclaratorlistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberdeclaratorlistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *MemberdeclaratorlistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterMemberdeclaratorlist(s)
	}
}

func (s *MemberdeclaratorlistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitMemberdeclaratorlist(s)
	}
}

func (s *MemberdeclaratorlistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitMemberdeclaratorlist(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Memberdeclaratorlist() (localctx IMemberdeclaratorlistContext) {
	return p.memberdeclaratorlist(0)
}

func (p *CPP14Parser) memberdeclaratorlist(_p int) (localctx IMemberdeclaratorlistContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewMemberdeclaratorlistContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IMemberdeclaratorlistContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 306
	p.EnterRecursionRule(localctx, 306, CPP14ParserRULE_memberdeclaratorlist, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2029)
		p.Memberdeclarator()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2036)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 250, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewMemberdeclaratorlistContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_memberdeclaratorlist)
			p.SetState(2031)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(2032)
				p.Match(CPP14ParserComma)
			}
			{
				p.SetState(2033)
				p.Memberdeclarator()
			}


		}
		p.SetState(2038)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 250, p.GetParserRuleContext())
	}



	return localctx
}


// IMemberdeclaratorContext is an interface to support dynamic dispatch.
type IMemberdeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberdeclaratorContext differentiates from other interfaces.
	IsMemberdeclaratorContext()
}

type MemberdeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberdeclaratorContext() *MemberdeclaratorContext {
	var p = new(MemberdeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_memberdeclarator
	return p
}

func (*MemberdeclaratorContext) IsMemberdeclaratorContext() {}

func NewMemberdeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberdeclaratorContext {
	var p = new(MemberdeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_memberdeclarator

	return p
}

func (s *MemberdeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberdeclaratorContext) Declarator() IDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *MemberdeclaratorContext) Virtspecifierseq() IVirtspecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVirtspecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVirtspecifierseqContext)
}

func (s *MemberdeclaratorContext) Purespecifier() IPurespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPurespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPurespecifierContext)
}

func (s *MemberdeclaratorContext) Braceorequalinitializer() IBraceorequalinitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBraceorequalinitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBraceorequalinitializerContext)
}

func (s *MemberdeclaratorContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *MemberdeclaratorContext) Constantexpression() IConstantexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantexpressionContext)
}

func (s *MemberdeclaratorContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *MemberdeclaratorContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *MemberdeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberdeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *MemberdeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterMemberdeclarator(s)
	}
}

func (s *MemberdeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitMemberdeclarator(s)
	}
}

func (s *MemberdeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitMemberdeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Memberdeclarator() (localctx IMemberdeclaratorContext) {
	localctx = NewMemberdeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, CPP14ParserRULE_memberdeclarator)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2058)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 256, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2039)
			p.Declarator()
		}
		p.SetState(2041)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 251, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2040)
				p.virtspecifierseq(0)
			}


		}
		p.SetState(2044)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 252, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2043)
				p.Purespecifier()
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2046)
			p.Declarator()
		}
		p.SetState(2048)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 253, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2047)
				p.Braceorequalinitializer()
			}


		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(2051)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserIdentifier {
			{
				p.SetState(2050)
				p.Match(CPP14ParserIdentifier)
			}

		}
		p.SetState(2054)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(2053)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(2056)
			p.Match(CPP14ParserColon)
		}
		{
			p.SetState(2057)
			p.Constantexpression()
		}

	}


	return localctx
}


// IVirtspecifierseqContext is an interface to support dynamic dispatch.
type IVirtspecifierseqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVirtspecifierseqContext differentiates from other interfaces.
	IsVirtspecifierseqContext()
}

type VirtspecifierseqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVirtspecifierseqContext() *VirtspecifierseqContext {
	var p = new(VirtspecifierseqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_virtspecifierseq
	return p
}

func (*VirtspecifierseqContext) IsVirtspecifierseqContext() {}

func NewVirtspecifierseqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VirtspecifierseqContext {
	var p = new(VirtspecifierseqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_virtspecifierseq

	return p
}

func (s *VirtspecifierseqContext) GetParser() antlr.Parser { return s.parser }

func (s *VirtspecifierseqContext) Virtspecifier() IVirtspecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVirtspecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVirtspecifierContext)
}

func (s *VirtspecifierseqContext) Virtspecifierseq() IVirtspecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVirtspecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVirtspecifierseqContext)
}

func (s *VirtspecifierseqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VirtspecifierseqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *VirtspecifierseqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterVirtspecifierseq(s)
	}
}

func (s *VirtspecifierseqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitVirtspecifierseq(s)
	}
}

func (s *VirtspecifierseqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitVirtspecifierseq(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Virtspecifierseq() (localctx IVirtspecifierseqContext) {
	return p.virtspecifierseq(0)
}

func (p *CPP14Parser) virtspecifierseq(_p int) (localctx IVirtspecifierseqContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewVirtspecifierseqContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IVirtspecifierseqContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 310
	p.EnterRecursionRule(localctx, 310, CPP14ParserRULE_virtspecifierseq, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2061)
		p.Virtspecifier()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2067)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 257, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewVirtspecifierseqContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_virtspecifierseq)
			p.SetState(2063)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(2064)
				p.Virtspecifier()
			}


		}
		p.SetState(2069)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 257, p.GetParserRuleContext())
	}



	return localctx
}


// IVirtspecifierContext is an interface to support dynamic dispatch.
type IVirtspecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVirtspecifierContext differentiates from other interfaces.
	IsVirtspecifierContext()
}

type VirtspecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVirtspecifierContext() *VirtspecifierContext {
	var p = new(VirtspecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_virtspecifier
	return p
}

func (*VirtspecifierContext) IsVirtspecifierContext() {}

func NewVirtspecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VirtspecifierContext {
	var p = new(VirtspecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_virtspecifier

	return p
}

func (s *VirtspecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *VirtspecifierContext) Override() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOverride, 0)
}

func (s *VirtspecifierContext) Final() antlr.TerminalNode {
	return s.GetToken(CPP14ParserFinal, 0)
}

func (s *VirtspecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VirtspecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *VirtspecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterVirtspecifier(s)
	}
}

func (s *VirtspecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitVirtspecifier(s)
	}
}

func (s *VirtspecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitVirtspecifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Virtspecifier() (localctx IVirtspecifierContext) {
	localctx = NewVirtspecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, CPP14ParserRULE_virtspecifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2070)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserFinal || _la == CPP14ParserOverride) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IPurespecifierContext is an interface to support dynamic dispatch.
type IPurespecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetVal returns the val token.
	GetVal() antlr.Token 


	// SetVal sets the val token.
	SetVal(antlr.Token) 


	// IsPurespecifierContext differentiates from other interfaces.
	IsPurespecifierContext()
}

type PurespecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	val antlr.Token
}

func NewEmptyPurespecifierContext() *PurespecifierContext {
	var p = new(PurespecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_purespecifier
	return p
}

func (*PurespecifierContext) IsPurespecifierContext() {}

func NewPurespecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PurespecifierContext {
	var p = new(PurespecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_purespecifier

	return p
}

func (s *PurespecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *PurespecifierContext) GetVal() antlr.Token { return s.val }


func (s *PurespecifierContext) SetVal(v antlr.Token) { s.val = v }


func (s *PurespecifierContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *PurespecifierContext) Octalliteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOctalliteral, 0)
}

func (s *PurespecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PurespecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PurespecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterPurespecifier(s)
	}
}

func (s *PurespecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitPurespecifier(s)
	}
}

func (s *PurespecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitPurespecifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Purespecifier() (localctx IPurespecifierContext) {
	localctx = NewPurespecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, CPP14ParserRULE_purespecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2072)
		p.Match(CPP14ParserAssign)
	}
	{
		p.SetState(2073)

		var _m = p.Match(CPP14ParserOctalliteral)

		localctx.(*PurespecifierContext).val = _m
	}
	if((func() string { if localctx.(*PurespecifierContext).GetVal() == nil { return "" } else { return localctx.(*PurespecifierContext).GetVal().GetText() }}()).compareTo("0")!=0) throw new InputMismatchException(this);



	return localctx
}


// IBaseclauseContext is an interface to support dynamic dispatch.
type IBaseclauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBaseclauseContext differentiates from other interfaces.
	IsBaseclauseContext()
}

type BaseclauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBaseclauseContext() *BaseclauseContext {
	var p = new(BaseclauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_baseclause
	return p
}

func (*BaseclauseContext) IsBaseclauseContext() {}

func NewBaseclauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BaseclauseContext {
	var p = new(BaseclauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_baseclause

	return p
}

func (s *BaseclauseContext) GetParser() antlr.Parser { return s.parser }

func (s *BaseclauseContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *BaseclauseContext) Basespecifierlist() IBasespecifierlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasespecifierlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasespecifierlistContext)
}

func (s *BaseclauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BaseclauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *BaseclauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterBaseclause(s)
	}
}

func (s *BaseclauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitBaseclause(s)
	}
}

func (s *BaseclauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitBaseclause(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Baseclause() (localctx IBaseclauseContext) {
	localctx = NewBaseclauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, CPP14ParserRULE_baseclause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2076)
		p.Match(CPP14ParserColon)
	}
	{
		p.SetState(2077)
		p.basespecifierlist(0)
	}



	return localctx
}


// IBasespecifierlistContext is an interface to support dynamic dispatch.
type IBasespecifierlistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBasespecifierlistContext differentiates from other interfaces.
	IsBasespecifierlistContext()
}

type BasespecifierlistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBasespecifierlistContext() *BasespecifierlistContext {
	var p = new(BasespecifierlistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_basespecifierlist
	return p
}

func (*BasespecifierlistContext) IsBasespecifierlistContext() {}

func NewBasespecifierlistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BasespecifierlistContext {
	var p = new(BasespecifierlistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_basespecifierlist

	return p
}

func (s *BasespecifierlistContext) GetParser() antlr.Parser { return s.parser }

func (s *BasespecifierlistContext) Basespecifier() IBasespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasespecifierContext)
}

func (s *BasespecifierlistContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *BasespecifierlistContext) Basespecifierlist() IBasespecifierlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasespecifierlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasespecifierlistContext)
}

func (s *BasespecifierlistContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *BasespecifierlistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BasespecifierlistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *BasespecifierlistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterBasespecifierlist(s)
	}
}

func (s *BasespecifierlistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitBasespecifierlist(s)
	}
}

func (s *BasespecifierlistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitBasespecifierlist(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Basespecifierlist() (localctx IBasespecifierlistContext) {
	return p.basespecifierlist(0)
}

func (p *CPP14Parser) basespecifierlist(_p int) (localctx IBasespecifierlistContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBasespecifierlistContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBasespecifierlistContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 318
	p.EnterRecursionRule(localctx, 318, CPP14ParserRULE_basespecifierlist, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2080)
		p.Basespecifier()
	}
	p.SetState(2082)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 258, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2081)
			p.Match(CPP14ParserEllipsis)
		}


	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2092)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 260, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBasespecifierlistContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_basespecifierlist)
			p.SetState(2084)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(2085)
				p.Match(CPP14ParserComma)
			}
			{
				p.SetState(2086)
				p.Basespecifier()
			}
			p.SetState(2088)
			p.GetErrorHandler().Sync(p)


			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 259, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(2087)
					p.Match(CPP14ParserEllipsis)
				}


			}


		}
		p.SetState(2094)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 260, p.GetParserRuleContext())
	}



	return localctx
}


// IBasespecifierContext is an interface to support dynamic dispatch.
type IBasespecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBasespecifierContext differentiates from other interfaces.
	IsBasespecifierContext()
}

type BasespecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBasespecifierContext() *BasespecifierContext {
	var p = new(BasespecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_basespecifier
	return p
}

func (*BasespecifierContext) IsBasespecifierContext() {}

func NewBasespecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BasespecifierContext {
	var p = new(BasespecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_basespecifier

	return p
}

func (s *BasespecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *BasespecifierContext) Basetypespecifier() IBasetypespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasetypespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasetypespecifierContext)
}

func (s *BasespecifierContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *BasespecifierContext) Virtual() antlr.TerminalNode {
	return s.GetToken(CPP14ParserVirtual, 0)
}

func (s *BasespecifierContext) Accessspecifier() IAccessspecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccessspecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccessspecifierContext)
}

func (s *BasespecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BasespecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *BasespecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterBasespecifier(s)
	}
}

func (s *BasespecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitBasespecifier(s)
	}
}

func (s *BasespecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitBasespecifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Basespecifier() (localctx IBasespecifierContext) {
	localctx = NewBasespecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, CPP14ParserRULE_basespecifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2116)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 266, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2096)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(2095)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(2098)
			p.Basetypespecifier()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2100)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(2099)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(2102)
			p.Match(CPP14ParserVirtual)
		}
		p.SetState(2104)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if ((((_la - 53)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 53))) & ((1 << (CPP14ParserPrivate - 53)) | (1 << (CPP14ParserProtected - 53)) | (1 << (CPP14ParserPublic - 53)))) != 0) {
			{
				p.SetState(2103)
				p.Accessspecifier()
			}

		}
		{
			p.SetState(2106)
			p.Basetypespecifier()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(2108)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(2107)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(2110)
			p.Accessspecifier()
		}
		p.SetState(2112)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserVirtual {
			{
				p.SetState(2111)
				p.Match(CPP14ParserVirtual)
			}

		}
		{
			p.SetState(2114)
			p.Basetypespecifier()
		}

	}


	return localctx
}


// IClassordecltypeContext is an interface to support dynamic dispatch.
type IClassordecltypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassordecltypeContext differentiates from other interfaces.
	IsClassordecltypeContext()
}

type ClassordecltypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassordecltypeContext() *ClassordecltypeContext {
	var p = new(ClassordecltypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_classordecltype
	return p
}

func (*ClassordecltypeContext) IsClassordecltypeContext() {}

func NewClassordecltypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassordecltypeContext {
	var p = new(ClassordecltypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_classordecltype

	return p
}

func (s *ClassordecltypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassordecltypeContext) Classname() IClassnameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassnameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassnameContext)
}

func (s *ClassordecltypeContext) Nestednamespecifier() INestednamespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestednamespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestednamespecifierContext)
}

func (s *ClassordecltypeContext) Decltypespecifier() IDecltypespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecltypespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecltypespecifierContext)
}

func (s *ClassordecltypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassordecltypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ClassordecltypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterClassordecltype(s)
	}
}

func (s *ClassordecltypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitClassordecltype(s)
	}
}

func (s *ClassordecltypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitClassordecltype(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Classordecltype() (localctx IClassordecltypeContext) {
	localctx = NewClassordecltypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, CPP14ParserRULE_classordecltype)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2123)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 268, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2119)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 267, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2118)
				p.nestednamespecifier(0)
			}


		}
		{
			p.SetState(2121)
			p.Classname()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2122)
			p.Decltypespecifier()
		}

	}


	return localctx
}


// IBasetypespecifierContext is an interface to support dynamic dispatch.
type IBasetypespecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBasetypespecifierContext differentiates from other interfaces.
	IsBasetypespecifierContext()
}

type BasetypespecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBasetypespecifierContext() *BasetypespecifierContext {
	var p = new(BasetypespecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_basetypespecifier
	return p
}

func (*BasetypespecifierContext) IsBasetypespecifierContext() {}

func NewBasetypespecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BasetypespecifierContext {
	var p = new(BasetypespecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_basetypespecifier

	return p
}

func (s *BasetypespecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *BasetypespecifierContext) Classordecltype() IClassordecltypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassordecltypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassordecltypeContext)
}

func (s *BasetypespecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BasetypespecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *BasetypespecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterBasetypespecifier(s)
	}
}

func (s *BasetypespecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitBasetypespecifier(s)
	}
}

func (s *BasetypespecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitBasetypespecifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Basetypespecifier() (localctx IBasetypespecifierContext) {
	localctx = NewBasetypespecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, CPP14ParserRULE_basetypespecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2125)
		p.Classordecltype()
	}



	return localctx
}


// IAccessspecifierContext is an interface to support dynamic dispatch.
type IAccessspecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAccessspecifierContext differentiates from other interfaces.
	IsAccessspecifierContext()
}

type AccessspecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAccessspecifierContext() *AccessspecifierContext {
	var p = new(AccessspecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_accessspecifier
	return p
}

func (*AccessspecifierContext) IsAccessspecifierContext() {}

func NewAccessspecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AccessspecifierContext {
	var p = new(AccessspecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_accessspecifier

	return p
}

func (s *AccessspecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *AccessspecifierContext) Private() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPrivate, 0)
}

func (s *AccessspecifierContext) Protected() antlr.TerminalNode {
	return s.GetToken(CPP14ParserProtected, 0)
}

func (s *AccessspecifierContext) Public() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPublic, 0)
}

func (s *AccessspecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AccessspecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AccessspecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterAccessspecifier(s)
	}
}

func (s *AccessspecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitAccessspecifier(s)
	}
}

func (s *AccessspecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitAccessspecifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Accessspecifier() (localctx IAccessspecifierContext) {
	localctx = NewAccessspecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, CPP14ParserRULE_accessspecifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2127)
		_la = p.GetTokenStream().LA(1)

		if !(((((_la - 53)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 53))) & ((1 << (CPP14ParserPrivate - 53)) | (1 << (CPP14ParserProtected - 53)) | (1 << (CPP14ParserPublic - 53)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IConversionfunctionidContext is an interface to support dynamic dispatch.
type IConversionfunctionidContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConversionfunctionidContext differentiates from other interfaces.
	IsConversionfunctionidContext()
}

type ConversionfunctionidContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConversionfunctionidContext() *ConversionfunctionidContext {
	var p = new(ConversionfunctionidContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_conversionfunctionid
	return p
}

func (*ConversionfunctionidContext) IsConversionfunctionidContext() {}

func NewConversionfunctionidContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConversionfunctionidContext {
	var p = new(ConversionfunctionidContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_conversionfunctionid

	return p
}

func (s *ConversionfunctionidContext) GetParser() antlr.Parser { return s.parser }

func (s *ConversionfunctionidContext) Operator() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOperator, 0)
}

func (s *ConversionfunctionidContext) Conversiontypeid() IConversiontypeidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConversiontypeidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConversiontypeidContext)
}

func (s *ConversionfunctionidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConversionfunctionidContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ConversionfunctionidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterConversionfunctionid(s)
	}
}

func (s *ConversionfunctionidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitConversionfunctionid(s)
	}
}

func (s *ConversionfunctionidContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitConversionfunctionid(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Conversionfunctionid() (localctx IConversionfunctionidContext) {
	localctx = NewConversionfunctionidContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, CPP14ParserRULE_conversionfunctionid)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2129)
		p.Match(CPP14ParserOperator)
	}
	{
		p.SetState(2130)
		p.Conversiontypeid()
	}



	return localctx
}


// IConversiontypeidContext is an interface to support dynamic dispatch.
type IConversiontypeidContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConversiontypeidContext differentiates from other interfaces.
	IsConversiontypeidContext()
}

type ConversiontypeidContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConversiontypeidContext() *ConversiontypeidContext {
	var p = new(ConversiontypeidContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_conversiontypeid
	return p
}

func (*ConversiontypeidContext) IsConversiontypeidContext() {}

func NewConversiontypeidContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConversiontypeidContext {
	var p = new(ConversiontypeidContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_conversiontypeid

	return p
}

func (s *ConversiontypeidContext) GetParser() antlr.Parser { return s.parser }

func (s *ConversiontypeidContext) Typespecifierseq() ITypespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypespecifierseqContext)
}

func (s *ConversiontypeidContext) Conversiondeclarator() IConversiondeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConversiondeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConversiondeclaratorContext)
}

func (s *ConversiontypeidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConversiontypeidContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ConversiontypeidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterConversiontypeid(s)
	}
}

func (s *ConversiontypeidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitConversiontypeid(s)
	}
}

func (s *ConversiontypeidContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitConversiontypeid(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Conversiontypeid() (localctx IConversiontypeidContext) {
	localctx = NewConversiontypeidContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, CPP14ParserRULE_conversiontypeid)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2132)
		p.Typespecifierseq()
	}
	p.SetState(2134)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 269, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2133)
			p.Conversiondeclarator()
		}


	}



	return localctx
}


// IConversiondeclaratorContext is an interface to support dynamic dispatch.
type IConversiondeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConversiondeclaratorContext differentiates from other interfaces.
	IsConversiondeclaratorContext()
}

type ConversiondeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConversiondeclaratorContext() *ConversiondeclaratorContext {
	var p = new(ConversiondeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_conversiondeclarator
	return p
}

func (*ConversiondeclaratorContext) IsConversiondeclaratorContext() {}

func NewConversiondeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConversiondeclaratorContext {
	var p = new(ConversiondeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_conversiondeclarator

	return p
}

func (s *ConversiondeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *ConversiondeclaratorContext) Ptroperator() IPtroperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPtroperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPtroperatorContext)
}

func (s *ConversiondeclaratorContext) Conversiondeclarator() IConversiondeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConversiondeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConversiondeclaratorContext)
}

func (s *ConversiondeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConversiondeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ConversiondeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterConversiondeclarator(s)
	}
}

func (s *ConversiondeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitConversiondeclarator(s)
	}
}

func (s *ConversiondeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitConversiondeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Conversiondeclarator() (localctx IConversiondeclaratorContext) {
	localctx = NewConversiondeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, CPP14ParserRULE_conversiondeclarator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2136)
		p.Ptroperator()
	}
	p.SetState(2138)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 270, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2137)
			p.Conversiondeclarator()
		}


	}



	return localctx
}


// ICtorinitializerContext is an interface to support dynamic dispatch.
type ICtorinitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCtorinitializerContext differentiates from other interfaces.
	IsCtorinitializerContext()
}

type CtorinitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCtorinitializerContext() *CtorinitializerContext {
	var p = new(CtorinitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_ctorinitializer
	return p
}

func (*CtorinitializerContext) IsCtorinitializerContext() {}

func NewCtorinitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CtorinitializerContext {
	var p = new(CtorinitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_ctorinitializer

	return p
}

func (s *CtorinitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *CtorinitializerContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *CtorinitializerContext) Meminitializerlist() IMeminitializerlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMeminitializerlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMeminitializerlistContext)
}

func (s *CtorinitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CtorinitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *CtorinitializerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterCtorinitializer(s)
	}
}

func (s *CtorinitializerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitCtorinitializer(s)
	}
}

func (s *CtorinitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitCtorinitializer(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Ctorinitializer() (localctx ICtorinitializerContext) {
	localctx = NewCtorinitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, CPP14ParserRULE_ctorinitializer)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2140)
		p.Match(CPP14ParserColon)
	}
	{
		p.SetState(2141)
		p.Meminitializerlist()
	}



	return localctx
}


// IMeminitializerlistContext is an interface to support dynamic dispatch.
type IMeminitializerlistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMeminitializerlistContext differentiates from other interfaces.
	IsMeminitializerlistContext()
}

type MeminitializerlistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeminitializerlistContext() *MeminitializerlistContext {
	var p = new(MeminitializerlistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_meminitializerlist
	return p
}

func (*MeminitializerlistContext) IsMeminitializerlistContext() {}

func NewMeminitializerlistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MeminitializerlistContext {
	var p = new(MeminitializerlistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_meminitializerlist

	return p
}

func (s *MeminitializerlistContext) GetParser() antlr.Parser { return s.parser }

func (s *MeminitializerlistContext) Meminitializer() IMeminitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMeminitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMeminitializerContext)
}

func (s *MeminitializerlistContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *MeminitializerlistContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *MeminitializerlistContext) Meminitializerlist() IMeminitializerlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMeminitializerlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMeminitializerlistContext)
}

func (s *MeminitializerlistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MeminitializerlistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *MeminitializerlistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterMeminitializerlist(s)
	}
}

func (s *MeminitializerlistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitMeminitializerlist(s)
	}
}

func (s *MeminitializerlistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitMeminitializerlist(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Meminitializerlist() (localctx IMeminitializerlistContext) {
	localctx = NewMeminitializerlistContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, CPP14ParserRULE_meminitializerlist)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2154)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 273, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2143)
			p.Meminitializer()
		}
		p.SetState(2145)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserEllipsis {
			{
				p.SetState(2144)
				p.Match(CPP14ParserEllipsis)
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2147)
			p.Meminitializer()
		}
		p.SetState(2149)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserEllipsis {
			{
				p.SetState(2148)
				p.Match(CPP14ParserEllipsis)
			}

		}
		{
			p.SetState(2151)
			p.Match(CPP14ParserComma)
		}
		{
			p.SetState(2152)
			p.Meminitializerlist()
		}

	}


	return localctx
}


// IMeminitializerContext is an interface to support dynamic dispatch.
type IMeminitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMeminitializerContext differentiates from other interfaces.
	IsMeminitializerContext()
}

type MeminitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeminitializerContext() *MeminitializerContext {
	var p = new(MeminitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_meminitializer
	return p
}

func (*MeminitializerContext) IsMeminitializerContext() {}

func NewMeminitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MeminitializerContext {
	var p = new(MeminitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_meminitializer

	return p
}

func (s *MeminitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *MeminitializerContext) Meminitializerid() IMeminitializeridContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMeminitializeridContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMeminitializeridContext)
}

func (s *MeminitializerContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *MeminitializerContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *MeminitializerContext) Expressionlist() IExpressionlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionlistContext)
}

func (s *MeminitializerContext) Bracedinitlist() IBracedinitlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBracedinitlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBracedinitlistContext)
}

func (s *MeminitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MeminitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *MeminitializerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterMeminitializer(s)
	}
}

func (s *MeminitializerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitMeminitializer(s)
	}
}

func (s *MeminitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitMeminitializer(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Meminitializer() (localctx IMeminitializerContext) {
	localctx = NewMeminitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, CPP14ParserRULE_meminitializer)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2166)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 275, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2156)
			p.Meminitializerid()
		}
		{
			p.SetState(2157)
			p.Match(CPP14ParserLeftParen)
		}
		p.SetState(2159)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << CPP14ParserT__0) | (1 << CPP14ParserT__1) | (1 << CPP14ParserAlignof) | (1 << CPP14ParserAuto) | (1 << CPP14ParserBool) | (1 << CPP14ParserChar) | (1 << CPP14ParserChar16) | (1 << CPP14ParserChar32) | (1 << CPP14ParserConst_cast) | (1 << CPP14ParserDecltype) | (1 << CPP14ParserDelete) | (1 << CPP14ParserDouble) | (1 << CPP14ParserDynamic_cast))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (CPP14ParserFalse - 36)) | (1 << (CPP14ParserFloat - 36)) | (1 << (CPP14ParserInt - 36)) | (1 << (CPP14ParserLong - 36)) | (1 << (CPP14ParserNew - 36)) | (1 << (CPP14ParserNoexcept - 36)) | (1 << (CPP14ParserNullptr - 36)) | (1 << (CPP14ParserOperator - 36)) | (1 << (CPP14ParserReinterpret_cast - 36)) | (1 << (CPP14ParserShort - 36)) | (1 << (CPP14ParserSigned - 36)) | (1 << (CPP14ParserSizeof - 36)) | (1 << (CPP14ParserStatic_cast - 36)))) != 0) || ((((_la - 68)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 68))) & ((1 << (CPP14ParserThis - 68)) | (1 << (CPP14ParserThrow - 68)) | (1 << (CPP14ParserTrue - 68)) | (1 << (CPP14ParserTypeid_ - 68)) | (1 << (CPP14ParserTypename_ - 68)) | (1 << (CPP14ParserUnsigned - 68)) | (1 << (CPP14ParserVoid - 68)) | (1 << (CPP14ParserWchar - 68)) | (1 << (CPP14ParserLeftParen - 68)) | (1 << (CPP14ParserLeftBracket - 68)) | (1 << (CPP14ParserLeftBrace - 68)) | (1 << (CPP14ParserPlus - 68)) | (1 << (CPP14ParserMinus - 68)) | (1 << (CPP14ParserStar - 68)) | (1 << (CPP14ParserAnd - 68)) | (1 << (CPP14ParserOr - 68)) | (1 << (CPP14ParserTilde - 68)))) != 0) || ((((_la - 121)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 121))) & ((1 << (CPP14ParserPlusPlus - 121)) | (1 << (CPP14ParserMinusMinus - 121)) | (1 << (CPP14ParserDoublecolon - 121)) | (1 << (CPP14ParserIdentifier - 121)) | (1 << (CPP14ParserIntegerliteral - 121)) | (1 << (CPP14ParserCharacterliteral - 121)) | (1 << (CPP14ParserFloatingliteral - 121)) | (1 << (CPP14ParserStringliteral - 121)) | (1 << (CPP14ParserUserdefinedintegerliteral - 121)) | (1 << (CPP14ParserUserdefinedfloatingliteral - 121)) | (1 << (CPP14ParserUserdefinedstringliteral - 121)) | (1 << (CPP14ParserUserdefinedcharacterliteral - 121)))) != 0) {
			{
				p.SetState(2158)
				p.Expressionlist()
			}

		}
		{
			p.SetState(2161)
			p.Match(CPP14ParserRightParen)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2163)
			p.Meminitializerid()
		}
		{
			p.SetState(2164)
			p.Bracedinitlist()
		}

	}


	return localctx
}


// IMeminitializeridContext is an interface to support dynamic dispatch.
type IMeminitializeridContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMeminitializeridContext differentiates from other interfaces.
	IsMeminitializeridContext()
}

type MeminitializeridContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeminitializeridContext() *MeminitializeridContext {
	var p = new(MeminitializeridContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_meminitializerid
	return p
}

func (*MeminitializeridContext) IsMeminitializeridContext() {}

func NewMeminitializeridContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MeminitializeridContext {
	var p = new(MeminitializeridContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_meminitializerid

	return p
}

func (s *MeminitializeridContext) GetParser() antlr.Parser { return s.parser }

func (s *MeminitializeridContext) Classordecltype() IClassordecltypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassordecltypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassordecltypeContext)
}

func (s *MeminitializeridContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *MeminitializeridContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MeminitializeridContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *MeminitializeridContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterMeminitializerid(s)
	}
}

func (s *MeminitializeridContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitMeminitializerid(s)
	}
}

func (s *MeminitializeridContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitMeminitializerid(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Meminitializerid() (localctx IMeminitializeridContext) {
	localctx = NewMeminitializeridContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, CPP14ParserRULE_meminitializerid)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2170)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 276, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2168)
			p.Classordecltype()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2169)
			p.Match(CPP14ParserIdentifier)
		}

	}


	return localctx
}


// IOperatorfunctionidContext is an interface to support dynamic dispatch.
type IOperatorfunctionidContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperatorfunctionidContext differentiates from other interfaces.
	IsOperatorfunctionidContext()
}

type OperatorfunctionidContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperatorfunctionidContext() *OperatorfunctionidContext {
	var p = new(OperatorfunctionidContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_operatorfunctionid
	return p
}

func (*OperatorfunctionidContext) IsOperatorfunctionidContext() {}

func NewOperatorfunctionidContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperatorfunctionidContext {
	var p = new(OperatorfunctionidContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_operatorfunctionid

	return p
}

func (s *OperatorfunctionidContext) GetParser() antlr.Parser { return s.parser }

func (s *OperatorfunctionidContext) Operator() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOperator, 0)
}

func (s *OperatorfunctionidContext) Theoperator() ITheoperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheoperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheoperatorContext)
}

func (s *OperatorfunctionidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperatorfunctionidContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *OperatorfunctionidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterOperatorfunctionid(s)
	}
}

func (s *OperatorfunctionidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitOperatorfunctionid(s)
	}
}

func (s *OperatorfunctionidContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitOperatorfunctionid(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Operatorfunctionid() (localctx IOperatorfunctionidContext) {
	localctx = NewOperatorfunctionidContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, CPP14ParserRULE_operatorfunctionid)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2172)
		p.Match(CPP14ParserOperator)
	}
	{
		p.SetState(2173)
		p.Theoperator()
	}



	return localctx
}


// ILiteraloperatoridContext is an interface to support dynamic dispatch.
type ILiteraloperatoridContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteraloperatoridContext differentiates from other interfaces.
	IsLiteraloperatoridContext()
}

type LiteraloperatoridContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteraloperatoridContext() *LiteraloperatoridContext {
	var p = new(LiteraloperatoridContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_literaloperatorid
	return p
}

func (*LiteraloperatoridContext) IsLiteraloperatoridContext() {}

func NewLiteraloperatoridContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteraloperatoridContext {
	var p = new(LiteraloperatoridContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_literaloperatorid

	return p
}

func (s *LiteraloperatoridContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteraloperatoridContext) Operator() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOperator, 0)
}

func (s *LiteraloperatoridContext) Stringliteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStringliteral, 0)
}

func (s *LiteraloperatoridContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *LiteraloperatoridContext) Userdefinedstringliteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUserdefinedstringliteral, 0)
}

func (s *LiteraloperatoridContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteraloperatoridContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *LiteraloperatoridContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterLiteraloperatorid(s)
	}
}

func (s *LiteraloperatoridContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitLiteraloperatorid(s)
	}
}

func (s *LiteraloperatoridContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitLiteraloperatorid(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Literaloperatorid() (localctx ILiteraloperatoridContext) {
	localctx = NewLiteraloperatoridContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 344, CPP14ParserRULE_literaloperatorid)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2180)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 277, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2175)
			p.Match(CPP14ParserOperator)
		}
		{
			p.SetState(2176)
			p.Match(CPP14ParserStringliteral)
		}
		{
			p.SetState(2177)
			p.Match(CPP14ParserIdentifier)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2178)
			p.Match(CPP14ParserOperator)
		}
		{
			p.SetState(2179)
			p.Match(CPP14ParserUserdefinedstringliteral)
		}

	}


	return localctx
}


// ITemplatedeclarationContext is an interface to support dynamic dispatch.
type ITemplatedeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplatedeclarationContext differentiates from other interfaces.
	IsTemplatedeclarationContext()
}

type TemplatedeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplatedeclarationContext() *TemplatedeclarationContext {
	var p = new(TemplatedeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_templatedeclaration
	return p
}

func (*TemplatedeclarationContext) IsTemplatedeclarationContext() {}

func NewTemplatedeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplatedeclarationContext {
	var p = new(TemplatedeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templatedeclaration

	return p
}

func (s *TemplatedeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplatedeclarationContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *TemplatedeclarationContext) Less() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, 0)
}

func (s *TemplatedeclarationContext) Templateparameterlist() ITemplateparameterlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateparameterlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateparameterlistContext)
}

func (s *TemplatedeclarationContext) Greater() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, 0)
}

func (s *TemplatedeclarationContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *TemplatedeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplatedeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TemplatedeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTemplatedeclaration(s)
	}
}

func (s *TemplatedeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTemplatedeclaration(s)
	}
}

func (s *TemplatedeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTemplatedeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Templatedeclaration() (localctx ITemplatedeclarationContext) {
	localctx = NewTemplatedeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, CPP14ParserRULE_templatedeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2182)
		p.Match(CPP14ParserTemplate)
	}
	{
		p.SetState(2183)
		p.Match(CPP14ParserLess)
	}
	{
		p.SetState(2184)
		p.templateparameterlist(0)
	}
	{
		p.SetState(2185)
		p.Match(CPP14ParserGreater)
	}
	{
		p.SetState(2186)
		p.Declaration()
	}



	return localctx
}


// ITemplateparameterlistContext is an interface to support dynamic dispatch.
type ITemplateparameterlistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateparameterlistContext differentiates from other interfaces.
	IsTemplateparameterlistContext()
}

type TemplateparameterlistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateparameterlistContext() *TemplateparameterlistContext {
	var p = new(TemplateparameterlistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateparameterlist
	return p
}

func (*TemplateparameterlistContext) IsTemplateparameterlistContext() {}

func NewTemplateparameterlistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateparameterlistContext {
	var p = new(TemplateparameterlistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templateparameterlist

	return p
}

func (s *TemplateparameterlistContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateparameterlistContext) Templateparameter() ITemplateparameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateparameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateparameterContext)
}

func (s *TemplateparameterlistContext) Templateparameterlist() ITemplateparameterlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateparameterlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateparameterlistContext)
}

func (s *TemplateparameterlistContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *TemplateparameterlistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateparameterlistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TemplateparameterlistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTemplateparameterlist(s)
	}
}

func (s *TemplateparameterlistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTemplateparameterlist(s)
	}
}

func (s *TemplateparameterlistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTemplateparameterlist(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Templateparameterlist() (localctx ITemplateparameterlistContext) {
	return p.templateparameterlist(0)
}

func (p *CPP14Parser) templateparameterlist(_p int) (localctx ITemplateparameterlistContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewTemplateparameterlistContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ITemplateparameterlistContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 348
	p.EnterRecursionRule(localctx, 348, CPP14ParserRULE_templateparameterlist, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2189)
		p.Templateparameter()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2196)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 278, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewTemplateparameterlistContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_templateparameterlist)
			p.SetState(2191)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(2192)
				p.Match(CPP14ParserComma)
			}
			{
				p.SetState(2193)
				p.Templateparameter()
			}


		}
		p.SetState(2198)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 278, p.GetParserRuleContext())
	}



	return localctx
}


// ITemplateparameterContext is an interface to support dynamic dispatch.
type ITemplateparameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateparameterContext differentiates from other interfaces.
	IsTemplateparameterContext()
}

type TemplateparameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateparameterContext() *TemplateparameterContext {
	var p = new(TemplateparameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateparameter
	return p
}

func (*TemplateparameterContext) IsTemplateparameterContext() {}

func NewTemplateparameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateparameterContext {
	var p = new(TemplateparameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templateparameter

	return p
}

func (s *TemplateparameterContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateparameterContext) Typeparameter() ITypeparameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeparameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeparameterContext)
}

func (s *TemplateparameterContext) Parameterdeclaration() IParameterdeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterdeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterdeclarationContext)
}

func (s *TemplateparameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateparameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TemplateparameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTemplateparameter(s)
	}
}

func (s *TemplateparameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTemplateparameter(s)
	}
}

func (s *TemplateparameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTemplateparameter(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Templateparameter() (localctx ITemplateparameterContext) {
	localctx = NewTemplateparameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 350, CPP14ParserRULE_templateparameter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2201)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 279, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2199)
			p.Typeparameter()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2200)
			p.Parameterdeclaration()
		}

	}


	return localctx
}


// ITypeparameterContext is an interface to support dynamic dispatch.
type ITypeparameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeparameterContext differentiates from other interfaces.
	IsTypeparameterContext()
}

type TypeparameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeparameterContext() *TypeparameterContext {
	var p = new(TypeparameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeparameter
	return p
}

func (*TypeparameterContext) IsTypeparameterContext() {}

func NewTypeparameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeparameterContext {
	var p = new(TypeparameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typeparameter

	return p
}

func (s *TypeparameterContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeparameterContext) Class() antlr.TerminalNode {
	return s.GetToken(CPP14ParserClass, 0)
}

func (s *TypeparameterContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *TypeparameterContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *TypeparameterContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *TypeparameterContext) Thetypeid() IThetypeidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThetypeidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThetypeidContext)
}

func (s *TypeparameterContext) Typename_() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTypename_, 0)
}

func (s *TypeparameterContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *TypeparameterContext) Less() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, 0)
}

func (s *TypeparameterContext) Templateparameterlist() ITemplateparameterlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateparameterlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateparameterlistContext)
}

func (s *TypeparameterContext) Greater() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, 0)
}

func (s *TypeparameterContext) Idexpression() IIdexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdexpressionContext)
}

func (s *TypeparameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeparameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TypeparameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTypeparameter(s)
	}
}

func (s *TypeparameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTypeparameter(s)
	}
}

func (s *TypeparameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTypeparameter(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Typeparameter() (localctx ITypeparameterContext) {
	localctx = NewTypeparameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 352, CPP14ParserRULE_typeparameter)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2251)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 289, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2203)
			p.Match(CPP14ParserClass)
		}
		p.SetState(2205)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 280, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2204)
				p.Match(CPP14ParserEllipsis)
			}


		}
		p.SetState(2208)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 281, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2207)
				p.Match(CPP14ParserIdentifier)
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2210)
			p.Match(CPP14ParserClass)
		}
		p.SetState(2212)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserIdentifier {
			{
				p.SetState(2211)
				p.Match(CPP14ParserIdentifier)
			}

		}
		{
			p.SetState(2214)
			p.Match(CPP14ParserAssign)
		}
		{
			p.SetState(2215)
			p.Thetypeid()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2216)
			p.Match(CPP14ParserTypename_)
		}
		p.SetState(2218)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 283, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2217)
				p.Match(CPP14ParserEllipsis)
			}


		}
		p.SetState(2221)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 284, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2220)
				p.Match(CPP14ParserIdentifier)
			}


		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2223)
			p.Match(CPP14ParserTypename_)
		}
		p.SetState(2225)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserIdentifier {
			{
				p.SetState(2224)
				p.Match(CPP14ParserIdentifier)
			}

		}
		{
			p.SetState(2227)
			p.Match(CPP14ParserAssign)
		}
		{
			p.SetState(2228)
			p.Thetypeid()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2229)
			p.Match(CPP14ParserTemplate)
		}
		{
			p.SetState(2230)
			p.Match(CPP14ParserLess)
		}
		{
			p.SetState(2231)
			p.templateparameterlist(0)
		}
		{
			p.SetState(2232)
			p.Match(CPP14ParserGreater)
		}
		{
			p.SetState(2233)
			p.Match(CPP14ParserClass)
		}
		p.SetState(2235)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 286, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2234)
				p.Match(CPP14ParserEllipsis)
			}


		}
		p.SetState(2238)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 287, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2237)
				p.Match(CPP14ParserIdentifier)
			}


		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2240)
			p.Match(CPP14ParserTemplate)
		}
		{
			p.SetState(2241)
			p.Match(CPP14ParserLess)
		}
		{
			p.SetState(2242)
			p.templateparameterlist(0)
		}
		{
			p.SetState(2243)
			p.Match(CPP14ParserGreater)
		}
		{
			p.SetState(2244)
			p.Match(CPP14ParserClass)
		}
		p.SetState(2246)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserIdentifier {
			{
				p.SetState(2245)
				p.Match(CPP14ParserIdentifier)
			}

		}
		{
			p.SetState(2248)
			p.Match(CPP14ParserAssign)
		}
		{
			p.SetState(2249)
			p.Idexpression()
		}

	}


	return localctx
}


// ISimpletemplateidContext is an interface to support dynamic dispatch.
type ISimpletemplateidContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpletemplateidContext differentiates from other interfaces.
	IsSimpletemplateidContext()
}

type SimpletemplateidContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpletemplateidContext() *SimpletemplateidContext {
	var p = new(SimpletemplateidContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpletemplateid
	return p
}

func (*SimpletemplateidContext) IsSimpletemplateidContext() {}

func NewSimpletemplateidContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpletemplateidContext {
	var p = new(SimpletemplateidContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_simpletemplateid

	return p
}

func (s *SimpletemplateidContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpletemplateidContext) Templatename() ITemplatenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplatenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplatenameContext)
}

func (s *SimpletemplateidContext) Less() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, 0)
}

func (s *SimpletemplateidContext) Greater() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, 0)
}

func (s *SimpletemplateidContext) Templateargumentlist() ITemplateargumentlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateargumentlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateargumentlistContext)
}

func (s *SimpletemplateidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpletemplateidContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *SimpletemplateidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterSimpletemplateid(s)
	}
}

func (s *SimpletemplateidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitSimpletemplateid(s)
	}
}

func (s *SimpletemplateidContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitSimpletemplateid(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Simpletemplateid() (localctx ISimpletemplateidContext) {
	localctx = NewSimpletemplateidContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 354, CPP14ParserRULE_simpletemplateid)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2253)
		p.Templatename()
	}
	{
		p.SetState(2254)
		p.Match(CPP14ParserLess)
	}
	p.SetState(2256)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if ((((_la - 1)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 1))) & ((1 << (CPP14ParserT__0 - 1)) | (1 << (CPP14ParserT__1 - 1)) | (1 << (CPP14ParserAlignof - 1)) | (1 << (CPP14ParserAuto - 1)) | (1 << (CPP14ParserBool - 1)) | (1 << (CPP14ParserChar - 1)) | (1 << (CPP14ParserChar16 - 1)) | (1 << (CPP14ParserChar32 - 1)) | (1 << (CPP14ParserClass - 1)) | (1 << (CPP14ParserConst - 1)) | (1 << (CPP14ParserConst_cast - 1)) | (1 << (CPP14ParserDecltype - 1)) | (1 << (CPP14ParserDelete - 1)) | (1 << (CPP14ParserDouble - 1)) | (1 << (CPP14ParserDynamic_cast - 1)) | (1 << (CPP14ParserEnum - 1)))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (CPP14ParserFalse - 36)) | (1 << (CPP14ParserFloat - 36)) | (1 << (CPP14ParserInt - 36)) | (1 << (CPP14ParserLong - 36)) | (1 << (CPP14ParserNew - 36)) | (1 << (CPP14ParserNoexcept - 36)) | (1 << (CPP14ParserNullptr - 36)) | (1 << (CPP14ParserOperator - 36)) | (1 << (CPP14ParserReinterpret_cast - 36)) | (1 << (CPP14ParserShort - 36)) | (1 << (CPP14ParserSigned - 36)) | (1 << (CPP14ParserSizeof - 36)) | (1 << (CPP14ParserStatic_cast - 36)) | (1 << (CPP14ParserStruct - 36)))) != 0) || ((((_la - 68)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 68))) & ((1 << (CPP14ParserThis - 68)) | (1 << (CPP14ParserTrue - 68)) | (1 << (CPP14ParserTypeid_ - 68)) | (1 << (CPP14ParserTypename_ - 68)) | (1 << (CPP14ParserUnion - 68)) | (1 << (CPP14ParserUnsigned - 68)) | (1 << (CPP14ParserVoid - 68)) | (1 << (CPP14ParserVolatile - 68)) | (1 << (CPP14ParserWchar - 68)) | (1 << (CPP14ParserLeftParen - 68)) | (1 << (CPP14ParserLeftBracket - 68)) | (1 << (CPP14ParserPlus - 68)) | (1 << (CPP14ParserMinus - 68)) | (1 << (CPP14ParserStar - 68)) | (1 << (CPP14ParserAnd - 68)) | (1 << (CPP14ParserOr - 68)) | (1 << (CPP14ParserTilde - 68)))) != 0) || ((((_la - 121)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 121))) & ((1 << (CPP14ParserPlusPlus - 121)) | (1 << (CPP14ParserMinusMinus - 121)) | (1 << (CPP14ParserDoublecolon - 121)) | (1 << (CPP14ParserIdentifier - 121)) | (1 << (CPP14ParserIntegerliteral - 121)) | (1 << (CPP14ParserCharacterliteral - 121)) | (1 << (CPP14ParserFloatingliteral - 121)) | (1 << (CPP14ParserStringliteral - 121)) | (1 << (CPP14ParserUserdefinedintegerliteral - 121)) | (1 << (CPP14ParserUserdefinedfloatingliteral - 121)) | (1 << (CPP14ParserUserdefinedstringliteral - 121)) | (1 << (CPP14ParserUserdefinedcharacterliteral - 121)))) != 0) {
		{
			p.SetState(2255)
			p.templateargumentlist(0)
		}

	}
	{
		p.SetState(2258)
		p.Match(CPP14ParserGreater)
	}



	return localctx
}


// ITemplateidContext is an interface to support dynamic dispatch.
type ITemplateidContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateidContext differentiates from other interfaces.
	IsTemplateidContext()
}

type TemplateidContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateidContext() *TemplateidContext {
	var p = new(TemplateidContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateid
	return p
}

func (*TemplateidContext) IsTemplateidContext() {}

func NewTemplateidContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateidContext {
	var p = new(TemplateidContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templateid

	return p
}

func (s *TemplateidContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateidContext) Simpletemplateid() ISimpletemplateidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpletemplateidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpletemplateidContext)
}

func (s *TemplateidContext) Operatorfunctionid() IOperatorfunctionidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperatorfunctionidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperatorfunctionidContext)
}

func (s *TemplateidContext) Less() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, 0)
}

func (s *TemplateidContext) Greater() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, 0)
}

func (s *TemplateidContext) Templateargumentlist() ITemplateargumentlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateargumentlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateargumentlistContext)
}

func (s *TemplateidContext) Literaloperatorid() ILiteraloperatoridContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteraloperatoridContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteraloperatoridContext)
}

func (s *TemplateidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateidContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TemplateidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTemplateid(s)
	}
}

func (s *TemplateidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTemplateid(s)
	}
}

func (s *TemplateidContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTemplateid(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Templateid() (localctx ITemplateidContext) {
	localctx = NewTemplateidContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 356, CPP14ParserRULE_templateid)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2275)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 293, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2260)
			p.Simpletemplateid()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2261)
			p.Operatorfunctionid()
		}
		{
			p.SetState(2262)
			p.Match(CPP14ParserLess)
		}
		p.SetState(2264)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if ((((_la - 1)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 1))) & ((1 << (CPP14ParserT__0 - 1)) | (1 << (CPP14ParserT__1 - 1)) | (1 << (CPP14ParserAlignof - 1)) | (1 << (CPP14ParserAuto - 1)) | (1 << (CPP14ParserBool - 1)) | (1 << (CPP14ParserChar - 1)) | (1 << (CPP14ParserChar16 - 1)) | (1 << (CPP14ParserChar32 - 1)) | (1 << (CPP14ParserClass - 1)) | (1 << (CPP14ParserConst - 1)) | (1 << (CPP14ParserConst_cast - 1)) | (1 << (CPP14ParserDecltype - 1)) | (1 << (CPP14ParserDelete - 1)) | (1 << (CPP14ParserDouble - 1)) | (1 << (CPP14ParserDynamic_cast - 1)) | (1 << (CPP14ParserEnum - 1)))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (CPP14ParserFalse - 36)) | (1 << (CPP14ParserFloat - 36)) | (1 << (CPP14ParserInt - 36)) | (1 << (CPP14ParserLong - 36)) | (1 << (CPP14ParserNew - 36)) | (1 << (CPP14ParserNoexcept - 36)) | (1 << (CPP14ParserNullptr - 36)) | (1 << (CPP14ParserOperator - 36)) | (1 << (CPP14ParserReinterpret_cast - 36)) | (1 << (CPP14ParserShort - 36)) | (1 << (CPP14ParserSigned - 36)) | (1 << (CPP14ParserSizeof - 36)) | (1 << (CPP14ParserStatic_cast - 36)) | (1 << (CPP14ParserStruct - 36)))) != 0) || ((((_la - 68)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 68))) & ((1 << (CPP14ParserThis - 68)) | (1 << (CPP14ParserTrue - 68)) | (1 << (CPP14ParserTypeid_ - 68)) | (1 << (CPP14ParserTypename_ - 68)) | (1 << (CPP14ParserUnion - 68)) | (1 << (CPP14ParserUnsigned - 68)) | (1 << (CPP14ParserVoid - 68)) | (1 << (CPP14ParserVolatile - 68)) | (1 << (CPP14ParserWchar - 68)) | (1 << (CPP14ParserLeftParen - 68)) | (1 << (CPP14ParserLeftBracket - 68)) | (1 << (CPP14ParserPlus - 68)) | (1 << (CPP14ParserMinus - 68)) | (1 << (CPP14ParserStar - 68)) | (1 << (CPP14ParserAnd - 68)) | (1 << (CPP14ParserOr - 68)) | (1 << (CPP14ParserTilde - 68)))) != 0) || ((((_la - 121)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 121))) & ((1 << (CPP14ParserPlusPlus - 121)) | (1 << (CPP14ParserMinusMinus - 121)) | (1 << (CPP14ParserDoublecolon - 121)) | (1 << (CPP14ParserIdentifier - 121)) | (1 << (CPP14ParserIntegerliteral - 121)) | (1 << (CPP14ParserCharacterliteral - 121)) | (1 << (CPP14ParserFloatingliteral - 121)) | (1 << (CPP14ParserStringliteral - 121)) | (1 << (CPP14ParserUserdefinedintegerliteral - 121)) | (1 << (CPP14ParserUserdefinedfloatingliteral - 121)) | (1 << (CPP14ParserUserdefinedstringliteral - 121)) | (1 << (CPP14ParserUserdefinedcharacterliteral - 121)))) != 0) {
			{
				p.SetState(2263)
				p.templateargumentlist(0)
			}

		}
		{
			p.SetState(2266)
			p.Match(CPP14ParserGreater)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2268)
			p.Literaloperatorid()
		}
		{
			p.SetState(2269)
			p.Match(CPP14ParserLess)
		}
		p.SetState(2271)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if ((((_la - 1)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 1))) & ((1 << (CPP14ParserT__0 - 1)) | (1 << (CPP14ParserT__1 - 1)) | (1 << (CPP14ParserAlignof - 1)) | (1 << (CPP14ParserAuto - 1)) | (1 << (CPP14ParserBool - 1)) | (1 << (CPP14ParserChar - 1)) | (1 << (CPP14ParserChar16 - 1)) | (1 << (CPP14ParserChar32 - 1)) | (1 << (CPP14ParserClass - 1)) | (1 << (CPP14ParserConst - 1)) | (1 << (CPP14ParserConst_cast - 1)) | (1 << (CPP14ParserDecltype - 1)) | (1 << (CPP14ParserDelete - 1)) | (1 << (CPP14ParserDouble - 1)) | (1 << (CPP14ParserDynamic_cast - 1)) | (1 << (CPP14ParserEnum - 1)))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (CPP14ParserFalse - 36)) | (1 << (CPP14ParserFloat - 36)) | (1 << (CPP14ParserInt - 36)) | (1 << (CPP14ParserLong - 36)) | (1 << (CPP14ParserNew - 36)) | (1 << (CPP14ParserNoexcept - 36)) | (1 << (CPP14ParserNullptr - 36)) | (1 << (CPP14ParserOperator - 36)) | (1 << (CPP14ParserReinterpret_cast - 36)) | (1 << (CPP14ParserShort - 36)) | (1 << (CPP14ParserSigned - 36)) | (1 << (CPP14ParserSizeof - 36)) | (1 << (CPP14ParserStatic_cast - 36)) | (1 << (CPP14ParserStruct - 36)))) != 0) || ((((_la - 68)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 68))) & ((1 << (CPP14ParserThis - 68)) | (1 << (CPP14ParserTrue - 68)) | (1 << (CPP14ParserTypeid_ - 68)) | (1 << (CPP14ParserTypename_ - 68)) | (1 << (CPP14ParserUnion - 68)) | (1 << (CPP14ParserUnsigned - 68)) | (1 << (CPP14ParserVoid - 68)) | (1 << (CPP14ParserVolatile - 68)) | (1 << (CPP14ParserWchar - 68)) | (1 << (CPP14ParserLeftParen - 68)) | (1 << (CPP14ParserLeftBracket - 68)) | (1 << (CPP14ParserPlus - 68)) | (1 << (CPP14ParserMinus - 68)) | (1 << (CPP14ParserStar - 68)) | (1 << (CPP14ParserAnd - 68)) | (1 << (CPP14ParserOr - 68)) | (1 << (CPP14ParserTilde - 68)))) != 0) || ((((_la - 121)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 121))) & ((1 << (CPP14ParserPlusPlus - 121)) | (1 << (CPP14ParserMinusMinus - 121)) | (1 << (CPP14ParserDoublecolon - 121)) | (1 << (CPP14ParserIdentifier - 121)) | (1 << (CPP14ParserIntegerliteral - 121)) | (1 << (CPP14ParserCharacterliteral - 121)) | (1 << (CPP14ParserFloatingliteral - 121)) | (1 << (CPP14ParserStringliteral - 121)) | (1 << (CPP14ParserUserdefinedintegerliteral - 121)) | (1 << (CPP14ParserUserdefinedfloatingliteral - 121)) | (1 << (CPP14ParserUserdefinedstringliteral - 121)) | (1 << (CPP14ParserUserdefinedcharacterliteral - 121)))) != 0) {
			{
				p.SetState(2270)
				p.templateargumentlist(0)
			}

		}
		{
			p.SetState(2273)
			p.Match(CPP14ParserGreater)
		}

	}


	return localctx
}


// ITemplatenameContext is an interface to support dynamic dispatch.
type ITemplatenameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplatenameContext differentiates from other interfaces.
	IsTemplatenameContext()
}

type TemplatenameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplatenameContext() *TemplatenameContext {
	var p = new(TemplatenameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_templatename
	return p
}

func (*TemplatenameContext) IsTemplatenameContext() {}

func NewTemplatenameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplatenameContext {
	var p = new(TemplatenameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templatename

	return p
}

func (s *TemplatenameContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplatenameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *TemplatenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplatenameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TemplatenameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTemplatename(s)
	}
}

func (s *TemplatenameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTemplatename(s)
	}
}

func (s *TemplatenameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTemplatename(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Templatename() (localctx ITemplatenameContext) {
	localctx = NewTemplatenameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 358, CPP14ParserRULE_templatename)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2277)
		p.Match(CPP14ParserIdentifier)
	}



	return localctx
}


// ITemplateargumentlistContext is an interface to support dynamic dispatch.
type ITemplateargumentlistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateargumentlistContext differentiates from other interfaces.
	IsTemplateargumentlistContext()
}

type TemplateargumentlistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateargumentlistContext() *TemplateargumentlistContext {
	var p = new(TemplateargumentlistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateargumentlist
	return p
}

func (*TemplateargumentlistContext) IsTemplateargumentlistContext() {}

func NewTemplateargumentlistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateargumentlistContext {
	var p = new(TemplateargumentlistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templateargumentlist

	return p
}

func (s *TemplateargumentlistContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateargumentlistContext) Templateargument() ITemplateargumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateargumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateargumentContext)
}

func (s *TemplateargumentlistContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *TemplateargumentlistContext) Templateargumentlist() ITemplateargumentlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateargumentlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateargumentlistContext)
}

func (s *TemplateargumentlistContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *TemplateargumentlistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateargumentlistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TemplateargumentlistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTemplateargumentlist(s)
	}
}

func (s *TemplateargumentlistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTemplateargumentlist(s)
	}
}

func (s *TemplateargumentlistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTemplateargumentlist(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Templateargumentlist() (localctx ITemplateargumentlistContext) {
	return p.templateargumentlist(0)
}

func (p *CPP14Parser) templateargumentlist(_p int) (localctx ITemplateargumentlistContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewTemplateargumentlistContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ITemplateargumentlistContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 360
	p.EnterRecursionRule(localctx, 360, CPP14ParserRULE_templateargumentlist, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2280)
		p.Templateargument()
	}
	p.SetState(2282)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 294, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2281)
			p.Match(CPP14ParserEllipsis)
		}


	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2292)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 296, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewTemplateargumentlistContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_templateargumentlist)
			p.SetState(2284)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(2285)
				p.Match(CPP14ParserComma)
			}
			{
				p.SetState(2286)
				p.Templateargument()
			}
			p.SetState(2288)
			p.GetErrorHandler().Sync(p)


			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 295, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(2287)
					p.Match(CPP14ParserEllipsis)
				}


			}


		}
		p.SetState(2294)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 296, p.GetParserRuleContext())
	}



	return localctx
}


// ITemplateargumentContext is an interface to support dynamic dispatch.
type ITemplateargumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateargumentContext differentiates from other interfaces.
	IsTemplateargumentContext()
}

type TemplateargumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateargumentContext() *TemplateargumentContext {
	var p = new(TemplateargumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateargument
	return p
}

func (*TemplateargumentContext) IsTemplateargumentContext() {}

func NewTemplateargumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateargumentContext {
	var p = new(TemplateargumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templateargument

	return p
}

func (s *TemplateargumentContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateargumentContext) Thetypeid() IThetypeidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThetypeidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThetypeidContext)
}

func (s *TemplateargumentContext) Constantexpression() IConstantexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantexpressionContext)
}

func (s *TemplateargumentContext) Idexpression() IIdexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdexpressionContext)
}

func (s *TemplateargumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateargumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TemplateargumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTemplateargument(s)
	}
}

func (s *TemplateargumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTemplateargument(s)
	}
}

func (s *TemplateargumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTemplateargument(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Templateargument() (localctx ITemplateargumentContext) {
	localctx = NewTemplateargumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 362, CPP14ParserRULE_templateargument)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2298)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 297, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2295)
			p.Thetypeid()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2296)
			p.Constantexpression()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2297)
			p.Idexpression()
		}

	}


	return localctx
}


// ITypenamespecifierContext is an interface to support dynamic dispatch.
type ITypenamespecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypenamespecifierContext differentiates from other interfaces.
	IsTypenamespecifierContext()
}

type TypenamespecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypenamespecifierContext() *TypenamespecifierContext {
	var p = new(TypenamespecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_typenamespecifier
	return p
}

func (*TypenamespecifierContext) IsTypenamespecifierContext() {}

func NewTypenamespecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypenamespecifierContext {
	var p = new(TypenamespecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typenamespecifier

	return p
}

func (s *TypenamespecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TypenamespecifierContext) Typename_() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTypename_, 0)
}

func (s *TypenamespecifierContext) Nestednamespecifier() INestednamespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestednamespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestednamespecifierContext)
}

func (s *TypenamespecifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *TypenamespecifierContext) Simpletemplateid() ISimpletemplateidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpletemplateidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpletemplateidContext)
}

func (s *TypenamespecifierContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *TypenamespecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypenamespecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TypenamespecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTypenamespecifier(s)
	}
}

func (s *TypenamespecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTypenamespecifier(s)
	}
}

func (s *TypenamespecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTypenamespecifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Typenamespecifier() (localctx ITypenamespecifierContext) {
	localctx = NewTypenamespecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 364, CPP14ParserRULE_typenamespecifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2311)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 299, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2300)
			p.Match(CPP14ParserTypename_)
		}
		{
			p.SetState(2301)
			p.nestednamespecifier(0)
		}
		{
			p.SetState(2302)
			p.Match(CPP14ParserIdentifier)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2304)
			p.Match(CPP14ParserTypename_)
		}
		{
			p.SetState(2305)
			p.nestednamespecifier(0)
		}
		p.SetState(2307)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserTemplate {
			{
				p.SetState(2306)
				p.Match(CPP14ParserTemplate)
			}

		}
		{
			p.SetState(2309)
			p.Simpletemplateid()
		}

	}


	return localctx
}


// IExplicitinstantiationContext is an interface to support dynamic dispatch.
type IExplicitinstantiationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplicitinstantiationContext differentiates from other interfaces.
	IsExplicitinstantiationContext()
}

type ExplicitinstantiationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplicitinstantiationContext() *ExplicitinstantiationContext {
	var p = new(ExplicitinstantiationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_explicitinstantiation
	return p
}

func (*ExplicitinstantiationContext) IsExplicitinstantiationContext() {}

func NewExplicitinstantiationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplicitinstantiationContext {
	var p = new(ExplicitinstantiationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_explicitinstantiation

	return p
}

func (s *ExplicitinstantiationContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplicitinstantiationContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *ExplicitinstantiationContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *ExplicitinstantiationContext) Extern() antlr.TerminalNode {
	return s.GetToken(CPP14ParserExtern, 0)
}

func (s *ExplicitinstantiationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplicitinstantiationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ExplicitinstantiationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterExplicitinstantiation(s)
	}
}

func (s *ExplicitinstantiationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitExplicitinstantiation(s)
	}
}

func (s *ExplicitinstantiationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitExplicitinstantiation(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Explicitinstantiation() (localctx IExplicitinstantiationContext) {
	localctx = NewExplicitinstantiationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 366, CPP14ParserRULE_explicitinstantiation)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2314)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == CPP14ParserExtern {
		{
			p.SetState(2313)
			p.Match(CPP14ParserExtern)
		}

	}
	{
		p.SetState(2316)
		p.Match(CPP14ParserTemplate)
	}
	{
		p.SetState(2317)
		p.Declaration()
	}



	return localctx
}


// IExplicitspecializationContext is an interface to support dynamic dispatch.
type IExplicitspecializationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplicitspecializationContext differentiates from other interfaces.
	IsExplicitspecializationContext()
}

type ExplicitspecializationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplicitspecializationContext() *ExplicitspecializationContext {
	var p = new(ExplicitspecializationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_explicitspecialization
	return p
}

func (*ExplicitspecializationContext) IsExplicitspecializationContext() {}

func NewExplicitspecializationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplicitspecializationContext {
	var p = new(ExplicitspecializationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_explicitspecialization

	return p
}

func (s *ExplicitspecializationContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplicitspecializationContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *ExplicitspecializationContext) Less() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, 0)
}

func (s *ExplicitspecializationContext) Greater() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, 0)
}

func (s *ExplicitspecializationContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *ExplicitspecializationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplicitspecializationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ExplicitspecializationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterExplicitspecialization(s)
	}
}

func (s *ExplicitspecializationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitExplicitspecialization(s)
	}
}

func (s *ExplicitspecializationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitExplicitspecialization(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Explicitspecialization() (localctx IExplicitspecializationContext) {
	localctx = NewExplicitspecializationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 368, CPP14ParserRULE_explicitspecialization)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2319)
		p.Match(CPP14ParserTemplate)
	}
	{
		p.SetState(2320)
		p.Match(CPP14ParserLess)
	}
	{
		p.SetState(2321)
		p.Match(CPP14ParserGreater)
	}
	{
		p.SetState(2322)
		p.Declaration()
	}



	return localctx
}


// ITryblockContext is an interface to support dynamic dispatch.
type ITryblockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTryblockContext differentiates from other interfaces.
	IsTryblockContext()
}

type TryblockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTryblockContext() *TryblockContext {
	var p = new(TryblockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_tryblock
	return p
}

func (*TryblockContext) IsTryblockContext() {}

func NewTryblockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryblockContext {
	var p = new(TryblockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_tryblock

	return p
}

func (s *TryblockContext) GetParser() antlr.Parser { return s.parser }

func (s *TryblockContext) Try() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTry, 0)
}

func (s *TryblockContext) Compoundstatement() ICompoundstatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompoundstatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompoundstatementContext)
}

func (s *TryblockContext) Handlerseq() IHandlerseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerseqContext)
}

func (s *TryblockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryblockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TryblockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTryblock(s)
	}
}

func (s *TryblockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTryblock(s)
	}
}

func (s *TryblockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTryblock(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Tryblock() (localctx ITryblockContext) {
	localctx = NewTryblockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 370, CPP14ParserRULE_tryblock)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2324)
		p.Match(CPP14ParserTry)
	}
	{
		p.SetState(2325)
		p.Compoundstatement()
	}
	{
		p.SetState(2326)
		p.Handlerseq()
	}



	return localctx
}


// IFunctiontryblockContext is an interface to support dynamic dispatch.
type IFunctiontryblockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctiontryblockContext differentiates from other interfaces.
	IsFunctiontryblockContext()
}

type FunctiontryblockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctiontryblockContext() *FunctiontryblockContext {
	var p = new(FunctiontryblockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_functiontryblock
	return p
}

func (*FunctiontryblockContext) IsFunctiontryblockContext() {}

func NewFunctiontryblockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctiontryblockContext {
	var p = new(FunctiontryblockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_functiontryblock

	return p
}

func (s *FunctiontryblockContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctiontryblockContext) Try() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTry, 0)
}

func (s *FunctiontryblockContext) Compoundstatement() ICompoundstatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompoundstatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompoundstatementContext)
}

func (s *FunctiontryblockContext) Handlerseq() IHandlerseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerseqContext)
}

func (s *FunctiontryblockContext) Ctorinitializer() ICtorinitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICtorinitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICtorinitializerContext)
}

func (s *FunctiontryblockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctiontryblockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *FunctiontryblockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterFunctiontryblock(s)
	}
}

func (s *FunctiontryblockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitFunctiontryblock(s)
	}
}

func (s *FunctiontryblockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitFunctiontryblock(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Functiontryblock() (localctx IFunctiontryblockContext) {
	localctx = NewFunctiontryblockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 372, CPP14ParserRULE_functiontryblock)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2328)
		p.Match(CPP14ParserTry)
	}
	p.SetState(2330)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == CPP14ParserColon {
		{
			p.SetState(2329)
			p.Ctorinitializer()
		}

	}
	{
		p.SetState(2332)
		p.Compoundstatement()
	}
	{
		p.SetState(2333)
		p.Handlerseq()
	}



	return localctx
}


// IHandlerseqContext is an interface to support dynamic dispatch.
type IHandlerseqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandlerseqContext differentiates from other interfaces.
	IsHandlerseqContext()
}

type HandlerseqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerseqContext() *HandlerseqContext {
	var p = new(HandlerseqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_handlerseq
	return p
}

func (*HandlerseqContext) IsHandlerseqContext() {}

func NewHandlerseqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerseqContext {
	var p = new(HandlerseqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_handlerseq

	return p
}

func (s *HandlerseqContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerseqContext) Handler() IHandlerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerContext)
}

func (s *HandlerseqContext) Handlerseq() IHandlerseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerseqContext)
}

func (s *HandlerseqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerseqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *HandlerseqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterHandlerseq(s)
	}
}

func (s *HandlerseqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitHandlerseq(s)
	}
}

func (s *HandlerseqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitHandlerseq(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Handlerseq() (localctx IHandlerseqContext) {
	localctx = NewHandlerseqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 374, CPP14ParserRULE_handlerseq)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2335)
		p.Handler()
	}
	p.SetState(2337)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 302, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2336)
			p.Handlerseq()
		}


	}



	return localctx
}


// IHandlerContext is an interface to support dynamic dispatch.
type IHandlerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandlerContext differentiates from other interfaces.
	IsHandlerContext()
}

type HandlerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerContext() *HandlerContext {
	var p = new(HandlerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_handler
	return p
}

func (*HandlerContext) IsHandlerContext() {}

func NewHandlerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerContext {
	var p = new(HandlerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_handler

	return p
}

func (s *HandlerContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerContext) Catch() antlr.TerminalNode {
	return s.GetToken(CPP14ParserCatch, 0)
}

func (s *HandlerContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *HandlerContext) Exceptiondeclaration() IExceptiondeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExceptiondeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExceptiondeclarationContext)
}

func (s *HandlerContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *HandlerContext) Compoundstatement() ICompoundstatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompoundstatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompoundstatementContext)
}

func (s *HandlerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *HandlerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterHandler(s)
	}
}

func (s *HandlerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitHandler(s)
	}
}

func (s *HandlerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitHandler(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Handler() (localctx IHandlerContext) {
	localctx = NewHandlerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 376, CPP14ParserRULE_handler)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2339)
		p.Match(CPP14ParserCatch)
	}
	{
		p.SetState(2340)
		p.Match(CPP14ParserLeftParen)
	}
	{
		p.SetState(2341)
		p.Exceptiondeclaration()
	}
	{
		p.SetState(2342)
		p.Match(CPP14ParserRightParen)
	}
	{
		p.SetState(2343)
		p.Compoundstatement()
	}



	return localctx
}


// IExceptiondeclarationContext is an interface to support dynamic dispatch.
type IExceptiondeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExceptiondeclarationContext differentiates from other interfaces.
	IsExceptiondeclarationContext()
}

type ExceptiondeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExceptiondeclarationContext() *ExceptiondeclarationContext {
	var p = new(ExceptiondeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_exceptiondeclaration
	return p
}

func (*ExceptiondeclarationContext) IsExceptiondeclarationContext() {}

func NewExceptiondeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExceptiondeclarationContext {
	var p = new(ExceptiondeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_exceptiondeclaration

	return p
}

func (s *ExceptiondeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ExceptiondeclarationContext) Typespecifierseq() ITypespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypespecifierseqContext)
}

func (s *ExceptiondeclarationContext) Declarator() IDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *ExceptiondeclarationContext) Attributespecifierseq() IAttributespecifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributespecifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributespecifierseqContext)
}

func (s *ExceptiondeclarationContext) Abstractdeclarator() IAbstractdeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAbstractdeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAbstractdeclaratorContext)
}

func (s *ExceptiondeclarationContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *ExceptiondeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExceptiondeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ExceptiondeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterExceptiondeclaration(s)
	}
}

func (s *ExceptiondeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitExceptiondeclaration(s)
	}
}

func (s *ExceptiondeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitExceptiondeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Exceptiondeclaration() (localctx IExceptiondeclarationContext) {
	localctx = NewExceptiondeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 378, CPP14ParserRULE_exceptiondeclaration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2359)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 306, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2346)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(2345)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(2348)
			p.Typespecifierseq()
		}
		{
			p.SetState(2349)
			p.Declarator()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2352)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(2351)
				p.attributespecifierseq(0)
			}

		}
		{
			p.SetState(2354)
			p.Typespecifierseq()
		}
		p.SetState(2356)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == CPP14ParserT__2 || _la == CPP14ParserDecltype || ((((_la - 84)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 84))) & ((1 << (CPP14ParserLeftParen - 84)) | (1 << (CPP14ParserLeftBracket - 84)) | (1 << (CPP14ParserStar - 84)) | (1 << (CPP14ParserAnd - 84)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (CPP14ParserDoublecolon - 128)) | (1 << (CPP14ParserEllipsis - 128)) | (1 << (CPP14ParserIdentifier - 128)))) != 0) {
			{
				p.SetState(2355)
				p.Abstractdeclarator()
			}

		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2358)
			p.Match(CPP14ParserEllipsis)
		}

	}


	return localctx
}


// IThrowexpressionContext is an interface to support dynamic dispatch.
type IThrowexpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThrowexpressionContext differentiates from other interfaces.
	IsThrowexpressionContext()
}

type ThrowexpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrowexpressionContext() *ThrowexpressionContext {
	var p = new(ThrowexpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_throwexpression
	return p
}

func (*ThrowexpressionContext) IsThrowexpressionContext() {}

func NewThrowexpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThrowexpressionContext {
	var p = new(ThrowexpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_throwexpression

	return p
}

func (s *ThrowexpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ThrowexpressionContext) Throw() antlr.TerminalNode {
	return s.GetToken(CPP14ParserThrow, 0)
}

func (s *ThrowexpressionContext) Assignmentexpression() IAssignmentexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentexpressionContext)
}

func (s *ThrowexpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThrowexpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ThrowexpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterThrowexpression(s)
	}
}

func (s *ThrowexpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitThrowexpression(s)
	}
}

func (s *ThrowexpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitThrowexpression(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Throwexpression() (localctx IThrowexpressionContext) {
	localctx = NewThrowexpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 380, CPP14ParserRULE_throwexpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2361)
		p.Match(CPP14ParserThrow)
	}
	p.SetState(2363)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 307, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2362)
			p.Assignmentexpression()
		}


	}



	return localctx
}


// IExceptionspecificationContext is an interface to support dynamic dispatch.
type IExceptionspecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExceptionspecificationContext differentiates from other interfaces.
	IsExceptionspecificationContext()
}

type ExceptionspecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExceptionspecificationContext() *ExceptionspecificationContext {
	var p = new(ExceptionspecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_exceptionspecification
	return p
}

func (*ExceptionspecificationContext) IsExceptionspecificationContext() {}

func NewExceptionspecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExceptionspecificationContext {
	var p = new(ExceptionspecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_exceptionspecification

	return p
}

func (s *ExceptionspecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *ExceptionspecificationContext) Dynamicexceptionspecification() IDynamicexceptionspecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDynamicexceptionspecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDynamicexceptionspecificationContext)
}

func (s *ExceptionspecificationContext) Noexceptspecification() INoexceptspecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoexceptspecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoexceptspecificationContext)
}

func (s *ExceptionspecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExceptionspecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ExceptionspecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterExceptionspecification(s)
	}
}

func (s *ExceptionspecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitExceptionspecification(s)
	}
}

func (s *ExceptionspecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitExceptionspecification(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Exceptionspecification() (localctx IExceptionspecificationContext) {
	localctx = NewExceptionspecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 382, CPP14ParserRULE_exceptionspecification)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2367)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserThrow:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2365)
			p.Dynamicexceptionspecification()
		}


	case CPP14ParserNoexcept:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2366)
			p.Noexceptspecification()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IDynamicexceptionspecificationContext is an interface to support dynamic dispatch.
type IDynamicexceptionspecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDynamicexceptionspecificationContext differentiates from other interfaces.
	IsDynamicexceptionspecificationContext()
}

type DynamicexceptionspecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDynamicexceptionspecificationContext() *DynamicexceptionspecificationContext {
	var p = new(DynamicexceptionspecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_dynamicexceptionspecification
	return p
}

func (*DynamicexceptionspecificationContext) IsDynamicexceptionspecificationContext() {}

func NewDynamicexceptionspecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DynamicexceptionspecificationContext {
	var p = new(DynamicexceptionspecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_dynamicexceptionspecification

	return p
}

func (s *DynamicexceptionspecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *DynamicexceptionspecificationContext) Throw() antlr.TerminalNode {
	return s.GetToken(CPP14ParserThrow, 0)
}

func (s *DynamicexceptionspecificationContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *DynamicexceptionspecificationContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *DynamicexceptionspecificationContext) Typeidlist() ITypeidlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeidlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeidlistContext)
}

func (s *DynamicexceptionspecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DynamicexceptionspecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *DynamicexceptionspecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterDynamicexceptionspecification(s)
	}
}

func (s *DynamicexceptionspecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitDynamicexceptionspecification(s)
	}
}

func (s *DynamicexceptionspecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitDynamicexceptionspecification(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Dynamicexceptionspecification() (localctx IDynamicexceptionspecificationContext) {
	localctx = NewDynamicexceptionspecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 384, CPP14ParserRULE_dynamicexceptionspecification)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2369)
		p.Match(CPP14ParserThrow)
	}
	{
		p.SetState(2370)
		p.Match(CPP14ParserLeftParen)
	}
	p.SetState(2372)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << CPP14ParserAuto) | (1 << CPP14ParserBool) | (1 << CPP14ParserChar) | (1 << CPP14ParserChar16) | (1 << CPP14ParserChar32) | (1 << CPP14ParserClass) | (1 << CPP14ParserConst) | (1 << CPP14ParserDecltype) | (1 << CPP14ParserDouble))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (CPP14ParserEnum - 32)) | (1 << (CPP14ParserFloat - 32)) | (1 << (CPP14ParserInt - 32)) | (1 << (CPP14ParserLong - 32)) | (1 << (CPP14ParserShort - 32)) | (1 << (CPP14ParserSigned - 32)))) != 0) || ((((_la - 65)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 65))) & ((1 << (CPP14ParserStruct - 65)) | (1 << (CPP14ParserTypename_ - 65)) | (1 << (CPP14ParserUnion - 65)) | (1 << (CPP14ParserUnsigned - 65)) | (1 << (CPP14ParserVoid - 65)) | (1 << (CPP14ParserVolatile - 65)) | (1 << (CPP14ParserWchar - 65)))) != 0) || _la == CPP14ParserDoublecolon || _la == CPP14ParserIdentifier {
		{
			p.SetState(2371)
			p.typeidlist(0)
		}

	}
	{
		p.SetState(2374)
		p.Match(CPP14ParserRightParen)
	}



	return localctx
}


// ITypeidlistContext is an interface to support dynamic dispatch.
type ITypeidlistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeidlistContext differentiates from other interfaces.
	IsTypeidlistContext()
}

type TypeidlistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeidlistContext() *TypeidlistContext {
	var p = new(TypeidlistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeidlist
	return p
}

func (*TypeidlistContext) IsTypeidlistContext() {}

func NewTypeidlistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeidlistContext {
	var p = new(TypeidlistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typeidlist

	return p
}

func (s *TypeidlistContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeidlistContext) Thetypeid() IThetypeidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThetypeidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThetypeidContext)
}

func (s *TypeidlistContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *TypeidlistContext) Typeidlist() ITypeidlistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeidlistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeidlistContext)
}

func (s *TypeidlistContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *TypeidlistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeidlistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TypeidlistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTypeidlist(s)
	}
}

func (s *TypeidlistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTypeidlist(s)
	}
}

func (s *TypeidlistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTypeidlist(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *CPP14Parser) Typeidlist() (localctx ITypeidlistContext) {
	return p.typeidlist(0)
}

func (p *CPP14Parser) typeidlist(_p int) (localctx ITypeidlistContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewTypeidlistContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ITypeidlistContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 386
	p.EnterRecursionRule(localctx, 386, CPP14ParserRULE_typeidlist, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2377)
		p.Thetypeid()
	}
	p.SetState(2379)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 310, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2378)
			p.Match(CPP14ParserEllipsis)
		}


	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2389)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 312, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewTypeidlistContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_typeidlist)
			p.SetState(2381)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(2382)
				p.Match(CPP14ParserComma)
			}
			{
				p.SetState(2383)
				p.Thetypeid()
			}
			p.SetState(2385)
			p.GetErrorHandler().Sync(p)


			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 311, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(2384)
					p.Match(CPP14ParserEllipsis)
				}


			}


		}
		p.SetState(2391)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 312, p.GetParserRuleContext())
	}



	return localctx
}


// INoexceptspecificationContext is an interface to support dynamic dispatch.
type INoexceptspecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNoexceptspecificationContext differentiates from other interfaces.
	IsNoexceptspecificationContext()
}

type NoexceptspecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoexceptspecificationContext() *NoexceptspecificationContext {
	var p = new(NoexceptspecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_noexceptspecification
	return p
}

func (*NoexceptspecificationContext) IsNoexceptspecificationContext() {}

func NewNoexceptspecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoexceptspecificationContext {
	var p = new(NoexceptspecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_noexceptspecification

	return p
}

func (s *NoexceptspecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *NoexceptspecificationContext) Noexcept() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNoexcept, 0)
}

func (s *NoexceptspecificationContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NoexceptspecificationContext) Constantexpression() IConstantexpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantexpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantexpressionContext)
}

func (s *NoexceptspecificationContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NoexceptspecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoexceptspecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NoexceptspecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterNoexceptspecification(s)
	}
}

func (s *NoexceptspecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitNoexceptspecification(s)
	}
}

func (s *NoexceptspecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitNoexceptspecification(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Noexceptspecification() (localctx INoexceptspecificationContext) {
	localctx = NewNoexceptspecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 388, CPP14ParserRULE_noexceptspecification)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2398)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 313, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2392)
			p.Match(CPP14ParserNoexcept)
		}
		{
			p.SetState(2393)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(2394)
			p.Constantexpression()
		}
		{
			p.SetState(2395)
			p.Match(CPP14ParserRightParen)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2397)
			p.Match(CPP14ParserNoexcept)
		}

	}


	return localctx
}


// ITheoperatorContext is an interface to support dynamic dispatch.
type ITheoperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTheoperatorContext differentiates from other interfaces.
	IsTheoperatorContext()
}

type TheoperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTheoperatorContext() *TheoperatorContext {
	var p = new(TheoperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_theoperator
	return p
}

func (*TheoperatorContext) IsTheoperatorContext() {}

func NewTheoperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TheoperatorContext {
	var p = new(TheoperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_theoperator

	return p
}

func (s *TheoperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *TheoperatorContext) New() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNew, 0)
}

func (s *TheoperatorContext) Delete() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDelete, 0)
}

func (s *TheoperatorContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *TheoperatorContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *TheoperatorContext) Plus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlus, 0)
}

func (s *TheoperatorContext) Minus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinus, 0)
}

func (s *TheoperatorContext) Star() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStar, 0)
}

func (s *TheoperatorContext) Div() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDiv, 0)
}

func (s *TheoperatorContext) Mod() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMod, 0)
}

func (s *TheoperatorContext) Caret() antlr.TerminalNode {
	return s.GetToken(CPP14ParserCaret, 0)
}

func (s *TheoperatorContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *TheoperatorContext) Or() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOr, 0)
}

func (s *TheoperatorContext) Tilde() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTilde, 0)
}

func (s *TheoperatorContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *TheoperatorContext) Less() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, 0)
}

func (s *TheoperatorContext) Greater() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, 0)
}

func (s *TheoperatorContext) PlusAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlusAssign, 0)
}

func (s *TheoperatorContext) MinusAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinusAssign, 0)
}

func (s *TheoperatorContext) StarAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStarAssign, 0)
}

func (s *TheoperatorContext) DivAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDivAssign, 0)
}

func (s *TheoperatorContext) ModAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserModAssign, 0)
}

func (s *TheoperatorContext) XorAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserXorAssign, 0)
}

func (s *TheoperatorContext) AndAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAndAssign, 0)
}

func (s *TheoperatorContext) OrAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOrAssign, 0)
}

func (s *TheoperatorContext) LeftShift() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftShift, 0)
}

func (s *TheoperatorContext) RightShift() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightShift, 0)
}

func (s *TheoperatorContext) RightShiftAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightShiftAssign, 0)
}

func (s *TheoperatorContext) LeftShiftAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftShiftAssign, 0)
}

func (s *TheoperatorContext) Equal() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEqual, 0)
}

func (s *TheoperatorContext) NotEqual() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNotEqual, 0)
}

func (s *TheoperatorContext) LessEqual() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLessEqual, 0)
}

func (s *TheoperatorContext) GreaterEqual() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreaterEqual, 0)
}

func (s *TheoperatorContext) PlusPlus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlusPlus, 0)
}

func (s *TheoperatorContext) MinusMinus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinusMinus, 0)
}

func (s *TheoperatorContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *TheoperatorContext) ArrowStar() antlr.TerminalNode {
	return s.GetToken(CPP14ParserArrowStar, 0)
}

func (s *TheoperatorContext) Arrow() antlr.TerminalNode {
	return s.GetToken(CPP14ParserArrow, 0)
}

func (s *TheoperatorContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *TheoperatorContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *TheoperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TheoperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TheoperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterTheoperator(s)
	}
}

func (s *TheoperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitTheoperator(s)
	}
}

func (s *TheoperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitTheoperator(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Theoperator() (localctx ITheoperatorContext) {
	localctx = NewTheoperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 390, CPP14ParserRULE_theoperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2451)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 314, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2400)
			p.Match(CPP14ParserNew)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2401)
			p.Match(CPP14ParserDelete)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2402)
			p.Match(CPP14ParserNew)
		}
		{
			p.SetState(2403)
			p.Match(CPP14ParserLeftBracket)
		}
		{
			p.SetState(2404)
			p.Match(CPP14ParserRightBracket)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2405)
			p.Match(CPP14ParserDelete)
		}
		{
			p.SetState(2406)
			p.Match(CPP14ParserLeftBracket)
		}
		{
			p.SetState(2407)
			p.Match(CPP14ParserRightBracket)
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2408)
			p.Match(CPP14ParserPlus)
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2409)
			p.Match(CPP14ParserMinus)
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2410)
			p.Match(CPP14ParserStar)
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2411)
			p.Match(CPP14ParserDiv)
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2412)
			p.Match(CPP14ParserMod)
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2413)
			p.Match(CPP14ParserCaret)
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2414)
			p.Match(CPP14ParserAnd)
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2415)
			p.Match(CPP14ParserOr)
		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(2416)
			p.Match(CPP14ParserTilde)
		}


	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(2417)
			p.Match(CPP14ParserT__0)
		}


	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(2418)
			p.Match(CPP14ParserT__1)
		}


	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(2419)
			p.Match(CPP14ParserAssign)
		}


	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(2420)
			p.Match(CPP14ParserLess)
		}


	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(2421)
			p.Match(CPP14ParserGreater)
		}


	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(2422)
			p.Match(CPP14ParserPlusAssign)
		}


	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(2423)
			p.Match(CPP14ParserMinusAssign)
		}


	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(2424)
			p.Match(CPP14ParserStarAssign)
		}


	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(2425)
			p.Match(CPP14ParserDivAssign)
		}


	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(2426)
			p.Match(CPP14ParserModAssign)
		}


	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(2427)
			p.Match(CPP14ParserXorAssign)
		}


	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(2428)
			p.Match(CPP14ParserAndAssign)
		}


	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(2429)
			p.Match(CPP14ParserOrAssign)
		}


	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(2430)
			p.Match(CPP14ParserLeftShift)
		}


	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(2431)
			p.Match(CPP14ParserRightShift)
		}


	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(2432)
			p.Match(CPP14ParserRightShiftAssign)
		}


	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(2433)
			p.Match(CPP14ParserLeftShiftAssign)
		}


	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(2434)
			p.Match(CPP14ParserEqual)
		}


	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(2435)
			p.Match(CPP14ParserNotEqual)
		}


	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(2436)
			p.Match(CPP14ParserLessEqual)
		}


	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(2437)
			p.Match(CPP14ParserGreaterEqual)
		}


	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(2438)
			p.Match(CPP14ParserT__2)
		}


	case 36:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(2439)
			p.Match(CPP14ParserT__3)
		}


	case 37:
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(2440)
			p.Match(CPP14ParserT__4)
		}


	case 38:
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(2441)
			p.Match(CPP14ParserT__5)
		}


	case 39:
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(2442)
			p.Match(CPP14ParserPlusPlus)
		}


	case 40:
		p.EnterOuterAlt(localctx, 40)
		{
			p.SetState(2443)
			p.Match(CPP14ParserMinusMinus)
		}


	case 41:
		p.EnterOuterAlt(localctx, 41)
		{
			p.SetState(2444)
			p.Match(CPP14ParserComma)
		}


	case 42:
		p.EnterOuterAlt(localctx, 42)
		{
			p.SetState(2445)
			p.Match(CPP14ParserArrowStar)
		}


	case 43:
		p.EnterOuterAlt(localctx, 43)
		{
			p.SetState(2446)
			p.Match(CPP14ParserArrow)
		}


	case 44:
		p.EnterOuterAlt(localctx, 44)
		{
			p.SetState(2447)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(2448)
			p.Match(CPP14ParserRightParen)
		}


	case 45:
		p.EnterOuterAlt(localctx, 45)
		{
			p.SetState(2449)
			p.Match(CPP14ParserLeftBracket)
		}
		{
			p.SetState(2450)
			p.Match(CPP14ParserRightBracket)
		}

	}


	return localctx
}


// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_literal
	return p
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) Integerliteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIntegerliteral, 0)
}

func (s *LiteralContext) Characterliteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserCharacterliteral, 0)
}

func (s *LiteralContext) Floatingliteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserFloatingliteral, 0)
}

func (s *LiteralContext) Stringliteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStringliteral, 0)
}

func (s *LiteralContext) Booleanliteral() IBooleanliteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanliteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanliteralContext)
}

func (s *LiteralContext) Pointerliteral() IPointerliteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPointerliteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPointerliteralContext)
}

func (s *LiteralContext) Userdefinedliteral() IUserdefinedliteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserdefinedliteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserdefinedliteralContext)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *LiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterLiteral(s)
	}
}

func (s *LiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitLiteral(s)
	}
}

func (s *LiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Literal() (localctx ILiteralContext) {
	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 392, CPP14ParserRULE_literal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2460)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserIntegerliteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2453)
			p.Match(CPP14ParserIntegerliteral)
		}


	case CPP14ParserCharacterliteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2454)
			p.Match(CPP14ParserCharacterliteral)
		}


	case CPP14ParserFloatingliteral:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2455)
			p.Match(CPP14ParserFloatingliteral)
		}


	case CPP14ParserStringliteral:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2456)
			p.Match(CPP14ParserStringliteral)
		}


	case CPP14ParserFalse, CPP14ParserTrue:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2457)
			p.Booleanliteral()
		}


	case CPP14ParserNullptr:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2458)
			p.Pointerliteral()
		}


	case CPP14ParserUserdefinedintegerliteral, CPP14ParserUserdefinedfloatingliteral, CPP14ParserUserdefinedstringliteral, CPP14ParserUserdefinedcharacterliteral:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2459)
			p.Userdefinedliteral()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IBooleanliteralContext is an interface to support dynamic dispatch.
type IBooleanliteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBooleanliteralContext differentiates from other interfaces.
	IsBooleanliteralContext()
}

type BooleanliteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBooleanliteralContext() *BooleanliteralContext {
	var p = new(BooleanliteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_booleanliteral
	return p
}

func (*BooleanliteralContext) IsBooleanliteralContext() {}

func NewBooleanliteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BooleanliteralContext {
	var p = new(BooleanliteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_booleanliteral

	return p
}

func (s *BooleanliteralContext) GetParser() antlr.Parser { return s.parser }

func (s *BooleanliteralContext) False() antlr.TerminalNode {
	return s.GetToken(CPP14ParserFalse, 0)
}

func (s *BooleanliteralContext) True() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTrue, 0)
}

func (s *BooleanliteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BooleanliteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *BooleanliteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterBooleanliteral(s)
	}
}

func (s *BooleanliteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitBooleanliteral(s)
	}
}

func (s *BooleanliteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitBooleanliteral(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Booleanliteral() (localctx IBooleanliteralContext) {
	localctx = NewBooleanliteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 394, CPP14ParserRULE_booleanliteral)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2462)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserFalse || _la == CPP14ParserTrue) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IPointerliteralContext is an interface to support dynamic dispatch.
type IPointerliteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPointerliteralContext differentiates from other interfaces.
	IsPointerliteralContext()
}

type PointerliteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPointerliteralContext() *PointerliteralContext {
	var p = new(PointerliteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_pointerliteral
	return p
}

func (*PointerliteralContext) IsPointerliteralContext() {}

func NewPointerliteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PointerliteralContext {
	var p = new(PointerliteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_pointerliteral

	return p
}

func (s *PointerliteralContext) GetParser() antlr.Parser { return s.parser }

func (s *PointerliteralContext) Nullptr() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNullptr, 0)
}

func (s *PointerliteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PointerliteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PointerliteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterPointerliteral(s)
	}
}

func (s *PointerliteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitPointerliteral(s)
	}
}

func (s *PointerliteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitPointerliteral(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Pointerliteral() (localctx IPointerliteralContext) {
	localctx = NewPointerliteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 396, CPP14ParserRULE_pointerliteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2464)
		p.Match(CPP14ParserNullptr)
	}



	return localctx
}


// IUserdefinedliteralContext is an interface to support dynamic dispatch.
type IUserdefinedliteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserdefinedliteralContext differentiates from other interfaces.
	IsUserdefinedliteralContext()
}

type UserdefinedliteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserdefinedliteralContext() *UserdefinedliteralContext {
	var p = new(UserdefinedliteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_userdefinedliteral
	return p
}

func (*UserdefinedliteralContext) IsUserdefinedliteralContext() {}

func NewUserdefinedliteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserdefinedliteralContext {
	var p = new(UserdefinedliteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_userdefinedliteral

	return p
}

func (s *UserdefinedliteralContext) GetParser() antlr.Parser { return s.parser }

func (s *UserdefinedliteralContext) Userdefinedintegerliteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUserdefinedintegerliteral, 0)
}

func (s *UserdefinedliteralContext) Userdefinedfloatingliteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUserdefinedfloatingliteral, 0)
}

func (s *UserdefinedliteralContext) Userdefinedstringliteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUserdefinedstringliteral, 0)
}

func (s *UserdefinedliteralContext) Userdefinedcharacterliteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUserdefinedcharacterliteral, 0)
}

func (s *UserdefinedliteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserdefinedliteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *UserdefinedliteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.EnterUserdefinedliteral(s)
	}
}

func (s *UserdefinedliteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14Listener); ok {
		listenerT.ExitUserdefinedliteral(s)
	}
}

func (s *UserdefinedliteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14Visitor:
		return t.VisitUserdefinedliteral(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *CPP14Parser) Userdefinedliteral() (localctx IUserdefinedliteralContext) {
	localctx = NewUserdefinedliteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 398, CPP14ParserRULE_userdefinedliteral)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2466)
		_la = p.GetTokenStream().LA(1)

		if !(((((_la - 143)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 143))) & ((1 << (CPP14ParserUserdefinedintegerliteral - 143)) | (1 << (CPP14ParserUserdefinedfloatingliteral - 143)) | (1 << (CPP14ParserUserdefinedstringliteral - 143)) | (1 << (CPP14ParserUserdefinedcharacterliteral - 143)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


func (p *CPP14Parser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 5:
			var t *NestednamespecifierContext = nil
			if localctx != nil { t = localctx.(*NestednamespecifierContext) }
			return p.Nestednamespecifier_Sempred(t, predIndex)

	case 10:
			var t *CapturelistContext = nil
			if localctx != nil { t = localctx.(*CapturelistContext) }
			return p.Capturelist_Sempred(t, predIndex)

	case 15:
			var t *PostfixexpressionContext = nil
			if localctx != nil { t = localctx.(*PostfixexpressionContext) }
			return p.Postfixexpression_Sempred(t, predIndex)

	case 26:
			var t *NoptrnewdeclaratorContext = nil
			if localctx != nil { t = localctx.(*NoptrnewdeclaratorContext) }
			return p.Noptrnewdeclarator_Sempred(t, predIndex)

	case 31:
			var t *PmexpressionContext = nil
			if localctx != nil { t = localctx.(*PmexpressionContext) }
			return p.Pmexpression_Sempred(t, predIndex)

	case 32:
			var t *MultiplicativeexpressionContext = nil
			if localctx != nil { t = localctx.(*MultiplicativeexpressionContext) }
			return p.Multiplicativeexpression_Sempred(t, predIndex)

	case 33:
			var t *AdditiveexpressionContext = nil
			if localctx != nil { t = localctx.(*AdditiveexpressionContext) }
			return p.Additiveexpression_Sempred(t, predIndex)

	case 34:
			var t *ShiftexpressionContext = nil
			if localctx != nil { t = localctx.(*ShiftexpressionContext) }
			return p.Shiftexpression_Sempred(t, predIndex)

	case 36:
			var t *RelationalexpressionContext = nil
			if localctx != nil { t = localctx.(*RelationalexpressionContext) }
			return p.Relationalexpression_Sempred(t, predIndex)

	case 37:
			var t *EqualityexpressionContext = nil
			if localctx != nil { t = localctx.(*EqualityexpressionContext) }
			return p.Equalityexpression_Sempred(t, predIndex)

	case 38:
			var t *AndexpressionContext = nil
			if localctx != nil { t = localctx.(*AndexpressionContext) }
			return p.Andexpression_Sempred(t, predIndex)

	case 39:
			var t *ExclusiveorexpressionContext = nil
			if localctx != nil { t = localctx.(*ExclusiveorexpressionContext) }
			return p.Exclusiveorexpression_Sempred(t, predIndex)

	case 40:
			var t *InclusiveorexpressionContext = nil
			if localctx != nil { t = localctx.(*InclusiveorexpressionContext) }
			return p.Inclusiveorexpression_Sempred(t, predIndex)

	case 41:
			var t *LogicalandexpressionContext = nil
			if localctx != nil { t = localctx.(*LogicalandexpressionContext) }
			return p.Logicalandexpression_Sempred(t, predIndex)

	case 42:
			var t *LogicalorexpressionContext = nil
			if localctx != nil { t = localctx.(*LogicalorexpressionContext) }
			return p.Logicalorexpression_Sempred(t, predIndex)

	case 46:
			var t *ExpressionContext = nil
			if localctx != nil { t = localctx.(*ExpressionContext) }
			return p.Expression_Sempred(t, predIndex)

	case 52:
			var t *StatementseqContext = nil
			if localctx != nil { t = localctx.(*StatementseqContext) }
			return p.Statementseq_Sempred(t, predIndex)

	case 61:
			var t *DeclarationseqContext = nil
			if localctx != nil { t = localctx.(*DeclarationseqContext) }
			return p.Declarationseq_Sempred(t, predIndex)

	case 88:
			var t *EnumeratorlistContext = nil
			if localctx != nil { t = localctx.(*EnumeratorlistContext) }
			return p.Enumeratorlist_Sempred(t, predIndex)

	case 106:
			var t *AttributespecifierseqContext = nil
			if localctx != nil { t = localctx.(*AttributespecifierseqContext) }
			return p.Attributespecifierseq_Sempred(t, predIndex)

	case 109:
			var t *AttributelistContext = nil
			if localctx != nil { t = localctx.(*AttributelistContext) }
			return p.Attributelist_Sempred(t, predIndex)

	case 115:
			var t *BalancedtokenseqContext = nil
			if localctx != nil { t = localctx.(*BalancedtokenseqContext) }
			return p.Balancedtokenseq_Sempred(t, predIndex)

	case 117:
			var t *InitdeclaratorlistContext = nil
			if localctx != nil { t = localctx.(*InitdeclaratorlistContext) }
			return p.Initdeclaratorlist_Sempred(t, predIndex)

	case 121:
			var t *NoptrdeclaratorContext = nil
			if localctx != nil { t = localctx.(*NoptrdeclaratorContext) }
			return p.Noptrdeclarator_Sempred(t, predIndex)

	case 132:
			var t *NoptrabstractdeclaratorContext = nil
			if localctx != nil { t = localctx.(*NoptrabstractdeclaratorContext) }
			return p.Noptrabstractdeclarator_Sempred(t, predIndex)

	case 134:
			var t *NoptrabstractpackdeclaratorContext = nil
			if localctx != nil { t = localctx.(*NoptrabstractpackdeclaratorContext) }
			return p.Noptrabstractpackdeclarator_Sempred(t, predIndex)

	case 136:
			var t *ParameterdeclarationlistContext = nil
			if localctx != nil { t = localctx.(*ParameterdeclarationlistContext) }
			return p.Parameterdeclarationlist_Sempred(t, predIndex)

	case 143:
			var t *InitializerlistContext = nil
			if localctx != nil { t = localctx.(*InitializerlistContext) }
			return p.Initializerlist_Sempred(t, predIndex)

	case 153:
			var t *MemberdeclaratorlistContext = nil
			if localctx != nil { t = localctx.(*MemberdeclaratorlistContext) }
			return p.Memberdeclaratorlist_Sempred(t, predIndex)

	case 155:
			var t *VirtspecifierseqContext = nil
			if localctx != nil { t = localctx.(*VirtspecifierseqContext) }
			return p.Virtspecifierseq_Sempred(t, predIndex)

	case 159:
			var t *BasespecifierlistContext = nil
			if localctx != nil { t = localctx.(*BasespecifierlistContext) }
			return p.Basespecifierlist_Sempred(t, predIndex)

	case 174:
			var t *TemplateparameterlistContext = nil
			if localctx != nil { t = localctx.(*TemplateparameterlistContext) }
			return p.Templateparameterlist_Sempred(t, predIndex)

	case 180:
			var t *TemplateargumentlistContext = nil
			if localctx != nil { t = localctx.(*TemplateargumentlistContext) }
			return p.Templateargumentlist_Sempred(t, predIndex)

	case 193:
			var t *TypeidlistContext = nil
			if localctx != nil { t = localctx.(*TypeidlistContext) }
			return p.Typeidlist_Sempred(t, predIndex)


	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *CPP14Parser) Nestednamespecifier_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
			return p.Precpred(p.GetParserRuleContext(), 2)

	case 1:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Capturelist_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 2:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Postfixexpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 3:
			return p.Precpred(p.GetParserRuleContext(), 19)

	case 4:
			return p.Precpred(p.GetParserRuleContext(), 18)

	case 5:
			return p.Precpred(p.GetParserRuleContext(), 17)

	case 6:
			return p.Precpred(p.GetParserRuleContext(), 12)

	case 7:
			return p.Precpred(p.GetParserRuleContext(), 11)

	case 8:
			return p.Precpred(p.GetParserRuleContext(), 10)

	case 9:
			return p.Precpred(p.GetParserRuleContext(), 9)

	case 10:
			return p.Precpred(p.GetParserRuleContext(), 8)

	case 11:
			return p.Precpred(p.GetParserRuleContext(), 7)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Noptrnewdeclarator_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 12:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Pmexpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 13:
			return p.Precpred(p.GetParserRuleContext(), 2)

	case 14:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Multiplicativeexpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 15:
			return p.Precpred(p.GetParserRuleContext(), 3)

	case 16:
			return p.Precpred(p.GetParserRuleContext(), 2)

	case 17:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Additiveexpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 18:
			return p.Precpred(p.GetParserRuleContext(), 2)

	case 19:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Shiftexpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 20:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Relationalexpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 21:
			return p.Precpred(p.GetParserRuleContext(), 4)

	case 22:
			return p.Precpred(p.GetParserRuleContext(), 3)

	case 23:
			return p.Precpred(p.GetParserRuleContext(), 2)

	case 24:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Equalityexpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 25:
			return p.Precpred(p.GetParserRuleContext(), 2)

	case 26:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Andexpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 27:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Exclusiveorexpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 28:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Inclusiveorexpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 29:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Logicalandexpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 30:
			return p.Precpred(p.GetParserRuleContext(), 2)

	case 31:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Logicalorexpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 32:
			return p.Precpred(p.GetParserRuleContext(), 2)

	case 33:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 34:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Statementseq_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 35:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Declarationseq_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 36:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Enumeratorlist_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 37:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Attributespecifierseq_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 38:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Attributelist_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 39:
			return p.Precpred(p.GetParserRuleContext(), 3)

	case 40:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Balancedtokenseq_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 41:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Initdeclaratorlist_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 42:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Noptrdeclarator_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 43:
			return p.Precpred(p.GetParserRuleContext(), 3)

	case 44:
			return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Noptrabstractdeclarator_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 45:
			return p.Precpred(p.GetParserRuleContext(), 5)

	case 46:
			return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Noptrabstractpackdeclarator_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 47:
			return p.Precpred(p.GetParserRuleContext(), 3)

	case 48:
			return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Parameterdeclarationlist_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 49:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Initializerlist_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 50:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Memberdeclaratorlist_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 51:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Virtspecifierseq_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 52:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Basespecifierlist_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 53:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Templateparameterlist_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 54:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Templateargumentlist_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 55:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) Typeidlist_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 56:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

